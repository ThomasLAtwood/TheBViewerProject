// ReportStatus.h : Defines the functions and data structures that handle status and error reporting.
//
//	Written by Thomas L. Atwood
//	P.O. Box 1089
//	West Fork, Arkansas 72774
//	(479)445-4690
//	TomAtwood@Earthlink.net
//
//	Copyright © 2010 CDC
//
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//	
//	The above copyright notice and this permission notice shall be included in
//	all copies or substantial portions of the Software.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//	THE SOFTWARE.
//

#pragma once


#define STATUS_ERROR_CREATE_SEMAPHORE			1

#define STATUS_ERROR_DICT_LENGTH				1


#define MAX_MESSAGE_REPETITIONS			100
#define REPETITION_RESET_IN_SECONDS		900		// 15 minutes.


// Each module declares its local error dictionary.  Each possible error message
// that can be generated by that module is encoded using the following data
// structure.
typedef struct
	{
	unsigned long		ErrorCode;
	char				*pErrorMessage;
	BOOL				LogRepetitionCount;
	time_t				LastLogTime;
	} ERROR_DICTIONARY_ENTRY;


// Each module's error dictionary is encoded using the following data structure.
typedef struct ErrorDictionaryModule
	{
	unsigned long					nModuleIndex;
	ERROR_DICTIONARY_ENTRY			*pFirstDictionaryEntry;		// Pointer to the array of
																// possible error messages.
	unsigned long					nEntryCount;
	struct ErrorDictionaryModule	*pNextModule;
	} ERROR_DICTIONARY_MODULE;


// Function prototypes.
//
void					InitStatusModule();
void					CloseStatusModule();

unsigned				GetLoggingDetail();
ERROR_DICTIONARY_ENTRY	*GetMessageFromDictionary( unsigned long nModuleIndex, unsigned MessageCode );
void					RegisterErrorDictionary( ERROR_DICTIONARY_MODULE *pNewErrorDictionaryModule );
void					RespondToError( unsigned long nModuleIndex, unsigned ErrorCode );
void					CheckForLogFileRotation( char *pFullLogFileSpecification );
void					LogMessage( char *pMessage, long MessageType );
							#define MESSAGE_TYPE_NORMAL_LOG			0x0000		// Normal log message.
							#define MESSAGE_TYPE_SUPPLEMENTARY		0x0001		// Supplementary information, not normally viewed.
							#define MESSAGE_TYPE_DETAILS			0x0002		// Detailed debugging information.
							#define MESSAGE_TYPE_ERROR				0x0008
							#define MESSAGE_TYPE_SERVICE_CONTROL	0x0010
							#define MESSAGE_TYPE_NO_TIME_STAMP		0x0100
void					PrintEvent( const char *Message );
DWORD					GetLastSystemErrorMessage( char *TextBuffer, DWORD BufferSize );
void					TrimBlanks( char *pTextString );



