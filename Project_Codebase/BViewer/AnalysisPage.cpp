// AnalysisPage.cpp : Implementation file for the CAnalysisPage
//  class of CPropertyPage, which implements the "Enter Interpretation" tab
//  of the main Control Panel.
//
//	Written by Thomas L. Atwood
//	P.O. Box 1089
//	West Fork, Arkansas 72774
//	(479)445-4690
//	TomAtwood@Earthlink.net
//
//	Copyright © 2010 CDC
//
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//	
//	The above copyright notice and this permission notice shall be included in
//	all copies or substantial portions of the Software.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//	THE SOFTWARE.
//
#include "stdafx.h"
#include "BViewer.h"
#include "Module.h"
#include "ReportStatus.h"
#include "AnalysisPage.h"
#include "ControlPanel.h"
#include "DiagnosticImage.h"
#include "Mouse.h"
#include "ImageView.h"
#include "MainFrm.h"


extern CBViewerApp				ThisBViewerApp;
extern CONFIGURATION			BViewerConfiguration;
extern READER_PERSONAL_INFO		LoggedInReaderInfo;			// Saved reader info, used for restoring overwrites from imported studies.

static BOOL						bTurnOffQualityControl;


// CAnalysisPage dialog

CAnalysisPage::CAnalysisPage() : CPropertyPage( CAnalysisPage::IDD ),
		m_StaticSubject( "Subject:", 60, 20, 16, 8, 5, COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_TOP_JUSTIFIED | CONTROL_VISIBLE,
									IDC_STATIC_ANALYSIS_SUBJECT ),
		m_StaticPatientName( "<None Selected>", 200, 20, 16, 8, 5, COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_TOP_JUSTIFIED | CONTROL_VISIBLE,
									IDC_STATIC_ANALYSIS_PATIENT_NAME ),
		m_ImageQualityButton( "Indicate\nImage Quality", 150, 80, 16, 8, 6, COLOR_ANALYSIS_FONT,
									COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_PUSHBUTTON | CONTROL_MULTILINE | CONTROL_VISIBLE |
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED,
									IDC_BUTTON_IMAGE_QUALITY ),
			m_StaticImageQualityTitle( "Image Quality:", 300, 30, 24, 12, 5, COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_TOP_JUSTIFIED | CONTROL_INVISIBLE,
									IDC_STATIC_ANALYSIS_IMAGE_QUALITY ),

			m_ImageGrade1( "1", 30, 30, 14, 7, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE, IDC_BUTTON_IMAGE_GRADE_1 ),
			m_ImageGrade2( "2", 30, 30, 14, 7, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE, IDC_BUTTON_IMAGE_GRADE_2 ),
			m_ImageGrade3( "3", 30, 30, 14, 7, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE, IDC_BUTTON_IMAGE_GRADE_3 ),
			m_ImageGradeUR( "U/R", 30, 30, 12, 6, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE, IDC_BUTTON_IMAGE_GRADE_UR ),
			m_ImageGradeButtonGroup( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 4,
									&m_ImageGrade1, &m_ImageGrade2, &m_ImageGrade3, &m_ImageGradeUR ),
			m_ImageGradeExplanation( "", 400, 30, 11, 6, 5, COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_TOP_JUSTIFIED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_IMAGE_EXPLANATION ),

			m_ImageOverexposed( "Overexposed\n(dark)", 150, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_IMAGE_OVEREXPOSED ),
			m_ImageUnderexposed( "Underexposed\n(light)", 150, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_IMAGE_UNDEREXPOSED ),
			m_ImageArtifacts( "Artifacts", 150, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_IMAGE_ARTIFACTS ),
			m_ImageImproperPosition( "Improper\nPosition", 150, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_IMAGE_IMPROPER_POSITION ),
			m_ImagePoorContrast( "Poor\nContrast", 150, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_IMAGE_POOR_CONTRAST ),
			m_ImagePoorProcessing( "Poor\nProcessing", 150, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_IMAGE_POOR_PROCESSING ),
			m_ImageUnderinflation( "Underinflation", 150, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_IMAGE_UNDERINFLATION ),
			m_ImageMottle( "Mottle", 150, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_IMAGE_MOTTLE ),
			m_ImageExcessiveEdgeEnhancement( "Excessive Edge\nEnhancement", 150, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_IMAGE_EXCESSIVE_EDGE ),
			m_ImageOther( "Other", 150, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_IMAGE_OTHER ),
			m_ImageQualificationButtonGroup( BUTTON_CHECKBOX, GROUP_MULTIPLE_SELECT | GROUP_ONE_TOUCHES_ALL, 10,
									&m_ImageOverexposed, &m_ImageUnderexposed, &m_ImageArtifacts, &m_ImageImproperPosition, &m_ImagePoorContrast,
									&m_ImagePoorProcessing, &m_ImageUnderinflation, &m_ImageMottle, &m_ImageExcessiveEdgeEnhancement, &m_ImageOther ),

			m_StaticPleaseSpecify( "Other - Please Specify:", 180, 20, 14, 7, 6, 0x000000ff, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_CLIP | CONTROL_VISIBLE,
									IDC_STATIC_IMAGE_QUALITY_OTHER ),
			m_EditImageQualityOther( "", 300, 40, 16, 8, 5, VARIABLE_PITCH_FONT, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED_LIGHT, COLOR_COMPLETED_LIGHT, COLOR_TOUCHED,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_TOP_JUSTIFIED | CONTROL_MULTILINE | CONTROL_CLIP | EDIT_BORDER | CONTROL_VISIBLE,
									EDIT_VALIDATION_NONE, IDC_EDIT_IMAGE_QUALITY_OTHER ),

		m_ApproveStudyButton( "Normal  Study\n\nNo pneumoconiosis or\nsignificant abnormality", 210, 100, 16, 8, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_PUSHBUTTON | CONTROL_MULTILINE | CONTROL_VISIBLE |
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED,
									IDC_BUTTON_APPROVE_STUDY ),

		m_Static_OR_( " - OR -", 80, 20, 16, 8, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_CLIP | CONTROL_VISIBLE,
									IDC_STATIC_OR ),

		m_ParenchymalAbnormalityButton( "Parenchymal\nAbnormalities", 150, 80, 16, 8, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_PUSHBUTTON | CONTROL_MULTILINE | CONTROL_VISIBLE |
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED,
									IDC_BUTTON_PARENCHYMAL_ABNORMALITY ),
			m_StaticParenchymalAbnormalitiesTitle( "Parenchymal Abnormalities:", 350, 30, 24, 12, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_TOP_JUSTIFIED | CONTROL_INVISIBLE,
									IDC_STATIC_ANALYSIS_PARENCHYMAL_ABN ),
			m_AnyParenchymalAbnormalities( "ANY CLASSIFIABLE PARENCHYMAL ABNORMALITIES?", 450, 30, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_TOP_JUSTIFIED | CONTROL_CLIP | CONTROL_INVISIBLE,
									IDC_STATIC_ANY_PARENCHYMAL_ABNORM ),
			m_ButtonParenchymalYes( "YES", 40, 30, 14, 7, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PARENCHYMAL_YES ),
			m_ButtonParenchymalNo( "NO", 40, 30, 14, 7, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PARENCHYMAL_NO ),
			m_ParenchymalYesNoButtonGroup( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 2,
									&m_ButtonParenchymalYes, &m_ButtonParenchymalNo ),

			m_SmallOpacitiesSubtitle( "SMALL OPACITIES", 150, 20, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SMALL_OPACITIES_SUBTITLE ),
			m_LargeOpacitiesSubtitle( "LARGE OPACITIES", 150, 20, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_LARGE_OPACITIES_SUBTITLE ),
				m_StaticShapeAndSize( "Shape / Size", 100, 20, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SHAPE_AND_SIZE ),
				m_StaticPrimary( "Primary", 60, 20, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SMALL_PRIMARY ),
				m_StaticSecondary( "Secondary", 80, 20, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SMALL_SECONDARY ),
				m_StaticZones( "Zones", 50, 20, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SMALL_ZONES ),
				m_StaticProfusion( "Profusion", 75, 20, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SMALL_PROFUSION ),
				m_StaticSize( "Size", 40, 20, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_LARGE_SIZE ),
				m_ParenchymalStaticTextGroup( GROUP_STATIC, 0, 8, &m_SmallOpacitiesSubtitle, &m_LargeOpacitiesSubtitle, &m_StaticShapeAndSize,
									&m_StaticPrimary, &m_StaticSecondary, &m_StaticZones, &m_StaticProfusion, &m_StaticSize ),

				m_ButtonPrimary_P( "p", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PRIMARY_P ),
				m_ButtonPrimary_S( "s", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PRIMARY_S ),
				m_ButtonPrimary_Q( "q", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PRIMARY_Q ),
				m_ButtonPrimary_T( "t", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PRIMARY_T ),
				m_ButtonPrimary_R( "r", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PRIMARY_R ),
				m_ButtonPrimary_U( "u", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PRIMARY_U ),
				m_SmallOpacityPrimaryButtonGroup( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 6,
									&m_ButtonPrimary_P, &m_ButtonPrimary_S, &m_ButtonPrimary_Q,
									&m_ButtonPrimary_T, &m_ButtonPrimary_R, &m_ButtonPrimary_U ),

				m_ButtonSecondary_P( "p", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_SECONDARY_P ),
				m_ButtonSecondary_S( "s", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_SECONDARY_S ),
				m_ButtonSecondary_Q( "q", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_SECONDARY_Q ),
				m_ButtonSecondary_T( "t", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_SECONDARY_T ),
				m_ButtonSecondary_R( "r", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_SECONDARY_R ),
				m_ButtonSecondary_U( "u", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_SECONDARY_U ),
				m_SmallOpacitySecondaryButtonGroup( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 6,
									&m_ButtonSecondary_P, &m_ButtonSecondary_S, &m_ButtonSecondary_Q,
									&m_ButtonSecondary_T, &m_ButtonSecondary_R, &m_ButtonSecondary_U ),

				m_ButtonSmallOpacityZoneUpperRight( "Upper Right", 100, 40, 12, 6, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_ZONE_UPPER_RIGHT ),
				m_ButtonSmallOpacityZoneUpperLeft( "Upper Left", 100, 40, 12, 6, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_ZONE_UPPER_LEFT ),
				m_ButtonSmallOpacityZoneMiddleRight( "Middle Right", 100, 40, 12, 6, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_ZONE_MIDDLE_RIGHT ),
				m_ButtonSmallOpacityZoneMiddleLeft( "Middle Left", 100, 40, 12, 6, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_ZONE_MIDDLE_LEFT ),
				m_ButtonSmallOpacityZoneLowerRight( "Lower Right", 100, 40, 12, 6, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_ZONE_LOWER_RIGHT ),
				m_ButtonSmallOpacityZoneLowerLeft( "Lower Left", 100, 40, 12, 6, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_ZONE_LOWER_LEFT ),
				m_SmallOpacityZoneButtonGroup( BUTTON_CHECKBOX, GROUP_MULTIPLE_SELECT | GROUP_ONE_TOUCHES_ALL, 6,
									&m_ButtonSmallOpacityZoneUpperRight, &m_ButtonSmallOpacityZoneUpperLeft, &m_ButtonSmallOpacityZoneMiddleRight,
									&m_ButtonSmallOpacityZoneMiddleLeft, &m_ButtonSmallOpacityZoneLowerRight, &m_ButtonSmallOpacityZoneLowerLeft ),

				m_ButtonAllSmallOpacityZones( "Check All Zones", 120, 40, 12, 6, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CLICK_ALL_ZONES ),

				m_ButtonSmallOpacityProfusion_0Minus( "0/-", 40, 40, 16, 8, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PROFUSION_0MINUS ),
				m_ButtonSmallOpacityProfusion_00( "0/0", 40, 40, 16, 8, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PROFUSION_00 ),
				m_ButtonSmallOpacityProfusion_01( "0/1", 40, 40, 16, 8, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PROFUSION_01 ),
				m_ButtonSmallOpacityProfusion_10( "1/0", 40, 40, 16, 8, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PROFUSION_10 ),
				m_ButtonSmallOpacityProfusion_11( "1/1", 40, 40, 16, 8, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PROFUSION_11 ),
				m_ButtonSmallOpacityProfusion_12( "1/2", 40, 40, 16, 8, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PROFUSION_12 ),
				m_ButtonSmallOpacityProfusion_21( "2/1", 40, 40, 16, 8, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PROFUSION_21 ),
				m_ButtonSmallOpacityProfusion_22( "2/2", 40, 40, 16, 8, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PROFUSION_22 ),
				m_ButtonSmallOpacityProfusion_23( "2/3", 40, 40, 16, 8, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PROFUSION_23 ),
				m_ButtonSmallOpacityProfusion_32( "3/2", 40, 40, 16, 8, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PROFUSION_32 ),
				m_ButtonSmallOpacityProfusion_33( "3/3", 40, 40, 16, 8, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PROFUSION_33 ),
				m_ButtonSmallOpacityProfusion_3Plus( "3/+", 40, 40, 16, 8, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PROFUSION_3PLUS ),
				m_SmallOpacityProfusionButtonGroup( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 12,
									&m_ButtonSmallOpacityProfusion_0Minus, &m_ButtonSmallOpacityProfusion_00, &m_ButtonSmallOpacityProfusion_01,
									&m_ButtonSmallOpacityProfusion_10, &m_ButtonSmallOpacityProfusion_11, &m_ButtonSmallOpacityProfusion_12,
									&m_ButtonSmallOpacityProfusion_21, &m_ButtonSmallOpacityProfusion_22, &m_ButtonSmallOpacityProfusion_23,
									&m_ButtonSmallOpacityProfusion_32, &m_ButtonSmallOpacityProfusion_33, &m_ButtonSmallOpacityProfusion_3Plus ),

				m_ButtonLargeOpacitySize_0( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_LARGE_OPACITY_0 ),
				m_ButtonLargeOpacitySize_A( "A", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_LARGE_OPACITY_A ),
				m_ButtonLargeOpacitySize_B( "B", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_LARGE_OPACITY_B ),
				m_ButtonLargeOpacitySize_C( "C", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_LARGE_OPACITY_C ),
				m_LargeOpacitySizeButtonGroup( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 4,
									&m_ButtonLargeOpacitySize_0, &m_ButtonLargeOpacitySize_A, &m_ButtonLargeOpacitySize_B,
									&m_ButtonLargeOpacitySize_C ),

		m_PleuralAbnormalityButton( "Pleural\nAbnormalities", 150, 80, 16, 8, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_PUSHBUTTON | CONTROL_MULTILINE | CONTROL_VISIBLE |
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED,
									IDC_BUTTON_PLEURAL_ABNORMALITY ),
			m_StaticPleuralAbnormalitiesTitle( "Pleural Abnormalities:", 350, 30, 24, 12, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_TOP_JUSTIFIED | CONTROL_INVISIBLE,
									IDC_STATIC_ANALYSIS_PLEURAL_ABN ),
			m_AnyPleuralAbnormalities( "ANY CLASSIFIABLE PLEURAL ABNORMALITIES?", 450, 30, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_TOP_JUSTIFIED | CONTROL_CLIP | CONTROL_INVISIBLE,
									IDC_STATIC_ANY_PLEURAL_ABNORM ),
			m_ButtonPleuralYes( "YES", 40, 30, 14, 7, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_YES ),
			m_ButtonPleuralNo( "NO", 40, 30, 14, 7, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_NO ),
			m_PleuralYesNoButtonGroup( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 2,
									&m_ButtonPleuralYes, &m_ButtonPleuralNo ),

			m_PleuralPlaquesSubtitle( "PLEURAL PLAQUES", 150, 20, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_PLEURAL_PLAQUES_SUBTITLE ),
				m_StaticPleuralPlaquesSite( "Site", 30, 20, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_PLEURAL_PLAQUES_SITE ),
				m_StaticPleuralPlaquesChestProfile( "Chest wall\n      in profile", 100, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_PLEURAL_CHEST_PROFILE ),
				m_StaticPleuralPlaquesChestFaceOn( "Chest wall\n      Face on", 100, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_PLEURAL_CHEST_FACE_ON ),
				m_StaticPleuralPlaquesDiaphragm( "Diaphragm", 100, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_PLEURAL_DIAPHRAGM ),
				m_StaticPleuralPlaquesOther( "Other Site(s)", 100, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_PLEURAL_OTHER ),

				m_ButtonPleuralSiteChestProfileNone( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_SITE_PROFILE_0 ),
				m_ButtonPleuralSiteChestProfileRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_SITE_PROFILE_R ),
				m_ButtonPleuralSiteChestProfileLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_SITE_PROFILE_L ),
				m_GroupButtonsPleuralSiteChestProfile( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonPleuralSiteChestProfileNone, &m_ButtonPleuralSiteChestProfileRight, &m_ButtonPleuralSiteChestProfileLeft ),

				m_ButtonPleuralSiteChestFaceOnNone( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_SITE_FACE_ON_0 ),
				m_ButtonPleuralSiteChestFaceOnRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_SITE__FACE_ON_R ),
				m_ButtonPleuralSiteChestFaceOnLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_SITE__FACE_ON_L ),
				m_GroupButtonsPleuralSiteChestFaceOn( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonPleuralSiteChestFaceOnNone, &m_ButtonPleuralSiteChestFaceOnRight, &m_ButtonPleuralSiteChestFaceOnLeft ),

				m_ButtonPleuralSiteDiaphragmNone( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_SITE_DIAPHRAGM_0 ),
				m_ButtonPleuralSiteDiaphragmRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_SITE_DIAPHRAGM_R ),
				m_ButtonPleuralSiteDiaphragmLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_SITE_DIAPHRAGM_L ),
				m_GroupButtonsPleuralSiteDiaphragm( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonPleuralSiteDiaphragmNone, &m_ButtonPleuralSiteDiaphragmRight, &m_ButtonPleuralSiteDiaphragmLeft ),

				m_ButtonPleuralSiteOtherNone( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_SITE_OTHER_0 ),
				m_ButtonPleuralSiteOtherRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_SITE_OTHER_R ),
				m_ButtonPleuralSiteOtherLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_SITE_OTHER_L ),
				m_GroupButtonsPleuralSiteOther( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonPleuralSiteOtherNone, &m_ButtonPleuralSiteOtherRight, &m_ButtonPleuralSiteOtherLeft ),

				m_StaticPleuralCalcification( "Calcification", 100, 20, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_PLEURAL_CALCIFICATION ),
				m_ButtonCalcificationChestProfileNone( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CALCIFICATION_PROFILE_0 ),
				m_ButtonCalcificationChestProfileRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CALCIFICATION_PROFILE_R ),
				m_ButtonCalcificationChestProfileLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CALCIFICATION_PROFILE_L ),
				m_GroupButtonsCalcificationChestProfile( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonCalcificationChestProfileNone, &m_ButtonCalcificationChestProfileRight, &m_ButtonCalcificationChestProfileLeft ),

				m_ButtonCalcificationChestFaceOnNone( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CALCIFICATION_FACE_ON_0 ),
				m_ButtonCalcificationChestFaceOnRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CALCIFICATION__FACE_ON_R ),
				m_ButtonCalcificationChestFaceOnLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CALCIFICATION__FACE_ON_L ),
				m_GroupButtonsCalcificationChestFaceOn( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonCalcificationChestFaceOnNone, &m_ButtonCalcificationChestFaceOnRight, &m_ButtonCalcificationChestFaceOnLeft ),

				m_ButtonCalcificationDiaphragmNone( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CALCIFICATION_DIAPHRAGM_0 ),
				m_ButtonCalcificationDiaphragmRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CALCIFICATION_DIAPHRAGM_R ),
				m_ButtonCalcificationDiaphragmLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CALCIFICATION_DIAPHRAGM_L ),
				m_GroupButtonsCalcificationDiaphragm( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonCalcificationDiaphragmNone, &m_ButtonCalcificationDiaphragmRight, &m_ButtonCalcificationDiaphragmLeft ),

				m_ButtonCalcificationOtherNone( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CALCIFICATION_OTHER_0 ),
				m_ButtonCalcificationOtherRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CALCIFICATION_OTHER_R ),
				m_ButtonCalcificationOtherLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_CALCIFICATION_OTHER_L ),
				m_GroupButtonsCalcificationOther( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonCalcificationOtherNone, &m_ButtonCalcificationOtherRight, &m_ButtonCalcificationOtherLeft ),

				m_StaticPleuralExtent( "Extent (chest wall; combined for\n          in profile and face on)", 220, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE | CONTROL_MULTILINE,
									IDC_STATIC_PLEURAL_EXTENT ),
				m_ButtonPleuralExtentNoneOnRight( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_EXTENT_NO_RIGHT ),
				m_ButtonPleuralExtentRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_EXTENT_RIGHT ),
				m_GroupButtonsPleuralExtentRight( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 2,
									&m_ButtonPleuralExtentNoneOnRight, &m_ButtonPleuralExtentRight ),

				m_ButtonPleuralExtentRightSize1( "(1)  Up to 1/4 of\nLateral Chest Wall", 130, 40, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_EXTENT_RSIZE1 ),
				m_ButtonPleuralExtentRightSize2( "(2)  1/4 to 1/2 of\nLateral Chest Wall", 130, 40, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_EXTENT_RSIZE2 ),
				m_ButtonPleuralExtentRightSize3( "(3)     > 1/2 of\nLateral Chest Wall", 130, 40, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_EXTENT_RSIZE3 ),
				m_GroupButtonsPleuralExtentRightSize( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonPleuralExtentRightSize1, &m_ButtonPleuralExtentRightSize2, &m_ButtonPleuralExtentRightSize3 ),

				m_ButtonPleuralExtentNoneOnLeft( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_EXTENT_NO_LEFT ),
				m_ButtonPleuralExtentLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_EXTENT_LEFT ),
				m_GroupButtonsPleuralExtentLeft( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 2,
									&m_ButtonPleuralExtentNoneOnLeft, &m_ButtonPleuralExtentLeft ),

				m_ButtonPleuralExtentLeftSize1( "(1)  Up to 1/4 of\nLateral Chest Wall", 130, 40, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_EXTENT_LSIZE1 ),
				m_ButtonPleuralExtentLeftSize2( "(2)  1/4 to 1/2 of\nLateral Chest Wall", 130, 40, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_EXTENT_LSIZE2 ),
				m_ButtonPleuralExtentLeftSize3( "(3)     > 1/2 of\nLateral Chest Wall", 130, 40, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_EXTENT_LSIZE3 ),
				m_GroupButtonsPleuralExtentLeftSize( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonPleuralExtentLeftSize1, &m_ButtonPleuralExtentLeftSize2, &m_ButtonPleuralExtentLeftSize3 ),

				m_StaticPleuralWidth( "Width (in profile only)\n(3mm minimum width required)", 200, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE | CONTROL_MULTILINE,
									IDC_STATIC_PLEURAL_WIDTH ),
				m_ButtonPleuralWidthNoneOnRight( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_WIDTH_NO_RIGHT ),
				m_ButtonPleuralWidthRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_WIDTH_RIGHT ),
				m_GroupButtonsPleuralWidthRight( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 2,
									&m_ButtonPleuralWidthNoneOnRight, &m_ButtonPleuralWidthRight ),

				m_ButtonPleuralWidthRightSize1( "(a)   3 to 5 mm", 100, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_WIDTH_RSIZE1 ),
				m_ButtonPleuralWidthRightSize2( "(b)  5 to 10 mm", 100, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_WIDTH_RSIZE2 ),
				m_ButtonPleuralWidthRightSize3( "(c) > 10 mm", 100, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_WIDTH_RSIZE3 ),
				m_GroupButtonsPleuralWidthRightSize( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonPleuralWidthRightSize1, &m_ButtonPleuralWidthRightSize2, &m_ButtonPleuralWidthRightSize3 ),

				m_ButtonPleuralWidthNoneOnLeft( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_WIDTH_NO_LEFT ),
				m_ButtonPleuralWidthLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_WIDTH_LEFT ),
				m_GroupButtonsPleuralWidthLeft( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 2,
									&m_ButtonPleuralWidthNoneOnLeft, &m_ButtonPleuralWidthLeft ),

				m_ButtonPleuralWidthLeftSize1( "(a)   3 to 5 mm", 100, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_WIDTH_LSIZE1 ),
				m_ButtonPleuralWidthLeftSize2( "(b)  5 to 10 mm", 100, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_WIDTH_LSIZE2 ),
				m_ButtonPleuralWidthLeftSize3( "(c) > 10 mm", 100, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_WIDTH_LSIZE3 ),
				m_GroupButtonsPleuralWidthLeftSize( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonPleuralWidthLeftSize1, &m_ButtonPleuralWidthLeftSize2, &m_ButtonPleuralWidthLeftSize3 ),


			m_AngleObliterationSubtitle( "COSTOPHRENIC ANGLE OBLITERATION", 300, 20, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_ANGLE_OBLIT_SUBTITLE ),
				m_ButtonAngleObliterationNone( "NO", 40, 30, 14, 7, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_ANGLE_OBLIT_0 ),
				m_ButtonAngleObliterationRight( "R", 40, 30, 14, 7, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_ANGLE_OBLIT_R ),
				m_ButtonAngleObliterationLeft( "L", 40, 30, 14, 7, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_ANGLE_OBLIT_L ),
				m_GroupButtonsAngleObliteration( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonAngleObliterationNone, &m_ButtonAngleObliterationRight, &m_ButtonAngleObliterationLeft ),

			m_PleuralThickeningSubtitle( "DIFFUSE PLEURAL THICKENING", 300, 20, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_PLEURAL_THICK_SUBTITLE ),
			m_PleuralStaticTextGroup( GROUP_STATIC, 0, 10, &m_PleuralPlaquesSubtitle, &m_AngleObliterationSubtitle,
									&m_StaticPleuralPlaquesSite, &m_StaticPleuralCalcification, &m_StaticPleuralExtent, &m_StaticPleuralWidth,
									&m_StaticPleuralPlaquesChestProfile, &m_StaticPleuralPlaquesChestFaceOn,
									&m_StaticPleuralPlaquesDiaphragm, &m_StaticPleuralPlaquesOther  ),

				m_StaticPleuralThickeningSite( "Site", 30, 20, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_PLEURAL_THICK_SITE ),
				m_StaticPleuralThickeningChestProfile( "Chest wall\n      in profile", 100, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_PLEURAL_THICK_CHEST_PROFILE ),
				m_StaticPleuralThickeningChestFaceOn( "Chest wall\n      Face on", 100, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_PLEURAL_THICK_CHEST_FACE_ON ),
				m_StaticThickeningCalcification( "Calcification", 100, 20, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_PLEURAL_THICK_CALCIFICATION ),
				m_StaticPleuralThickeningExtent( "Extent (chest wall; combined for\n          in profile and face on)", 220, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE | CONTROL_MULTILINE,
									IDC_STATIC_PLEURAL_THICK_EXTENT ),
				m_StaticPleuralThickeningWidth( "Width (in profile only)\n(3mm minimum width required)", 200, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE | CONTROL_MULTILINE,
									IDC_STATIC_PLEURAL_THICK_WIDTH ),
			m_PleuralThickeningStaticTextGroup( GROUP_STATIC, 0, 7, &m_PleuralThickeningSubtitle, &m_StaticPleuralThickeningSite,
									&m_StaticPleuralThickeningChestProfile, &m_StaticPleuralThickeningChestFaceOn,
									&m_StaticThickeningCalcification, &m_StaticPleuralThickeningExtent, &m_StaticPleuralThickeningWidth ),

				m_ButtonThickeningSiteChestProfileNone( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_SITE_PROFILE_0 ),
				m_ButtonThickeningSiteChestProfileRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_SITE_PROFILE_R ),
				m_ButtonThickeningSiteChestProfileLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_SITE_PROFILE_L ),
				m_GroupButtonsThickeningSiteChestProfile( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonThickeningSiteChestProfileNone, &m_ButtonThickeningSiteChestProfileRight, &m_ButtonThickeningSiteChestProfileLeft ),

				m_ButtonThickeningSiteChestFaceOnNone( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_SITE_FACE_ON_0 ),
				m_ButtonThickeningSiteChestFaceOnRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_SITE_FACE_ON_R ),
				m_ButtonThickeningSiteChestFaceOnLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_SITE_FACE_ON_L ),
				m_GroupButtonsThickeningSiteChestFaceOn( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonThickeningSiteChestFaceOnNone, &m_ButtonThickeningSiteChestFaceOnRight, &m_ButtonThickeningSiteChestFaceOnLeft ),

				m_ButtonThickeningCalcificationChestProfileNone( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_THICK_CALCIFICATION_PROFILE_0 ),
				m_ButtonThickeningCalcificationChestProfileRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_THICK_CALCIFICATION_PROFILE_R ),
				m_ButtonThickeningCalcificationChestProfileLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_THICK_CALCIFICATION_PROFILE_L ),
				m_GroupButtonsThickeningCalcificationChestProfile( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonThickeningCalcificationChestProfileNone, &m_ButtonThickeningCalcificationChestProfileRight,
									&m_ButtonThickeningCalcificationChestProfileLeft ),

				m_ButtonThickeningCalcificationChestFaceOnNone( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_THICK_CALCIFICATION_FACE_ON_0 ),
				m_ButtonThickeningCalcificationChestFaceOnRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_THICK_CALCIFICATION_FACE_ON_R ),
				m_ButtonThickeningCalcificationChestFaceOnLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_THICK_CALCIFICATION_FACE_ON_L ),
				m_GroupButtonsThickeningCalcificationChestFaceOn( BUTTON_CHECKBOX, GROUP_SELECT_FIRST_OR_MULTIPLE | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonThickeningCalcificationChestFaceOnNone, &m_ButtonThickeningCalcificationChestFaceOnRight,
									&m_ButtonThickeningCalcificationChestFaceOnLeft ),

				m_ButtonPleuralThickeningExtentNoneOnRight( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_EXTENT_NO_RIGHT ),
				m_ButtonPleuralThickeningExtentRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_EXTENT_RIGHT ),
				m_GroupButtonsPleuralThickeningExtentRight( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 2,
									&m_ButtonPleuralThickeningExtentNoneOnRight, &m_ButtonPleuralThickeningExtentRight ),

				m_ButtonPleuralThickeningExtentRightSize1( "(1)  Up to 1/4 of\nLateral Chest Wall", 130, 40, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_EXTENT_RSIZE1 ),
				m_ButtonPleuralThickeningExtentRightSize2( "(2)  1/4 to 1/2 of\nLateral Chest Wall", 130, 40, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_EXTENT_RSIZE2 ),
				m_ButtonPleuralThickeningExtentRightSize3( "(3)     > 1/2 of\nLateral Chest Wall", 130, 40, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_EXTENT_RSIZE3 ),
				m_GroupButtonsPleuralThickeningExtentRightSize( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonPleuralThickeningExtentRightSize1, &m_ButtonPleuralThickeningExtentRightSize2,
									&m_ButtonPleuralThickeningExtentRightSize3 ),

				m_ButtonPleuralThickeningExtentNoneOnLeft( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_EXTENT_NO_LEFT ),
				m_ButtonPleuralThickeningExtentLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_EXTENT_LEFT ),
				m_GroupButtonsPleuralThickeningExtentLeft( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 2,
									&m_ButtonPleuralThickeningExtentNoneOnLeft, &m_ButtonPleuralThickeningExtentLeft ),

				m_ButtonPleuralThickeningExtentLeftSize1( "(1)  Up to 1/4 of\nLateral Chest Wall", 130, 40, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_EXTENT_LSIZE1 ),
				m_ButtonPleuralThickeningExtentLeftSize2( "(2)  1/4 to 1/2 of\nLateral Chest Wall", 130, 40, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_EXTENT_LSIZE2 ),
				m_ButtonPleuralThickeningExtentLeftSize3( "(3)     > 1/2 of\nLateral Chest Wall", 130, 40, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_EXTENT_LSIZE3 ),
				m_GroupButtonsPleuralThickeningExtentLeftSize( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonPleuralThickeningExtentLeftSize1, &m_ButtonPleuralThickeningExtentLeftSize2,
									&m_ButtonPleuralThickeningExtentLeftSize3 ),

				m_ButtonPleuralThickeningWidthNoneOnRight( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_WIDTH_NO_RIGHT ),
				m_ButtonPleuralThickeningWidthRight( "R", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_WIDTH_RIGHT ),
				m_GroupButtonsPleuralThickeningWidthRight( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 2,
									&m_ButtonPleuralThickeningWidthNoneOnRight, &m_ButtonPleuralThickeningWidthRight ),

				m_ButtonPleuralThickeningWidthRightSize1( "(a)   3 to 5 mm", 100, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_WIDTH_RSIZE1 ),
				m_ButtonPleuralThickeningWidthRightSize2( "(b)  5 to 10 mm", 100, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_WIDTH_RSIZE2 ),
				m_ButtonPleuralThickeningWidthRightSize3( "(c) > 10 mm", 100, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_WIDTH_RSIZE3 ),
				m_GroupButtonsPleuralThickeningWidthRightSize( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonPleuralThickeningWidthRightSize1, &m_ButtonPleuralThickeningWidthRightSize2,
									&m_ButtonPleuralThickeningWidthRightSize3 ),

				m_ButtonPleuralThickeningWidthNoneOnLeft( "0", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_WIDTH_NO_LEFT ),
				m_ButtonPleuralThickeningWidthLeft( "L", 40, 40, 18, 9, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_WIDTH_LEFT ),
				m_GroupButtonsPleuralThickeningWidthLeft( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 2,
									&m_ButtonPleuralThickeningWidthNoneOnLeft, &m_ButtonPleuralThickeningWidthLeft ),

				m_ButtonPleuralThickeningWidthLeftSize1( "(a)   3 to 5 mm", 100, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_WIDTH_LSIZE1 ),
				m_ButtonPleuralThickeningWidthLeftSize2( "(b)  5 to 10 mm", 100, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_WIDTH_LSIZE2 ),
				m_ButtonPleuralThickeningWidthLeftSize3( "(c) > 10 mm", 100, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_MULTILINE | CONTROL_INVISIBLE, IDC_BUTTON_PLEURAL_THICK_WIDTH_LSIZE3 ),
				m_GroupButtonsPleuralThickeningWidthLeftSize( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 3,
									&m_ButtonPleuralThickeningWidthLeftSize1, &m_ButtonPleuralThickeningWidthLeftSize2,
									&m_ButtonPleuralThickeningWidthLeftSize3 ),

		m_OtherAbnormalityButton( "Other\nAbnormalities", 150, 80, 16, 8, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_PUSHBUTTON | CONTROL_MULTILINE | CONTROL_VISIBLE |
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED,
									IDC_BUTTON_OTHER_ABNORMALITY ),
			m_StaticOtherAbnormalitiesTitle( "Any Other Abnormalities?", 320, 30, 24, 12, 5, COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_TOP_JUSTIFIED | CONTROL_INVISIBLE,
									IDC_STATIC_ANALYSIS_OTHER_ABN ),
			m_ButtonOtherYes( "YES", 40, 30, 14, 7, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_OTHER_YES ),
			m_ButtonOtherNo( "NO", 40, 30, 14, 7, 6, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED |
									CONTROL_CLIP | CONTROL_INVISIBLE, IDC_BUTTON_OTHER_NO ),
			m_OtherYesNoButtonGroup( BUTTON_CHECKBOX, GROUP_SINGLE_SELECT | GROUP_ONE_TOUCHES_ALL, 2,
									&m_ButtonOtherYes, &m_ButtonOtherNo ),
			m_OtherSymbolsSubtitle( "OTHER_SYMBOLS (OBLIGATORY):", 300, 30, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_OTHER_SYMBOLS_SUBTITLE ),
			m_OtherStaticTextGroup( GROUP_STATIC, 0, 1, &m_OtherSymbolsSubtitle ),

				m_ButtonSymbol_aa( "aa", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_AA ),
				m_ButtonSymbol_at( "at", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_AT ),
				m_ButtonSymbol_ax( "ax", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_AX ),
				m_ButtonSymbol_bu( "bu", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_BU ),
				m_ButtonSymbol_ca( "ca", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_CA ),
				m_ButtonSymbol_cg( "cg", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_CG ),
				m_ButtonSymbol_cn( "cn", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_CN ),
				m_ButtonSymbol_co( "co", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_CO ),
				m_ButtonSymbol_cp( "cp", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_CP ),
				m_ButtonSymbol_cv( "cv", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_CV ),
				m_ButtonSymbol_di( "di", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_DI ),
				m_ButtonSymbol_ef( "ef", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_EF ),
				m_ButtonSymbol_em( "em", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_EM ),
				m_ButtonSymbol_es( "es", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_ES ),
				m_ButtonSymbol_fr( "fr", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_FR ),
				m_ButtonSymbol_hi( "hi", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_HI ),
				m_ButtonSymbol_ho( "ho", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_HO ),
				m_ButtonSymbol_id( "id", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_ID ),
				m_ButtonSymbol_ih( "ih", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_IH ),
				m_ButtonSymbol_kl( "kl", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_KL ),
				m_ButtonSymbol_me( "me", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_ME ),
				m_ButtonSymbol_pa( "pa", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_PA ),
				m_ButtonSymbol_pb( "pb", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_PB ),
				m_ButtonSymbol_pi( "pi", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_PI ),
				m_ButtonSymbol_px( "px", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_PX ),
				m_ButtonSymbol_ra( "ra", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_RA ),
				m_ButtonSymbol_rp( "rp", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_RP ),
				m_ButtonSymbol_tb( "tb", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_TB ),
				m_ButtonSymbol_od( "od", 30, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SYMBOL_OD ),
				m_GroupButtonSymbols( BUTTON_CHECKBOX, GROUP_MULTIPLE_SELECT | GROUP_ONE_TOUCHES_ALL, 29,
									&m_ButtonSymbol_aa, &m_ButtonSymbol_at, &m_ButtonSymbol_ax, &m_ButtonSymbol_bu, &m_ButtonSymbol_ca,
									&m_ButtonSymbol_cg, &m_ButtonSymbol_cn, &m_ButtonSymbol_co, &m_ButtonSymbol_cp, &m_ButtonSymbol_cv,
									&m_ButtonSymbol_di, &m_ButtonSymbol_ef, &m_ButtonSymbol_em, &m_ButtonSymbol_es, &m_ButtonSymbol_fr,
									&m_ButtonSymbol_hi, &m_ButtonSymbol_ho, &m_ButtonSymbol_id, &m_ButtonSymbol_ih, &m_ButtonSymbol_kl,
									&m_ButtonSymbol_me, &m_ButtonSymbol_pa, &m_ButtonSymbol_pb, &m_ButtonSymbol_pi, &m_ButtonSymbol_px,
									&m_ButtonSymbol_ra, &m_ButtonSymbol_rp, &m_ButtonSymbol_tb, &m_ButtonSymbol_od ),

				m_StaticSymbol_aa( "atherosclerotic aorta", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_AA ),
				m_StaticSymbol_at( "significant apical pleural thickening", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_AT ),
				m_StaticSymbol_ax( "coalescence of small opacities", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_AX ),
				m_StaticSymbol_bu( "bulla(e)", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_BU ),
				m_StaticSymbol_ca( "cancer:  thoracic malignancies\nexcluding mesothelioma", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_CA ),
				m_StaticSymbol_cg( "calcified non-pneumoconiotic nodules\n(e.g. granuloma) or nodes", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_CG ),
				m_StaticSymbol_cn( "calcification in small\npneumoconiotic opacities", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_CN ),
				m_StaticSymbol_co( "abnormality of cardiac size or shape", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_CO ),
				m_StaticSymbol_cp( "cor pulmonale", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_CP ),
				m_StaticSymbol_cv( "cavity", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_CV ),
				m_StaticSymbol_di( "marked distortion of an intrathoracic\nstructure", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_DI ),
				m_StaticSymbol_ef( "pleural effusion", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_EF ),
				m_StaticSymbol_em( "emphysema", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_EM ),
				m_StaticSymbol_es( "eggshell calcification of hilar or\nmediastinal lymph nodes", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_ES ),
				m_StaticSymbol_fr( "fractured rib(s)(acute or healed)", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_FR ),
				m_StaticSymbol_hi( "enlargement of non-calcified hilar\nor mediastinal lymph nodes", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_HI ),
				m_StaticSymbol_ho( "honeycomb lung", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_HO ),
				m_StaticSymbol_id( "ill-defined diaphragm border", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_ID ),
				m_StaticSymbol_ih( "ill-defined heart border", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_IH ),
				m_StaticSymbol_kl( "septal (Kerley) lines", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_KL ),
				m_StaticSymbol_me( "mesothelioma", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_ME ),
				m_StaticSymbol_pa( "plate atelectasis", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_PA ),
				m_StaticSymbol_pb( "parenchymal bands", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_PB ),
				m_StaticSymbol_pi( "pleural thickening of an interlobar\nfissure", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_PI ),
				m_StaticSymbol_px( "pneumothorax", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_PX ),
				m_StaticSymbol_ra( "rounded atelectasis", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_RA ),
				m_StaticSymbol_rp( "rheumatoid pneumoconiosis", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_RP ),
				m_StaticSymbol_tb( "tuberculosis", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_TB ),
				m_StaticSymbol_od( "other disease or significant\nabnormality", 200, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_SYMBOL_OD ),
				m_GroupStaticSymbols( GROUP_STATIC, 0, 29,
									&m_StaticSymbol_aa, &m_StaticSymbol_at, &m_StaticSymbol_ax, &m_StaticSymbol_bu, &m_StaticSymbol_ca,
									&m_StaticSymbol_cg, &m_StaticSymbol_cn, &m_StaticSymbol_co, &m_StaticSymbol_cp, &m_StaticSymbol_cv,
									&m_StaticSymbol_di, &m_StaticSymbol_ef, &m_StaticSymbol_em, &m_StaticSymbol_es, &m_StaticSymbol_fr,
									&m_StaticSymbol_hi, &m_StaticSymbol_ho, &m_StaticSymbol_id, &m_StaticSymbol_ih, &m_StaticSymbol_kl,
									&m_StaticSymbol_me, &m_StaticSymbol_pa, &m_StaticSymbol_pb, &m_StaticSymbol_pi, &m_StaticSymbol_px,
									&m_StaticSymbol_ra, &m_StaticSymbol_rp, &m_StaticSymbol_tb, &m_StaticSymbol_od ),
				m_StaticMarkAllThatApply( "CHECK ALL ITEMS THAT APPLY: ", 250, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_MARK_ALL_THAT_APPLY ),
				m_StaticUseIsOptional( "(Use of this list is intended to reduce handwritten comments and is optional)", 400, 25, 12, 6, 5,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_USE_IS_OPTIONAL ),

				m_StaticDiaphragmAbnormalities( "Abnormalities of the\nDiaphragm", 180, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_DIAPHRAGM_ABNORMALITIES ),
				m_ButtonEventration( "Eventration", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_EVENTRATION ),
				m_ButtonHiatalHernia( "Hiatal hernia", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_HIATAL_HERNIA ),

				m_StaticAirwayDisorders( "Airway Disorders", 180, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_AIRWAY_DISORDERS ),
				m_ButtonBronchovascularMarkings( "Bronchovascular Markings\nheavy or increased", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_BRONCHOVASCULAR_MARKINGS ),
				m_ButtonHyperinflation( "Hyperinflation", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_HYPERINFLATION ),

				m_StaticBonyAbnormalities( "Bony Abnormalities", 180, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_BONY_ABNORMALITIES ),
				m_ButtonBonyChestCage( "Bony Chest\nCage Abnormality", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_BONY_CHEST_CAGE ),
				m_ButtonFractureHealed( "Fracture,\nhealed (non-rib)", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_FRACTURE_HEALED ),
				m_ButtonFractureNonHealed( "Fracture,\nnot healed (non-rib)", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_FRACTURE_NONHEALED ),
				m_ButtonScoliosis( "Scoliosis", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_SCOLIOSIS ),
				m_ButtonVertebralColumn( "Vertebral Column\nAbnormality", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_VERTEBRAL_COLUMN ),

				m_StaticLungParenchymalAbn( "Lung Parenchymal\nAbnormalities", 180, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_LUNG_PARENCHYMAL_ABN ),
				m_ButtonAzygosLobe( "Azygos Lobe", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_AZYGOS_LOBE ),
				m_ButtonLungDensity( "Density, lung", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_LUNG_DENSITY ),
				m_ButtonInfiltrate( "Infiltrate", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_INFILTRATE ),
				m_ButtonNodularLesion( "Nodule,\nNodular Lesion", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_NODULAR_LESION ),

				m_StaticMiscAbnormalities( "Miscellaneous\nAbnormalities", 180, 40, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_MULTILINE | CONTROL_INVISIBLE,
									IDC_STATIC_MISC_ABNORMALITIES ),
				m_ButtonForeignBody( "Foreign Body", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_FOREIGN_BODY ),
				m_ButtonPostSurgical( "Post-surgical changes/\nsternal wire", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_MULTILINE |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_POSTSURGICAL ),
				m_ButtonCyst( "Cyst", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_CYST ),

				m_StaticVascularDisorders( "Vascular Disorders", 180, 25, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_INVISIBLE,
									IDC_STATIC_VASCULAR_DISORDERS ),
				m_ButtonAortaAnomaly( "Aorta, Anomaly of", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_AORTA_ANOMALY ),
				m_ButtonVascularAbnormality( "Vascular Abnormality", 180, 30, 12, 6, 6,
									COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED, COLOR_COMPLETED, COLOR_TOUCHED,
									BUTTON_CHECKBOX | CONTROL_TEXT_HORIZONTALLY_CENTERED |
									CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_VISIBLE, IDC_BUTTON_VASCULAR_ABNORMALITY ),

				m_StaticOtherComments( "Other Comments:", 140, 20, 14, 7, 6,
									COLOR_ANALYSIS_FONT, COLOR_ANALYSIS_BKGD, COLOR_ANALYSIS_BKGD,
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED | CONTROL_CLIP | CONTROL_VISIBLE,
									IDC_STATIC_OTHER_COMMENTS ),
				m_EditOtherComments( "", 680, 100, 16, 8, 5, VARIABLE_PITCH_FONT, COLOR_ANALYSIS_FONT, COLOR_UNTOUCHED_LIGHT, COLOR_COMPLETED_LIGHT, COLOR_TOUCHED,
									CONTROL_TEXT_LEFT_JUSTIFIED | CONTROL_TEXT_TOP_JUSTIFIED | CONTROL_MULTILINE | EDIT_VSCROLL | CONTROL_CLIP | EDIT_BORDER | CONTROL_VISIBLE,
									EDIT_VALIDATION_NONE, IDC_EDIT_OTHER_COMMENTS ),

				m_GroupButtonDisorders( BUTTON_CHECKBOX, GROUP_MULTIPLE_SELECT | GROUP_ONE_TOUCHES_ALL, 18,
									&m_ButtonEventration, &m_ButtonHiatalHernia, &m_ButtonBronchovascularMarkings,
									&m_ButtonHyperinflation, &m_ButtonBonyChestCage, &m_ButtonFractureHealed,
									&m_ButtonFractureNonHealed, &m_ButtonScoliosis, &m_ButtonVertebralColumn,
									&m_ButtonAzygosLobe, &m_ButtonLungDensity, &m_ButtonInfiltrate, &m_ButtonNodularLesion,
									&m_ButtonForeignBody, &m_ButtonPostSurgical, &m_ButtonCyst, &m_ButtonAortaAnomaly,
									&m_ButtonVascularAbnormality ),

				m_GroupStaticAbnormalities( GROUP_STATIC, 0, 9,
									&m_StaticMarkAllThatApply, &m_StaticUseIsOptional, &m_StaticDiaphragmAbnormalities,
									&m_StaticAirwayDisorders, &m_StaticBonyAbnormalities, &m_StaticLungParenchymalAbn,
									&m_StaticMiscAbnormalities, &m_StaticVascularDisorders, &m_StaticOtherComments ),

		m_CancelAndResetButton( "Cancel\nand Reset", 120, 40, 16, 8, 6,
									COLOR_WHITE, COLOR_CANCEL, COLOR_CANCEL, COLOR_CANCEL,
									BUTTON_PUSHBUTTON | CONTROL_MULTILINE | CONTROL_VISIBLE |
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED,
									IDC_BUTTON_CANCEL_AND_RESET ),
		m_ProduceReportButton( "Produce\nReport", 120, 40, 16, 8, 6,
									COLOR_BLACK, COLOR_REPORT, COLOR_REPORT, COLOR_REPORT,
									BUTTON_PUSHBUTTON | CONTROL_MULTILINE | CONTROL_VISIBLE |
									CONTROL_TEXT_HORIZONTALLY_CENTERED | CONTROL_TEXT_VERTICALLY_CENTERED,
									IDC_BUTTON_PRODUCE_REPORT )
{
	m_bPageIsInitialized = FALSE;
	m_nScrollPos = 0;
	m_BkgdBrush.CreateSolidBrush( COLOR_ANALYSIS_BKGD );
	m_bImageQualityPageIsCompleted = FALSE;
	m_bParenchymalAbnormalityPageIsCompleted = FALSE;
	m_bPleuralAbnormalityPageIsCompleted = FALSE;
	m_bOtherAbnormalityPageIsCompleted = FALSE;
	// Originally, it was desired to disable the quality control features for test mode.
	// This was done by responding to the bMakeDumbButtons setting.  Dumb buttons don't
	// support QC.  However, after much discussion it was later decided to re-enable QC,
	// so that all three modes behave the same as far as interpretation is concerned.
	// The bMakeDumbButtons is still used to disable features in other tabs.  To disable
	// QC on this tab, just set bTurnOffQualityControl = bMakeDumbButtons.
	bTurnOffQualityControl = FALSE;
}


CAnalysisPage::~CAnalysisPage()
{
}


BEGIN_MESSAGE_MAP( CAnalysisPage, CPropertyPage )
	//{{AFX_MSG_MAP(CAnalysisPage)
	ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_QUALITY, OnBnClickedImageQualityButton )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_GRADE_1, OnBnClickedImageGrade1Button )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_GRADE_2, OnBnClickedImageGrade2Button )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_GRADE_3, OnBnClickedImageGrade3Button )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_GRADE_UR, OnBnClickedImageGradeURButton )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_OVEREXPOSED, OnBnClickedImageOverexposed )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_UNDEREXPOSED, OnBnClickedImageUnderexposed )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_ARTIFACTS, OnBnClickedImageArtifacts )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_IMPROPER_POSITION, OnBnClickedImageImproperPosition )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_POOR_CONTRAST, OnBnClickedImagePoorContrast )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_POOR_PROCESSING, OnBnClickedImagePoorProcessing )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_UNDERINFLATION, OnBnClickedImageUnderinflation )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_MOTTLE, OnBnClickedImageMottle )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_EXCESSIVE_EDGE, OnBnClickedImageExcessiveEdgeEnhancement )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_IMAGE_OTHER, OnBnClickedImageOther )

	ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_APPROVE_STUDY, OnBnClickedApproveStudyButton )

	ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PARENCHYMAL_ABNORMALITY, OnBnClickedParenchymalAbnormalityButton )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PARENCHYMAL_YES, OnBnClickedParenchymalYes )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PARENCHYMAL_NO, OnBnClickedParenchymalNo )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PRIMARY_P, OnBnClickedButtonPrimary_P )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PRIMARY_S, OnBnClickedButtonPrimary_S )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PRIMARY_Q, OnBnClickedButtonPrimary_Q )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PRIMARY_T, OnBnClickedButtonPrimary_T )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PRIMARY_R, OnBnClickedButtonPrimary_R )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PRIMARY_U, OnBnClickedButtonPrimary_U )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SECONDARY_P, OnBnClickedButtonSecondary_P )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SECONDARY_S, OnBnClickedButtonSecondary_S )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SECONDARY_Q, OnBnClickedButtonSecondary_Q )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SECONDARY_T, OnBnClickedButtonSecondary_T )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SECONDARY_R, OnBnClickedButtonSecondary_R )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SECONDARY_U, OnBnClickedButtonSecondary_U )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_ZONE_UPPER_RIGHT, OnBnClickedButtonSmallOpacityZoneUpperRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_ZONE_UPPER_LEFT, OnBnClickedButtonSmallOpacityZoneUpperLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_ZONE_MIDDLE_RIGHT, OnBnClickedButtonSmallOpacityZoneMiddleRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_ZONE_MIDDLE_LEFT, OnBnClickedButtonSmallOpacityZoneMiddleLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_ZONE_LOWER_RIGHT, OnBnClickedButtonSmallOpacityZoneLowerRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_ZONE_LOWER_LEFT, OnBnClickedButtonSmallOpacityZoneLowerLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CLICK_ALL_ZONES, OnBnClickedButtonSmallOpacityClickAllZones )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PROFUSION_0MINUS, OnBnClickedButtonSmallOpacityProfusion_0Minus )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PROFUSION_00, OnBnClickedButtonSmallOpacityProfusion_00 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PROFUSION_01, OnBnClickedButtonSmallOpacityProfusion_01 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PROFUSION_10, OnBnClickedButtonSmallOpacityProfusion_10 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PROFUSION_11, OnBnClickedButtonSmallOpacityProfusion_11 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PROFUSION_12, OnBnClickedButtonSmallOpacityProfusion_12 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PROFUSION_21, OnBnClickedButtonSmallOpacityProfusion_21 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PROFUSION_22, OnBnClickedButtonSmallOpacityProfusion_22 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PROFUSION_23, OnBnClickedButtonSmallOpacityProfusion_23 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PROFUSION_32, OnBnClickedButtonSmallOpacityProfusion_32 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PROFUSION_33, OnBnClickedButtonSmallOpacityProfusion_33 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PROFUSION_3PLUS, OnBnClickedButtonSmallOpacityProfusion_3Plus )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_LARGE_OPACITY_0, OnBnClickedButtonLargeOpacitySize_0 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_LARGE_OPACITY_A, OnBnClickedButtonLargeOpacitySize_A )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_LARGE_OPACITY_B, OnBnClickedButtonLargeOpacitySize_B )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_LARGE_OPACITY_C, OnBnClickedButtonLargeOpacitySize_C )

	ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_ABNORMALITY, OnBnClickedPleuralAbnormalityButton )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_YES, OnBnClickedPleuralYes )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_NO, OnBnClickedPleuralNo )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_SITE_PROFILE_0, OnBnClickedPleuralSiteChestProfileNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_SITE_PROFILE_R, OnBnClickedPleuralSiteChestProfileRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_SITE_PROFILE_L, OnBnClickedPleuralSiteChestProfileLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_SITE_FACE_ON_0, OnBnClickedPleuralSiteChestFaceOnNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_SITE__FACE_ON_R, OnBnClickedPleuralSiteChestFaceOnRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_SITE__FACE_ON_L, OnBnClickedPleuralSiteChestFaceOnLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_SITE_DIAPHRAGM_0, OnBnClickedPleuralSiteDiaphragmNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_SITE_DIAPHRAGM_R, OnBnClickedPleuralSiteDiaphragmRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_SITE_DIAPHRAGM_L, OnBnClickedPleuralSiteDiaphragmLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_SITE_OTHER_0, OnBnClickedPleuralSiteOtherNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_SITE_OTHER_R, OnBnClickedPleuralSiteOtherRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_SITE_OTHER_L, OnBnClickedPleuralSiteOtherLeft )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CALCIFICATION_PROFILE_0, OnBnClickedCalcificationChestProfileNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CALCIFICATION_PROFILE_R, OnBnClickedCalcificationChestProfileRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CALCIFICATION_PROFILE_L, OnBnClickedCalcificationChestProfileLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CALCIFICATION_FACE_ON_0, OnBnClickedCalcificationChestFaceOnNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CALCIFICATION__FACE_ON_R, OnBnClickedCalcificationChestFaceOnRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CALCIFICATION__FACE_ON_L, OnBnClickedCalcificationChestFaceOnLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CALCIFICATION_DIAPHRAGM_0, OnBnClickedCalcificationDiaphragmNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CALCIFICATION_DIAPHRAGM_R, OnBnClickedCalcificationDiaphragmRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CALCIFICATION_DIAPHRAGM_L, OnBnClickedCalcificationDiaphragmLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CALCIFICATION_OTHER_0, OnBnClickedCalcificationOtherNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CALCIFICATION_OTHER_R, OnBnClickedCalcificationOtherRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CALCIFICATION_OTHER_L, OnBnClickedCalcificationOtherLeft )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_EXTENT_NO_RIGHT, OnBnClickedPleuralExtentNoneOnRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_EXTENT_RIGHT, OnBnClickedPleuralExtentRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_EXTENT_RSIZE1, OnBnClickedPleuralExtentRightSize1 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_EXTENT_RSIZE2, OnBnClickedPleuralExtentRightSize2 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_EXTENT_RSIZE3, OnBnClickedPleuralExtentRightSize3 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_EXTENT_NO_LEFT, OnBnClickedPleuralExtentNoneOnLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_EXTENT_LEFT, OnBnClickedPleuralExtentLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_EXTENT_LSIZE1, OnBnClickedPleuralExtentLeftSize1 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_EXTENT_LSIZE2, OnBnClickedPleuralExtentLeftSize2 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_EXTENT_LSIZE3, OnBnClickedPleuralExtentLeftSize3 )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_WIDTH_NO_RIGHT, OnBnClickedPleuralWidthNoneOnRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_WIDTH_RIGHT, OnBnClickedPleuralWidthRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_WIDTH_RSIZE1, OnBnClickedPleuralWidthRightSize1 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_WIDTH_RSIZE2, OnBnClickedPleuralWidthRightSize2 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_WIDTH_RSIZE3, OnBnClickedPleuralWidthRightSize3 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_WIDTH_NO_LEFT, OnBnClickedPleuralWidthNoneOnLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_WIDTH_LEFT, OnBnClickedPleuralWidthLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_WIDTH_LSIZE1, OnBnClickedPleuralWidthLeftSize1 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_WIDTH_LSIZE2, OnBnClickedPleuralWidthLeftSize2 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_WIDTH_LSIZE3, OnBnClickedPleuralWidthLeftSize3 )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_ANGLE_OBLIT_0, OnBnClickedAngleObliterationNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_ANGLE_OBLIT_R, OnBnClickedAngleObliterationRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_ANGLE_OBLIT_L, OnBnClickedAngleObliterationLeft )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_SITE_PROFILE_0, OnBnClickedThickeningSiteChestProfileNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_SITE_PROFILE_R, OnBnClickedThickeningSiteChestProfileRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_SITE_PROFILE_L, OnBnClickedThickeningSiteChestProfileLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_SITE_FACE_ON_0, OnBnClickedThickeningSiteChestFaceOnNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_SITE_FACE_ON_R, OnBnClickedThickeningSiteChestFaceOnRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_SITE_FACE_ON_L, OnBnClickedThickeningSiteChestFaceOnLeft )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_THICK_CALCIFICATION_PROFILE_0, OnBnClickedThickeningCalcificationChestProfileNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_THICK_CALCIFICATION_PROFILE_R, OnBnClickedThickeningCalcificationChestProfileRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_THICK_CALCIFICATION_PROFILE_L, OnBnClickedThickeningCalcificationChestProfileLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_THICK_CALCIFICATION_FACE_ON_0, OnBnClickedThickeningCalcificationChestFaceOnNone )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_THICK_CALCIFICATION_FACE_ON_R, OnBnClickedThickeningCalcificationChestFaceOnRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_THICK_CALCIFICATION_FACE_ON_L, OnBnClickedThickeningCalcificationChestFaceOnLeft )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_EXTENT_NO_RIGHT, OnBnClickedPleuralThickeningExtentNoneOnRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_EXTENT_RIGHT, OnBnClickedPleuralThickeningExtentRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_EXTENT_RSIZE1, OnBnClickedPleuralThickeningExtentRightSize1 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_EXTENT_RSIZE2, OnBnClickedPleuralThickeningExtentRightSize2 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_EXTENT_RSIZE3, OnBnClickedPleuralThickeningExtentRightSize3 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_EXTENT_NO_LEFT, OnBnClickedPleuralThickeningExtentNoneOnLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_EXTENT_LEFT, OnBnClickedPleuralThickeningExtentLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_EXTENT_LSIZE1, OnBnClickedPleuralThickeningExtentLeftSize1 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_EXTENT_LSIZE2, OnBnClickedPleuralThickeningExtentLeftSize2 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_EXTENT_LSIZE3, OnBnClickedPleuralThickeningExtentLeftSize3 )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_WIDTH_NO_RIGHT, OnBnClickedPleuralThickeningWidthNoneOnRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_WIDTH_RIGHT, OnBnClickedPleuralThickeningWidthRight )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_WIDTH_RSIZE1, OnBnClickedPleuralThickeningWidthRightSize1 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_WIDTH_RSIZE2, OnBnClickedPleuralThickeningWidthRightSize2 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_WIDTH_RSIZE3, OnBnClickedPleuralThickeningWidthRightSize3 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_WIDTH_NO_LEFT, OnBnClickedPleuralThickeningWidthNoneOnLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_WIDTH_LEFT, OnBnClickedPleuralThickeningWidthLeft )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_WIDTH_LSIZE1, OnBnClickedPleuralThickeningWidthLeftSize1 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_WIDTH_LSIZE2, OnBnClickedPleuralThickeningWidthLeftSize2 )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PLEURAL_THICK_WIDTH_LSIZE3, OnBnClickedPleuralThickeningWidthLeftSize3 )

	ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_OTHER_ABNORMALITY, OnBnClickedOtherAbnormalityButton )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_OTHER_YES, OnBnClickedOtherYes )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_OTHER_NO, OnBnClickedOtherNo )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_AA, OnBnClickedSymbol_aa )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_AT, OnBnClickedSymbol_at )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_AX, OnBnClickedSymbol_ax )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_BU, OnBnClickedSymbol_bu )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_CA, OnBnClickedSymbol_ca )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_CG, OnBnClickedSymbol_cg )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_CN, OnBnClickedSymbol_cn )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_CO, OnBnClickedSymbol_co )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_CP, OnBnClickedSymbol_cp )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_CV, OnBnClickedSymbol_cv )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_DI, OnBnClickedSymbol_di )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_EF, OnBnClickedSymbol_ef )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_EM, OnBnClickedSymbol_em )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_ES, OnBnClickedSymbol_es )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_FR, OnBnClickedSymbol_fr )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_HI, OnBnClickedSymbol_hi )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_HO, OnBnClickedSymbol_ho )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_ID, OnBnClickedSymbol_id )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_IH, OnBnClickedSymbol_ih )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_KL, OnBnClickedSymbol_kl )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_ME, OnBnClickedSymbol_me )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_PA, OnBnClickedSymbol_pa )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_PB, OnBnClickedSymbol_pb )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_PI, OnBnClickedSymbol_pi )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_PX, OnBnClickedSymbol_px )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_RA, OnBnClickedSymbol_ra )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_RP, OnBnClickedSymbol_rp )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_TB, OnBnClickedSymbol_tb )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SYMBOL_OD, OnBnClickedSymbol_od )

		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_EVENTRATION, OnBnClickedEventration )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_HIATAL_HERNIA, OnBnClickedHiatalHernia )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_BRONCHOVASCULAR_MARKINGS, OnBnClickedBronchovascularMarkings )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_HYPERINFLATION, OnBnClickedHyperinflation )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_BONY_CHEST_CAGE, OnBnClickedBonyChestCage )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_FRACTURE_HEALED, OnBnClickedFractureHealed )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_FRACTURE_NONHEALED, OnBnClickedFractureNonHealed )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_SCOLIOSIS, OnBnClickedScoliosis )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_VERTEBRAL_COLUMN, OnBnClickedVertebralColumn )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_AZYGOS_LOBE, OnBnClickedAzygosLobe )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_LUNG_DENSITY, OnBnClickedLungDensity )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_INFILTRATE, OnBnClickedInfiltrate )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_NODULAR_LESION, OnBnClickedNodularLesion )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_FOREIGN_BODY, OnBnClickedForeignBody )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_POSTSURGICAL, OnBnClickedPostSurgical )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CYST, OnBnClickedCyst )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_AORTA_ANOMALY, OnBnClickedAortaAnomaly )
		ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_VASCULAR_ABNORMALITY, OnBnClickedVascularAbnormality )

		ON_NOTIFY( WM_SETFOCUS, IDC_EDIT_OTHER_COMMENTS, OnEditOtherCommentsFocus )

	ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_CANCEL_AND_RESET, OnBnClickedCancelAndResetButton )
	ON_NOTIFY( WM_LBUTTONUP,  IDC_BUTTON_PRODUCE_REPORT, OnBnClickedProduceReportButton )

	ON_WM_PAINT()
	ON_WM_CTLCOLOR()
	ON_WM_SIZE()
	ON_WM_VSCROLL()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()


void CAnalysisPage::RedisplayPage()
{
	CStudy			*pCurrentStudy;

	pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
	if ( pCurrentStudy != 0 )
		{
		m_ImageQualityButton.HasBeenPressed( pCurrentStudy -> m_bImageQualityVisited );
		m_ParenchymalAbnormalityButton.HasBeenPressed( pCurrentStudy -> m_bParenchymalAbnormalitiesVisited );
		m_PleuralAbnormalityButton.HasBeenPressed( pCurrentStudy -> m_bPleuralAbnormalitiesVisited );
		m_OtherAbnormalityButton.HasBeenPressed( pCurrentStudy -> m_bOtherAbnormalitiesVisited );
		}
}


void CAnalysisPage::OnSize( UINT nType, int cx, int cy )
{
	SCROLLINFO		si;
	BOOL			bHideScrollbar = FALSE;

	CPropertyPage::OnSize( nType, cx, cy );

	m_nCurHeight = cy;

	si.cbSize = sizeof(SCROLLINFO);
	si.fMask = SIF_ALL; // SIF_ALL = SIF_PAGE | SIF_RANGE | SIF_POS;
	si.nMin = 0;
	si.nMax = m_rect.Height();
	if ( cy > m_rect.Height() )
		bHideScrollbar = TRUE;
	si.nPage = cy;
	si.nPos = 0;
	SetScrollInfo( SB_VERT, &si, TRUE );
	// If the window has been resized so that it is fully in view, scroll it back to the top.
	if ( bHideScrollbar && m_nScrollPos != 0 )
		{
		SetScrollPos( SB_VERT, m_nScrollPos, TRUE );
		ScrollWindow( 0, m_nScrollPos );
		m_nScrollPos = 0;
		}

}


void CAnalysisPage::OnVScroll( UINT nSBCode, UINT nPos, CScrollBar *pScrollBar )
{
	int				nDelta;
	int				nMaxPos = m_rect.Height() - m_nCurHeight;

	switch ( nSBCode )
		{
		case SB_LINEDOWN:
			if ( m_nScrollPos >= nMaxPos )
				return;
			nDelta = min( nMaxPos / 100, nMaxPos - m_nScrollPos );
			break;
		case SB_LINEUP:
			if ( m_nScrollPos <= 0 )
				return;
			nDelta = -min( nMaxPos / 100, m_nScrollPos );
			break;
		case SB_PAGEDOWN:
			if ( m_nScrollPos >= nMaxPos )
				return;
			nDelta = min( nMaxPos / 10, nMaxPos - m_nScrollPos );
			break;
		case SB_THUMBPOSITION:
			nDelta = (int)nPos - m_nScrollPos;
			break;
		case SB_PAGEUP:
			if ( m_nScrollPos <= 0 )
				return;
			nDelta = -min( nMaxPos / 10, m_nScrollPos );
			break;
		default:
			return;
		}
	m_nScrollPos += nDelta;
	SetScrollPos( SB_VERT, m_nScrollPos, TRUE );
	ScrollWindow( 0,-nDelta );

	CPropertyPage::OnVScroll( nSBCode, nPos, pScrollBar );
}


BOOL CAnalysisPage::OnInitDialog()
{
	CPropertyPage::OnInitDialog();

	GetWindowRect( m_rect );
	m_nScrollPos = 0;

	m_StaticSubject.SetPosition( 40, 10, this );
	m_StaticPatientName.SetPosition( 40, 30, this );

	m_ImageQualityButton.SetPosition( 40, 60, this );
	m_StaticImageQualityTitle.SetPosition( 250, 20, this );

		m_ImageGrade1.SetPosition( 250, 60, this );
		m_ImageGrade2.SetPosition( 290, 60, this );
		m_ImageGrade3.SetPosition( 330, 60, this );
		m_ImageGradeUR.SetPosition( 370, 60, this );
		m_ImageGradeExplanation.SetPosition( 250, 100, this );

		m_ImageOverexposed.SetPosition( 250, 150, this );
		m_ImageUnderexposed.SetPosition( 250, 200, this );
		m_ImageArtifacts.SetPosition( 250, 250, this );
		m_ImageImproperPosition.SetPosition( 250, 300, this );
		m_ImageExcessiveEdgeEnhancement.SetPosition( 250, 350, this );
		m_ImagePoorContrast.SetPosition( 450, 150, this );
		m_ImagePoorProcessing.SetPosition( 450, 200, this );
		m_ImageUnderinflation.SetPosition( 450, 250, this );
		m_ImageMottle.SetPosition( 450, 300, this );
		m_ImageOther.SetPosition( 450, 350, this );
		
		m_StaticPleaseSpecify.SetPosition( 250, 415, this );
		m_EditImageQualityOther.SetPosition( 450, 400, this );

	m_ApproveStudyButton.SetPosition( 10, 170, this );

	m_Static_OR_.SetPosition( 70, 280, this );

	m_ParenchymalAbnormalityButton.SetPosition( 40, 310, this );
	m_StaticParenchymalAbnormalitiesTitle.SetPosition( 250, 20, this );
		m_AnyParenchymalAbnormalities.SetPosition( 250, 60, this );
			m_ButtonParenchymalYes.SetPosition( 700, 60, this );
			m_ButtonParenchymalNo.SetPosition( 800, 60, this );
		
		m_SmallOpacitiesSubtitle.SetPosition( 260, 120, this );
			m_StaticShapeAndSize.SetPosition( 325, 150, this );
			m_StaticPrimary.SetPosition( 270, 175, this );
			m_ButtonPrimary_P.SetPosition( 260, 200, this );
			m_ButtonPrimary_S.SetPosition( 300, 200, this );
			m_ButtonPrimary_Q.SetPosition( 260, 240, this );
			m_ButtonPrimary_T.SetPosition( 300, 240, this );
			m_ButtonPrimary_R.SetPosition( 260, 280, this );
			m_ButtonPrimary_U.SetPosition( 300, 280, this );

			m_StaticSecondary.SetPosition( 400, 175, this );
			m_ButtonSecondary_P.SetPosition( 400, 200, this );
			m_ButtonSecondary_S.SetPosition( 440, 200, this );
			m_ButtonSecondary_Q.SetPosition( 400, 240, this );
			m_ButtonSecondary_T.SetPosition( 440, 240, this );
			m_ButtonSecondary_R.SetPosition( 400, 280, this );
			m_ButtonSecondary_U.SetPosition( 440, 280, this );

			m_StaticZones.SetPosition( 635, 175, this );
			m_ButtonSmallOpacityZoneUpperRight.SetPosition( 560, 200, this );
			m_ButtonSmallOpacityZoneUpperLeft.SetPosition( 660, 200, this );
			m_ButtonSmallOpacityZoneMiddleRight.SetPosition( 560, 240, this );
			m_ButtonSmallOpacityZoneMiddleLeft.SetPosition( 660, 240, this );
			m_ButtonSmallOpacityZoneLowerRight.SetPosition( 560, 280, this );
			m_ButtonSmallOpacityZoneLowerLeft.SetPosition( 660, 280, this );
			m_ButtonAllSmallOpacityZones.SetPosition( 600, 340, this );

			m_StaticProfusion.SetPosition( 885, 135, this );
			m_ButtonSmallOpacityProfusion_0Minus.SetPosition( 860, 160, this );
			m_ButtonSmallOpacityProfusion_00.SetPosition( 900, 160, this );
			m_ButtonSmallOpacityProfusion_01.SetPosition( 940, 160, this );
			m_ButtonSmallOpacityProfusion_10.SetPosition( 860, 200, this );
			m_ButtonSmallOpacityProfusion_11.SetPosition( 900, 200, this );
			m_ButtonSmallOpacityProfusion_12.SetPosition( 940, 200, this );
			m_ButtonSmallOpacityProfusion_21.SetPosition( 860, 240, this );
			m_ButtonSmallOpacityProfusion_22.SetPosition( 900, 240, this );
			m_ButtonSmallOpacityProfusion_23.SetPosition( 940, 240, this );
			m_ButtonSmallOpacityProfusion_32.SetPosition( 860, 280, this );
			m_ButtonSmallOpacityProfusion_33.SetPosition( 900, 280, this );
			m_ButtonSmallOpacityProfusion_3Plus.SetPosition( 940, 280, this );

		m_LargeOpacitiesSubtitle.SetPosition( 250, 370, this );
			m_StaticSize.SetPosition( 260, 430, this );
			m_ButtonLargeOpacitySize_0.SetPosition( 310, 420, this );
			m_ButtonLargeOpacitySize_A.SetPosition( 360, 420, this );
			m_ButtonLargeOpacitySize_B.SetPosition( 410, 420, this );
			m_ButtonLargeOpacitySize_C.SetPosition( 460, 420, this );

	m_PleuralAbnormalityButton.SetPosition( 40, 410, this );
	m_StaticPleuralAbnormalitiesTitle.SetPosition( 250, 20, this );
		m_AnyPleuralAbnormalities.SetPosition( 250, 60, this );
			m_ButtonPleuralYes.SetPosition( 700, 60, this );
			m_ButtonPleuralNo.SetPosition( 800, 60, this );

		m_PleuralPlaquesSubtitle.SetPosition( 250, 120, this );
			m_StaticPleuralPlaquesSite.SetPosition( 405, 150, this );
			m_StaticPleuralPlaquesChestProfile.SetPosition( 250, 180, this );
			m_StaticPleuralPlaquesChestFaceOn.SetPosition( 250, 220, this );
			m_StaticPleuralPlaquesDiaphragm.SetPosition( 250, 260, this );
			m_StaticPleuralPlaquesOther.SetPosition( 250, 300, this );
			m_ButtonPleuralSiteChestProfileNone.SetPosition( 360, 180, this );
			m_ButtonPleuralSiteChestProfileRight.SetPosition( 400, 180, this );
			m_ButtonPleuralSiteChestProfileLeft.SetPosition( 440, 180, this );
			m_ButtonPleuralSiteChestFaceOnNone.SetPosition( 360, 220, this );
			m_ButtonPleuralSiteChestFaceOnRight.SetPosition( 400, 220, this );
			m_ButtonPleuralSiteChestFaceOnLeft.SetPosition( 440, 220, this );
			m_ButtonPleuralSiteDiaphragmNone.SetPosition( 360, 260, this );
			m_ButtonPleuralSiteDiaphragmRight.SetPosition( 400, 260, this );
			m_ButtonPleuralSiteDiaphragmLeft.SetPosition( 440, 260, this );
			m_ButtonPleuralSiteOtherNone.SetPosition( 360, 300, this );
			m_ButtonPleuralSiteOtherRight.SetPosition( 400, 300, this );
			m_ButtonPleuralSiteOtherLeft.SetPosition( 440, 300, this );

			m_StaticPleuralCalcification.SetPosition( 530, 150, this );
			m_ButtonCalcificationChestProfileNone.SetPosition( 520, 180, this );
			m_ButtonCalcificationChestProfileRight.SetPosition( 560, 180, this );
			m_ButtonCalcificationChestProfileLeft.SetPosition( 600, 180, this );
			m_ButtonCalcificationChestFaceOnNone.SetPosition( 520, 220, this );
			m_ButtonCalcificationChestFaceOnRight.SetPosition( 560, 220, this );
			m_ButtonCalcificationChestFaceOnLeft.SetPosition( 600, 220, this );
			m_ButtonCalcificationDiaphragmNone.SetPosition( 520, 260, this );
			m_ButtonCalcificationDiaphragmRight.SetPosition( 560, 260, this );
			m_ButtonCalcificationDiaphragmLeft.SetPosition( 600, 260, this );
			m_ButtonCalcificationOtherNone.SetPosition( 520, 300, this );
			m_ButtonCalcificationOtherRight.SetPosition( 560, 300, this );
			m_ButtonCalcificationOtherLeft.SetPosition( 600, 300, this );

			m_StaticPleuralExtent.SetPosition( 700, 150, this );
			m_ButtonPleuralExtentNoneOnRight.SetPosition( 700, 180, this );
			m_ButtonPleuralExtentRight.SetPosition( 740, 180, this );
			m_ButtonPleuralExtentRightSize1.SetPosition( 700, 220, this );
			m_ButtonPleuralExtentRightSize2.SetPosition( 700, 260, this );
			m_ButtonPleuralExtentRightSize3.SetPosition( 700, 300, this );
			m_ButtonPleuralExtentNoneOnLeft.SetPosition( 830, 180, this );
			m_ButtonPleuralExtentLeft.SetPosition( 870, 180, this );
			m_ButtonPleuralExtentLeftSize1.SetPosition( 830, 220, this );
			m_ButtonPleuralExtentLeftSize2.SetPosition( 830, 260, this );
			m_ButtonPleuralExtentLeftSize3.SetPosition( 830, 300, this );

			m_StaticPleuralWidth.SetPosition( 1020, 150, this );
			m_ButtonPleuralWidthNoneOnRight.SetPosition( 1020, 180, this );
			m_ButtonPleuralWidthRight.SetPosition( 1060, 180, this );
			m_ButtonPleuralWidthRightSize1.SetPosition( 1020, 220, this );
			m_ButtonPleuralWidthRightSize2.SetPosition( 1020, 260, this );
			m_ButtonPleuralWidthRightSize3.SetPosition( 1020, 300, this );
			m_ButtonPleuralWidthNoneOnLeft.SetPosition( 1120, 180, this );
			m_ButtonPleuralWidthLeft.SetPosition( 1160, 180, this );
			m_ButtonPleuralWidthLeftSize1.SetPosition( 1120, 220, this );
			m_ButtonPleuralWidthLeftSize2.SetPosition( 1120, 260, this );
			m_ButtonPleuralWidthLeftSize3.SetPosition( 1120, 300, this );

		m_AngleObliterationSubtitle.SetPosition( 250, 380, this );
			m_ButtonAngleObliterationNone.SetPosition( 700, 380, this );
			m_ButtonAngleObliterationRight.SetPosition( 600, 380, this );
			m_ButtonAngleObliterationLeft.SetPosition( 640, 380, this );

		m_PleuralThickeningSubtitle.SetPosition( 250, 440, this );

			m_StaticPleuralThickeningSite.SetPosition( 405, 470, this );
			m_StaticPleuralThickeningChestProfile.SetPosition( 250, 500, this );
			m_StaticPleuralThickeningChestFaceOn.SetPosition( 250, 540, this );
			m_StaticThickeningCalcification.SetPosition( 530, 470, this );
			m_StaticPleuralThickeningExtent.SetPosition( 700, 470, this );
			m_StaticPleuralThickeningWidth.SetPosition( 1020, 470, this );

			m_ButtonThickeningSiteChestProfileNone.SetPosition( 360, 500, this );
			m_ButtonThickeningSiteChestProfileRight.SetPosition( 400, 500, this );
			m_ButtonThickeningSiteChestProfileLeft.SetPosition( 440, 500, this );
			m_ButtonThickeningSiteChestFaceOnNone.SetPosition( 360, 540, this );
			m_ButtonThickeningSiteChestFaceOnRight.SetPosition( 400, 540, this );
			m_ButtonThickeningSiteChestFaceOnLeft.SetPosition( 440, 540, this );

			m_ButtonThickeningCalcificationChestProfileNone.SetPosition( 520, 500, this );
			m_ButtonThickeningCalcificationChestProfileRight.SetPosition( 560, 500, this );
			m_ButtonThickeningCalcificationChestProfileLeft.SetPosition( 600, 500, this );
			m_ButtonThickeningCalcificationChestFaceOnNone.SetPosition( 520, 540, this );
			m_ButtonThickeningCalcificationChestFaceOnRight.SetPosition( 560, 540, this );
			m_ButtonThickeningCalcificationChestFaceOnLeft.SetPosition( 600, 540, this );

			m_ButtonPleuralThickeningExtentNoneOnRight.SetPosition( 700, 500, this );
			m_ButtonPleuralThickeningExtentRight.SetPosition( 740, 500, this );
			m_ButtonPleuralThickeningExtentRightSize1.SetPosition( 700, 540, this );
			m_ButtonPleuralThickeningExtentRightSize2.SetPosition( 700, 580, this );
			m_ButtonPleuralThickeningExtentRightSize3.SetPosition( 700, 620, this );
			m_ButtonPleuralThickeningExtentNoneOnLeft.SetPosition( 830, 500, this );
			m_ButtonPleuralThickeningExtentLeft.SetPosition( 870, 500, this );
			m_ButtonPleuralThickeningExtentLeftSize1.SetPosition( 830, 540, this );
			m_ButtonPleuralThickeningExtentLeftSize2.SetPosition( 830, 580, this );
			m_ButtonPleuralThickeningExtentLeftSize3.SetPosition( 830, 620, this );

			m_ButtonPleuralThickeningWidthNoneOnRight.SetPosition( 1020, 500, this );
			m_ButtonPleuralThickeningWidthRight.SetPosition( 1060, 500, this );
			m_ButtonPleuralThickeningWidthRightSize1.SetPosition( 1020, 540, this );
			m_ButtonPleuralThickeningWidthRightSize2.SetPosition( 1020, 580, this );
			m_ButtonPleuralThickeningWidthRightSize3.SetPosition( 1020, 620, this );
			m_ButtonPleuralThickeningWidthNoneOnLeft.SetPosition( 1120, 500, this );
			m_ButtonPleuralThickeningWidthLeft.SetPosition( 1160, 500, this );
			m_ButtonPleuralThickeningWidthLeftSize1.SetPosition( 1120, 540, this );
			m_ButtonPleuralThickeningWidthLeftSize2.SetPosition( 1120, 580, this );
			m_ButtonPleuralThickeningWidthLeftSize3.SetPosition( 1120, 620, this );

	m_OtherAbnormalityButton.SetPosition( 40, 510, this );
	m_StaticOtherAbnormalitiesTitle.SetPosition( 250, 20, this );
			m_ButtonOtherYes.SetPosition( 600, 20, this );
			m_ButtonOtherNo.SetPosition( 700, 20, this );

		m_OtherSymbolsSubtitle.SetPosition( 250, 60, this );

			m_ButtonSymbol_aa.SetPosition( 250, 100, this );
			m_ButtonSymbol_at.SetPosition( 250, 130, this );
			m_ButtonSymbol_ax.SetPosition( 250, 160, this );
			m_ButtonSymbol_bu.SetPosition( 250, 190, this );
			m_ButtonSymbol_ca.SetPosition( 250, 220, this );
			m_ButtonSymbol_cg.SetPosition( 250, 250, this );
			m_ButtonSymbol_cn.SetPosition( 250, 280, this );

			m_ButtonSymbol_co.SetPosition( 500, 100, this );
			m_ButtonSymbol_cp.SetPosition( 500, 130, this );
			m_ButtonSymbol_cv.SetPosition( 500, 160, this );
			m_ButtonSymbol_di.SetPosition( 500, 190, this );
			m_ButtonSymbol_ef.SetPosition( 500, 220, this );
			m_ButtonSymbol_em.SetPosition( 500, 250, this );
			m_ButtonSymbol_es.SetPosition( 500, 280, this );

			m_ButtonSymbol_fr.SetPosition( 750, 100, this );
			m_ButtonSymbol_hi.SetPosition( 750, 130, this );
			m_ButtonSymbol_ho.SetPosition( 750, 160, this );
			m_ButtonSymbol_id.SetPosition( 750, 190, this );
			m_ButtonSymbol_ih.SetPosition( 750, 220, this );
			m_ButtonSymbol_kl.SetPosition( 750, 250, this );
			m_ButtonSymbol_me.SetPosition( 750, 280, this );

			m_ButtonSymbol_pa.SetPosition( 1000, 100, this );
			m_ButtonSymbol_pb.SetPosition( 1000, 130, this );
			m_ButtonSymbol_pi.SetPosition( 1000, 160, this );
			m_ButtonSymbol_px.SetPosition( 1000, 190, this );
			m_ButtonSymbol_ra.SetPosition( 1000, 220, this );
			m_ButtonSymbol_rp.SetPosition( 1000, 250, this );
			m_ButtonSymbol_tb.SetPosition( 1000, 280, this );
			m_ButtonSymbol_od.SetPosition( 1000, 310, this );

			m_StaticSymbol_aa.SetPosition( 290, 100, this );
			m_StaticSymbol_at.SetPosition( 290, 130, this );
			m_StaticSymbol_ax.SetPosition( 290, 160, this );
			m_StaticSymbol_bu.SetPosition( 290, 190, this );
			m_StaticSymbol_ca.SetPosition( 290, 220, this );
			m_StaticSymbol_cg.SetPosition( 290, 250, this );
			m_StaticSymbol_cn.SetPosition( 290, 280, this );

			m_StaticSymbol_co.SetPosition( 540, 100, this );
			m_StaticSymbol_cp.SetPosition( 540, 130, this );
			m_StaticSymbol_cv.SetPosition( 540, 160, this );
			m_StaticSymbol_di.SetPosition( 540, 190, this );
			m_StaticSymbol_ef.SetPosition( 540, 220, this );
			m_StaticSymbol_em.SetPosition( 540, 250, this );
			m_StaticSymbol_es.SetPosition( 540, 280, this );

			m_StaticSymbol_fr.SetPosition( 790, 100, this );
			m_StaticSymbol_hi.SetPosition( 790, 130, this );
			m_StaticSymbol_ho.SetPosition( 790, 160, this );
			m_StaticSymbol_id.SetPosition( 790, 190, this );
			m_StaticSymbol_ih.SetPosition( 790, 220, this );
			m_StaticSymbol_kl.SetPosition( 790, 250, this );
			m_StaticSymbol_me.SetPosition( 790, 280, this );

			m_StaticSymbol_pa.SetPosition( 1040, 100, this );
			m_StaticSymbol_pb.SetPosition( 1040, 130, this );
			m_StaticSymbol_pi.SetPosition( 1040, 160, this );
			m_StaticSymbol_px.SetPosition( 1040, 190, this );
			m_StaticSymbol_ra.SetPosition( 1040, 220, this );
			m_StaticSymbol_rp.SetPosition( 1040, 250, this );
			m_StaticSymbol_tb.SetPosition( 1040, 280, this );
			m_StaticSymbol_od.SetPosition( 1040, 310, this );

			m_StaticMarkAllThatApply.SetPosition( 250, 340, this );
			m_StaticUseIsOptional.SetPosition( 500, 340, this );

			m_StaticDiaphragmAbnormalities.SetPosition( 250, 370, this );
			m_ButtonEventration.SetPosition( 250, 420, this );
			m_ButtonHiatalHernia.SetPosition( 250, 460, this );

			m_StaticAirwayDisorders.SetPosition( 250, 500, this );
			m_ButtonBronchovascularMarkings.SetPosition( 250, 530, this );
			m_ButtonHyperinflation.SetPosition( 250, 570, this );

			m_StaticBonyAbnormalities.SetPosition( 500, 370, this );
			m_ButtonBonyChestCage.SetPosition( 500, 420, this );
			m_ButtonFractureHealed.SetPosition( 500, 460, this );
			m_ButtonFractureNonHealed.SetPosition( 500, 500, this );
			m_ButtonScoliosis.SetPosition( 500, 540, this );
			m_ButtonVertebralColumn.SetPosition( 500, 580, this );

			m_StaticLungParenchymalAbn.SetPosition( 750, 370, this );
			m_ButtonAzygosLobe.SetPosition( 750, 420, this );
			m_ButtonLungDensity.SetPosition( 750, 460, this );
			m_ButtonInfiltrate.SetPosition( 750, 500, this );
			m_ButtonNodularLesion.SetPosition( 750, 540, this );

			m_StaticMiscAbnormalities.SetPosition( 1000, 370, this );
			m_ButtonForeignBody.SetPosition( 1000, 420, this );
			m_ButtonPostSurgical.SetPosition( 1000, 460, this );
			m_ButtonCyst.SetPosition( 1000, 500, this );

			m_StaticVascularDisorders.SetPosition( 1000, 540, this );
			m_ButtonAortaAnomaly.SetPosition( 1000, 570, this );
			m_ButtonVascularAbnormality.SetPosition( 1000, 610, this );

			m_StaticOtherComments.SetPosition( 250, 620, this );
			m_EditOtherComments.SetPosition( 250, 640, this );
			
	m_ProduceReportButton.SetPosition( 55, 630, this );
	m_CancelAndResetButton.SetPosition( 55, 680, this );

	m_bPageIsInitialized = TRUE;
	RedisplayPage();	

	return TRUE;
}


void CAnalysisPage::TurnToggleButtonOn( TomButton *pButton )
{
 	pButton -> m_ToggleState = BUTTON_ON;
	pButton -> SetCheckBoxColor();
	pButton -> m_pGroup -> RespondToSelection( (void*)pButton );
}


void CAnalysisPage::LoadAnalysisFromCurrentStudy()
{
	CStudy			*pCurrentStudy;

	// Initialize all controls to their "off" state.  InitializeMembers() does
	// not affect visibility.
	m_ImageGradeButtonGroup.InitializeMembers();
	m_ImageQualificationButtonGroup.InitializeMembers();
	m_EditImageQualityOther.SetWindowText( "" );
	m_ImageGradeExplanation.m_ControlText = "";

	m_ParenchymalYesNoButtonGroup.InitializeMembers();
	m_SmallOpacityPrimaryButtonGroup.InitializeMembers();
	m_SmallOpacitySecondaryButtonGroup.InitializeMembers();
	m_SmallOpacityZoneButtonGroup.InitializeMembers();
	m_SmallOpacityProfusionButtonGroup.InitializeMembers();
	m_LargeOpacitySizeButtonGroup.InitializeMembers();
	
	m_PleuralYesNoButtonGroup.InitializeMembers();
	m_GroupButtonsPleuralSiteChestProfile.InitializeMembers();
	m_GroupButtonsPleuralSiteChestFaceOn.InitializeMembers();
	m_GroupButtonsPleuralSiteDiaphragm.InitializeMembers();
	m_GroupButtonsPleuralSiteOther.InitializeMembers();
	m_GroupButtonsCalcificationChestProfile.InitializeMembers();
	m_GroupButtonsCalcificationChestFaceOn.InitializeMembers();
	m_GroupButtonsCalcificationDiaphragm.InitializeMembers();
	m_GroupButtonsCalcificationOther.InitializeMembers();
	m_GroupButtonsPleuralExtentRight.InitializeMembers();
	m_GroupButtonsPleuralExtentRightSize.InitializeMembers();
	m_GroupButtonsPleuralExtentLeft.InitializeMembers();
	m_GroupButtonsPleuralExtentLeftSize.InitializeMembers();
	m_GroupButtonsPleuralWidthRight.InitializeMembers();
	m_GroupButtonsPleuralWidthRightSize.InitializeMembers();
	m_GroupButtonsPleuralWidthLeft.InitializeMembers();
	m_GroupButtonsPleuralWidthLeftSize.InitializeMembers();

	m_GroupButtonsAngleObliteration.InitializeMembers();
	m_GroupButtonsThickeningSiteChestProfile.InitializeMembers();
	m_GroupButtonsThickeningSiteChestFaceOn.InitializeMembers();
	m_GroupButtonsThickeningCalcificationChestProfile.InitializeMembers();
	m_GroupButtonsThickeningCalcificationChestFaceOn.InitializeMembers();
	m_GroupButtonsPleuralThickeningExtentRight.InitializeMembers();
	m_GroupButtonsPleuralThickeningExtentRightSize.InitializeMembers();
	m_GroupButtonsPleuralThickeningExtentLeft.InitializeMembers();
	m_GroupButtonsPleuralThickeningExtentLeftSize.InitializeMembers();
	m_GroupButtonsPleuralThickeningWidthRight.InitializeMembers();
	m_GroupButtonsPleuralThickeningWidthRightSize.InitializeMembers();
	m_GroupButtonsPleuralThickeningWidthLeft.InitializeMembers();
	m_GroupButtonsPleuralThickeningWidthLeftSize.InitializeMembers();

	m_OtherYesNoButtonGroup.InitializeMembers();
	m_GroupButtonSymbols.InitializeMembers();
	m_GroupButtonDisorders.InitializeMembers();

	// If a study has been selected, load the control values from the study.
	pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
	if ( pCurrentStudy != 0 )
		{
		// Load the image grade button group.
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_GRADE_1 )
			{
			TurnToggleButtonOn( &m_ImageGrade1 );
			m_ImageGradeExplanation.m_ControlText = "Good";
			}
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_GRADE_2 )
			{
			TurnToggleButtonOn( &m_ImageGrade2 );
			m_ImageGradeExplanation.m_ControlText = "Acceptable, with no technical defect likely to impair classification of the radiograph for pneumoconiosis.";
			}
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_GRADE_3 )
			{
			TurnToggleButtonOn( &m_ImageGrade3 );
			m_ImageGradeExplanation.m_ControlText = "Acceptible, with some technical defect but still adequate for classification purposes.";
			}
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_GRADE_UR )
			{
			TurnToggleButtonOn( &m_ImageGradeUR );
			m_ImageGradeExplanation.m_ControlText = "Unacceptable for classification purposes.";
			}
		// Load the image defect button group.
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_DEFECT_OVEREXPOSED )
			TurnToggleButtonOn( &m_ImageOverexposed );
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_DEFECT_UNDEREXPOSED )
			TurnToggleButtonOn( &m_ImageUnderexposed );
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_DEFECT_ARTIFACTS )
			TurnToggleButtonOn( &m_ImageArtifacts );
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_DEFECT_POSITION )
			TurnToggleButtonOn( &m_ImageImproperPosition );
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_DEFECT_CONTRAST )
			TurnToggleButtonOn( &m_ImagePoorContrast );
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_DEFECT_PROCESSING )
			TurnToggleButtonOn( &m_ImagePoorProcessing );
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_DEFECT_UNDERINFLATION )
			TurnToggleButtonOn( &m_ImageUnderinflation );
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_DEFECT_MOTTLE )
			TurnToggleButtonOn( &m_ImageMottle );
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_DEFECT_EXCESSIVE_EDGE )
			TurnToggleButtonOn( &m_ImageExcessiveEdgeEnhancement );
		if ( pCurrentStudy -> m_ImageQuality & IMAGE_DEFECT_OTHER )
			TurnToggleButtonOn( &m_ImageOther );

		m_EditImageQualityOther.SetWindowText( (const char*)pCurrentStudy -> m_ImageDefectOtherText );
		UpdateImageQualityPageStatus();

		if ( pCurrentStudy -> m_AnyParenchymalAbnormalities == BOOL_YES )
			{
			TurnToggleButtonOn( &m_ButtonParenchymalYes );
			m_AnyParenchymalAbnormalities.HasBeenCompleted( TRUE );
			}
		else if ( pCurrentStudy -> m_AnyParenchymalAbnormalities == BOOL_NO )
			{
			TurnToggleButtonOn( &m_ButtonParenchymalNo );
			m_AnyParenchymalAbnormalities.HasBeenCompleted( TRUE );
			}
		else if ( pCurrentStudy -> m_AnyParenchymalAbnormalities == BOOL_NOT_SPECIFIED )
			{
			m_ButtonParenchymalYes.m_ToggleState = BUTTON_OFF;
			m_ButtonParenchymalNo.m_ToggleState = BUTTON_OFF;
			m_AnyParenchymalAbnormalities.HasBeenCompleted( FALSE );
			}

		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & SHAPE_SIZE_PRIMARY_MASK ) == SHAPE_SIZE_PRIMARY_P )
			TurnToggleButtonOn( &m_ButtonPrimary_P );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & SHAPE_SIZE_PRIMARY_MASK ) == SHAPE_SIZE_PRIMARY_Q )
			TurnToggleButtonOn( &m_ButtonPrimary_Q );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & SHAPE_SIZE_PRIMARY_MASK ) == SHAPE_SIZE_PRIMARY_R )
			TurnToggleButtonOn( &m_ButtonPrimary_R );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & SHAPE_SIZE_PRIMARY_MASK ) == SHAPE_SIZE_PRIMARY_S )
			TurnToggleButtonOn( &m_ButtonPrimary_S );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & SHAPE_SIZE_PRIMARY_MASK ) == SHAPE_SIZE_PRIMARY_T )
			TurnToggleButtonOn( &m_ButtonPrimary_T );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & SHAPE_SIZE_PRIMARY_MASK ) == SHAPE_SIZE_PRIMARY_U )
			TurnToggleButtonOn( &m_ButtonPrimary_U );

		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & SHAPE_SIZE_SECONDARY_MASK ) == SHAPE_SIZE_SECONDARY_P )
			TurnToggleButtonOn( &m_ButtonSecondary_P );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & SHAPE_SIZE_SECONDARY_MASK ) == SHAPE_SIZE_SECONDARY_Q )
			TurnToggleButtonOn( &m_ButtonSecondary_Q );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & SHAPE_SIZE_SECONDARY_MASK ) == SHAPE_SIZE_SECONDARY_R )
			TurnToggleButtonOn( &m_ButtonSecondary_R );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & SHAPE_SIZE_SECONDARY_MASK ) == SHAPE_SIZE_SECONDARY_S )
			TurnToggleButtonOn( &m_ButtonSecondary_S );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & SHAPE_SIZE_SECONDARY_MASK ) == SHAPE_SIZE_SECONDARY_T )
			TurnToggleButtonOn( &m_ButtonSecondary_T );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & SHAPE_SIZE_SECONDARY_MASK ) == SHAPE_SIZE_SECONDARY_U )
			TurnToggleButtonOn( &m_ButtonSecondary_U );

		if ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & OPACITY_ZONE_UPPER_RIGHT )
			TurnToggleButtonOn( &m_ButtonSmallOpacityZoneUpperRight );
		if ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & OPACITY_ZONE_UPPER_LEFT )
			TurnToggleButtonOn( &m_ButtonSmallOpacityZoneUpperLeft );
		if ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & OPACITY_ZONE_MIDDLE_RIGHT )
			TurnToggleButtonOn( &m_ButtonSmallOpacityZoneMiddleRight );
		if ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & OPACITY_ZONE_MIDDLE_LEFT )
			TurnToggleButtonOn( &m_ButtonSmallOpacityZoneMiddleLeft );
		if ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & OPACITY_ZONE_LOWER_RIGHT )
			TurnToggleButtonOn( &m_ButtonSmallOpacityZoneLowerRight );
		if ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & OPACITY_ZONE_LOWER_LEFT )
			TurnToggleButtonOn( &m_ButtonSmallOpacityZoneLowerLeft );
		m_ButtonAllSmallOpacityZones.m_SemanticState = BUTTON_UNTOUCHED;
 		m_ButtonAllSmallOpacityZones.m_ToggleState = BUTTON_OFF;
		m_ButtonAllSmallOpacityZones.SetCheckBoxColor();


		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & PROFUSION_MASK ) == PROFUSION_0MINUS )
			TurnToggleButtonOn( &m_ButtonSmallOpacityProfusion_0Minus );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & PROFUSION_MASK ) == PROFUSION_00 )
			TurnToggleButtonOn( &m_ButtonSmallOpacityProfusion_00 );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & PROFUSION_MASK ) == PROFUSION_01 )
			TurnToggleButtonOn( &m_ButtonSmallOpacityProfusion_01 );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & PROFUSION_MASK ) == PROFUSION_10 )
			TurnToggleButtonOn( &m_ButtonSmallOpacityProfusion_10 );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & PROFUSION_MASK ) == PROFUSION_11 )
			TurnToggleButtonOn( &m_ButtonSmallOpacityProfusion_11 );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & PROFUSION_MASK ) == PROFUSION_12 )
			TurnToggleButtonOn( &m_ButtonSmallOpacityProfusion_12 );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & PROFUSION_MASK ) == PROFUSION_21 )
			TurnToggleButtonOn( &m_ButtonSmallOpacityProfusion_21 );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & PROFUSION_MASK ) == PROFUSION_22 )
			TurnToggleButtonOn( &m_ButtonSmallOpacityProfusion_22 );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & PROFUSION_MASK ) == PROFUSION_23 )
			TurnToggleButtonOn( &m_ButtonSmallOpacityProfusion_23 );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & PROFUSION_MASK ) == PROFUSION_32 )
			TurnToggleButtonOn( &m_ButtonSmallOpacityProfusion_32 );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & PROFUSION_MASK ) == PROFUSION_33 )
			TurnToggleButtonOn( &m_ButtonSmallOpacityProfusion_33 );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & PROFUSION_MASK ) == PROFUSION_3PLUS )
			TurnToggleButtonOn( &m_ButtonSmallOpacityProfusion_3Plus );

		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & LARGE_OPACITY_SIZE_MASK ) == LARGE_OPACITY_SIZE_0 )
			TurnToggleButtonOn( &m_ButtonLargeOpacitySize_0 );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & LARGE_OPACITY_SIZE_MASK ) == LARGE_OPACITY_SIZE_A )
			TurnToggleButtonOn( &m_ButtonLargeOpacitySize_A );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & LARGE_OPACITY_SIZE_MASK ) == LARGE_OPACITY_SIZE_B )
			TurnToggleButtonOn( &m_ButtonLargeOpacitySize_B );
		if ( ( pCurrentStudy -> m_ObservedParenchymalAbnormalities & LARGE_OPACITY_SIZE_MASK ) == LARGE_OPACITY_SIZE_C )
			TurnToggleButtonOn( &m_ButtonLargeOpacitySize_C );
		
		UpdateParenchymalAbnormalityPageStatus();

		if ( pCurrentStudy -> m_AnyPleuralAbnormalities == BOOL_YES )
			{
			TurnToggleButtonOn( &m_ButtonPleuralYes );
			m_AnyPleuralAbnormalities.HasBeenCompleted( TRUE );
			}
		else if ( pCurrentStudy -> m_AnyPleuralAbnormalities == BOOL_NO )
			{
			TurnToggleButtonOn( &m_ButtonPleuralNo );
			m_AnyPleuralAbnormalities.HasBeenCompleted( TRUE );
			}
		else if ( pCurrentStudy -> m_AnyPleuralAbnormalities == BOOL_NOT_SPECIFIED )
			{
			m_ButtonPleuralYes.m_ToggleState = BUTTON_OFF;
			m_ButtonPleuralNo.m_ToggleState = BUTTON_OFF;
			m_AnyPleuralAbnormalities.HasBeenCompleted( FALSE );
			}
		if ( pCurrentStudy -> m_ObservedPleuralPlaqueSites & PLAQUES_CHEST_WALL_PROFILE_NONE )
			TurnToggleButtonOn( &m_ButtonPleuralSiteChestProfileNone );
		if ( pCurrentStudy -> m_ObservedPleuralPlaqueSites & PLAQUES_CHEST_WALL_PROFILE_RIGHT )
			TurnToggleButtonOn( &m_ButtonPleuralSiteChestProfileRight );
		if ( pCurrentStudy -> m_ObservedPleuralPlaqueSites & PLAQUES_CHEST_WALL_PROFILE_LEFT )
			TurnToggleButtonOn( &m_ButtonPleuralSiteChestProfileLeft );
		if ( pCurrentStudy -> m_ObservedPleuralPlaqueSites & PLAQUES_CHEST_WALL_FACE_ON_NONE )
			TurnToggleButtonOn( &m_ButtonPleuralSiteChestFaceOnNone );
		if ( pCurrentStudy -> m_ObservedPleuralPlaqueSites & PLAQUES_CHEST_WALL_FACE_ON_RIGHT )
			TurnToggleButtonOn( &m_ButtonPleuralSiteChestFaceOnRight );
		if ( pCurrentStudy -> m_ObservedPleuralPlaqueSites & PLAQUES_CHEST_WALL_FACE_ON_LEFT )
			TurnToggleButtonOn( &m_ButtonPleuralSiteChestFaceOnLeft );
		if ( pCurrentStudy -> m_ObservedPleuralPlaqueSites & PLAQUES_DIAPHRAGM_NONE )
			TurnToggleButtonOn( &m_ButtonPleuralSiteDiaphragmNone );
		if ( pCurrentStudy -> m_ObservedPleuralPlaqueSites & PLAQUES_DIAPHRAGM_RIGHT )
			TurnToggleButtonOn( &m_ButtonPleuralSiteDiaphragmRight );
		if ( pCurrentStudy -> m_ObservedPleuralPlaqueSites & PLAQUES_DIAPHRAGM_LEFT )
			TurnToggleButtonOn( &m_ButtonPleuralSiteDiaphragmLeft );
		if ( pCurrentStudy -> m_ObservedPleuralPlaqueSites & PLAQUES_OTHER_SITES_NONE )
			TurnToggleButtonOn( &m_ButtonPleuralSiteOtherNone );
		if ( pCurrentStudy -> m_ObservedPleuralPlaqueSites & PLAQUES_OTHER_SITES_RIGHT )
			TurnToggleButtonOn( &m_ButtonPleuralSiteOtherRight );
		if ( pCurrentStudy -> m_ObservedPleuralPlaqueSites & PLAQUES_OTHER_SITES_LEFT )
			TurnToggleButtonOn( &m_ButtonPleuralSiteOtherLeft );

		if ( pCurrentStudy -> m_ObservedPleuralCalcificationSites & CALCIFICATION_CHEST_WALL_PROFILE_NONE )
			TurnToggleButtonOn( &m_ButtonCalcificationChestProfileNone );
		if ( pCurrentStudy -> m_ObservedPleuralCalcificationSites & CALCIFICATION_CHEST_WALL_PROFILE_RIGHT )
			TurnToggleButtonOn( &m_ButtonCalcificationChestProfileRight );
		if ( pCurrentStudy -> m_ObservedPleuralCalcificationSites & CALCIFICATION_CHEST_WALL_PROFILE_LEFT )
			TurnToggleButtonOn( &m_ButtonCalcificationChestProfileLeft );
		if ( pCurrentStudy -> m_ObservedPleuralCalcificationSites & CALCIFICATION_CHEST_WALL_FACE_ON_NONE )
			TurnToggleButtonOn( &m_ButtonCalcificationChestFaceOnNone );
		if ( pCurrentStudy -> m_ObservedPleuralCalcificationSites & CALCIFICATION_CHEST_WALL_FACE_ON_RIGHT )
			TurnToggleButtonOn( &m_ButtonCalcificationChestFaceOnRight );
		if ( pCurrentStudy -> m_ObservedPleuralCalcificationSites & CALCIFICATION_CHEST_WALL_FACE_ON_LEFT )
			TurnToggleButtonOn( &m_ButtonCalcificationChestFaceOnLeft );
		if ( pCurrentStudy -> m_ObservedPleuralCalcificationSites & CALCIFICATION_DIAPHRAGM_NONE )
			TurnToggleButtonOn( &m_ButtonCalcificationDiaphragmNone );
		if ( pCurrentStudy -> m_ObservedPleuralCalcificationSites & CALCIFICATION_DIAPHRAGM_RIGHT )
			TurnToggleButtonOn( &m_ButtonCalcificationDiaphragmRight );
		if ( pCurrentStudy -> m_ObservedPleuralCalcificationSites & CALCIFICATION_DIAPHRAGM_LEFT )
			TurnToggleButtonOn( &m_ButtonCalcificationDiaphragmLeft );
		if ( pCurrentStudy -> m_ObservedPleuralCalcificationSites & CALCIFICATION_OTHER_SITES_NONE )
			TurnToggleButtonOn( &m_ButtonCalcificationOtherNone );
		if ( pCurrentStudy -> m_ObservedPleuralCalcificationSites & CALCIFICATION_OTHER_SITES_RIGHT )
			TurnToggleButtonOn( &m_ButtonCalcificationOtherRight );
		if ( pCurrentStudy -> m_ObservedPleuralCalcificationSites & CALCIFICATION_OTHER_SITES_LEFT )
			TurnToggleButtonOn( &m_ButtonCalcificationOtherLeft );

		SetPleuralExtentButtonStates();
		if ( pCurrentStudy -> m_ObservedPlaqueExtent & PLAQUE_EXTENT_NONE_ON_RIGHT )
			TurnToggleButtonOn( &m_ButtonPleuralExtentNoneOnRight );
		if ( pCurrentStudy -> m_ObservedPlaqueExtent & PLAQUE_EXTENT_RIGHT )
			TurnToggleButtonOn( &m_ButtonPleuralExtentRight );
		if ( pCurrentStudy -> m_ObservedPlaqueExtent & PLAQUE_EXTENT_RIGHT_SIZE1 )
			TurnToggleButtonOn( &m_ButtonPleuralExtentRightSize1 );
		if ( pCurrentStudy -> m_ObservedPlaqueExtent & PLAQUE_EXTENT_RIGHT_SIZE2 )
			TurnToggleButtonOn( &m_ButtonPleuralExtentRightSize2 );
		if ( pCurrentStudy -> m_ObservedPlaqueExtent & PLAQUE_EXTENT_RIGHT_SIZE3 )
			TurnToggleButtonOn( &m_ButtonPleuralExtentRightSize3 );
		if ( pCurrentStudy -> m_ObservedPlaqueExtent & PLAQUE_EXTENT_NONE_ON_LEFT )
			TurnToggleButtonOn( &m_ButtonPleuralExtentNoneOnLeft );
		if ( pCurrentStudy -> m_ObservedPlaqueExtent & PLAQUE_EXTENT_LEFT )
			TurnToggleButtonOn( &m_ButtonPleuralExtentLeft );
		if ( pCurrentStudy -> m_ObservedPlaqueExtent & PLAQUE_EXTENT_LEFT_SIZE1 )
			TurnToggleButtonOn( &m_ButtonPleuralExtentLeftSize1 );
		if ( pCurrentStudy -> m_ObservedPlaqueExtent & PLAQUE_EXTENT_LEFT_SIZE2 )
			TurnToggleButtonOn( &m_ButtonPleuralExtentLeftSize2 );
		if ( pCurrentStudy -> m_ObservedPlaqueExtent & PLAQUE_EXTENT_LEFT_SIZE3 )
			TurnToggleButtonOn( &m_ButtonPleuralExtentLeftSize3 );

		SetPleuralWidthButtonStates();
		if ( pCurrentStudy -> m_ObservedPlaqueWidth & PLAQUE_WIDTH_NONE_ON_RIGHT )
			TurnToggleButtonOn( &m_ButtonPleuralWidthNoneOnRight );
		if ( pCurrentStudy -> m_ObservedPlaqueWidth & PLAQUE_WIDTH_RIGHT )
			TurnToggleButtonOn( &m_ButtonPleuralWidthRight );
		if ( pCurrentStudy -> m_ObservedPlaqueWidth & PLAQUE_WIDTH_RIGHT_SIZE1 )
			TurnToggleButtonOn( &m_ButtonPleuralWidthRightSize1 );
		if ( pCurrentStudy -> m_ObservedPlaqueWidth & PLAQUE_WIDTH_RIGHT_SIZE2 )
			TurnToggleButtonOn( &m_ButtonPleuralWidthRightSize2 );
		if ( pCurrentStudy -> m_ObservedPlaqueWidth & PLAQUE_WIDTH_RIGHT_SIZE3 )
			TurnToggleButtonOn( &m_ButtonPleuralWidthRightSize3 );
		if ( pCurrentStudy -> m_ObservedPlaqueWidth & PLAQUE_WIDTH_NONE_ON_LEFT )
			TurnToggleButtonOn( &m_ButtonPleuralWidthNoneOnLeft );
		if ( pCurrentStudy -> m_ObservedPlaqueWidth & PLAQUE_WIDTH_LEFT )
			TurnToggleButtonOn( &m_ButtonPleuralWidthLeft );
		if ( pCurrentStudy -> m_ObservedPlaqueWidth & PLAQUE_WIDTH_LEFT_SIZE1 )
			TurnToggleButtonOn( &m_ButtonPleuralWidthLeftSize1 );
		if ( pCurrentStudy -> m_ObservedPlaqueWidth & PLAQUE_WIDTH_LEFT_SIZE2 )
			TurnToggleButtonOn( &m_ButtonPleuralWidthLeftSize2 );
		if ( pCurrentStudy -> m_ObservedPlaqueWidth & PLAQUE_WIDTH_LEFT_SIZE3 )
			TurnToggleButtonOn( &m_ButtonPleuralWidthLeftSize3 );


		if ( pCurrentStudy -> m_ObservedCostophrenicAngleObliteration & COSTOPHRENIC_ANGLE_OBLITERATION_NONE )
			TurnToggleButtonOn( &m_ButtonAngleObliterationNone );
		if ( pCurrentStudy -> m_ObservedCostophrenicAngleObliteration & COSTOPHRENIC_ANGLE_OBLITERATION_RIGHT )
			TurnToggleButtonOn( &m_ButtonAngleObliterationRight );
		if ( pCurrentStudy -> m_ObservedCostophrenicAngleObliteration & COSTOPHRENIC_ANGLE_OBLITERATION_LEFT )
			TurnToggleButtonOn( &m_ButtonAngleObliterationLeft );

		if ( pCurrentStudy -> m_ObservedPleuralThickeningSites & THICKENING_CHEST_WALL_PROFILE_NONE )
			TurnToggleButtonOn( &m_ButtonThickeningSiteChestProfileNone );
		if ( pCurrentStudy -> m_ObservedPleuralThickeningSites & THICKENING_CHEST_WALL_PROFILE_RIGHT )
			TurnToggleButtonOn( &m_ButtonThickeningSiteChestProfileRight );
		if ( pCurrentStudy -> m_ObservedPleuralThickeningSites & THICKENING_CHEST_WALL_PROFILE_LEFT )
			TurnToggleButtonOn( &m_ButtonThickeningSiteChestProfileLeft );
		if ( pCurrentStudy -> m_ObservedPleuralThickeningSites & THICKENING_CHEST_WALL_FACE_ON_NONE )
			TurnToggleButtonOn( &m_ButtonThickeningSiteChestFaceOnNone );
		if ( pCurrentStudy -> m_ObservedPleuralThickeningSites & THICKENING_CHEST_WALL_FACE_ON_RIGHT )
			TurnToggleButtonOn( &m_ButtonThickeningSiteChestFaceOnRight );
		if ( pCurrentStudy -> m_ObservedPleuralThickeningSites & THICKENING_CHEST_WALL_FACE_ON_LEFT )
			TurnToggleButtonOn( &m_ButtonThickeningSiteChestFaceOnLeft );

		if ( pCurrentStudy -> m_ObservedThickeningCalcificationSites & THICK_CALCIFICATION_CHEST_WALL_PROFILE_NONE )
			TurnToggleButtonOn( &m_ButtonThickeningCalcificationChestProfileNone );
		if ( pCurrentStudy -> m_ObservedThickeningCalcificationSites & THICK_CALCIFICATION_CHEST_WALL_PROFILE_RIGHT )
			TurnToggleButtonOn( &m_ButtonThickeningCalcificationChestProfileRight );
		if ( pCurrentStudy -> m_ObservedThickeningCalcificationSites & THICK_CALCIFICATION_CHEST_WALL_PROFILE_LEFT )
			TurnToggleButtonOn( &m_ButtonThickeningCalcificationChestProfileLeft );
		if ( pCurrentStudy -> m_ObservedThickeningCalcificationSites & THICK_CALCIFICATION_CHEST_WALL_FACE_ON_NONE )
			TurnToggleButtonOn( &m_ButtonThickeningCalcificationChestFaceOnNone );
		if ( pCurrentStudy -> m_ObservedThickeningCalcificationSites & THICK_CALCIFICATION_CHEST_WALL_FACE_ON_RIGHT )
			TurnToggleButtonOn( &m_ButtonThickeningCalcificationChestFaceOnRight );
		if ( pCurrentStudy -> m_ObservedThickeningCalcificationSites & THICK_CALCIFICATION_CHEST_WALL_FACE_ON_LEFT )
			TurnToggleButtonOn( &m_ButtonThickeningCalcificationChestFaceOnLeft );

		SetPleuralThickeningExtentButtonStates();
		if ( pCurrentStudy -> m_ObservedThickeningExtent & THICKENING_EXTENT_NONE_ON_RIGHT )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningExtentNoneOnRight );
		if ( pCurrentStudy -> m_ObservedThickeningExtent & THICKENING_EXTENT_RIGHT )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningExtentRight );
		if ( pCurrentStudy -> m_ObservedThickeningExtent & THICKENING_EXTENT_RIGHT_SIZE1 )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningExtentRightSize1 );
		if ( pCurrentStudy -> m_ObservedThickeningExtent & THICKENING_EXTENT_RIGHT_SIZE2 )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningExtentRightSize2 );
		if ( pCurrentStudy -> m_ObservedThickeningExtent & THICKENING_EXTENT_RIGHT_SIZE3 )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningExtentRightSize3 );
		if ( pCurrentStudy -> m_ObservedThickeningExtent & THICKENING_EXTENT_NONE_ON_LEFT )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningExtentNoneOnLeft );
		if ( pCurrentStudy -> m_ObservedThickeningExtent & THICKENING_EXTENT_LEFT )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningExtentLeft );
		if ( pCurrentStudy -> m_ObservedThickeningExtent & THICKENING_EXTENT_LEFT_SIZE1 )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningExtentLeftSize1 );
		if ( pCurrentStudy -> m_ObservedThickeningExtent & THICKENING_EXTENT_LEFT_SIZE2 )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningExtentLeftSize2 );
		if ( pCurrentStudy -> m_ObservedThickeningExtent & THICKENING_EXTENT_LEFT_SIZE3 )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningExtentLeftSize3 );

		SetPleuralThickeningWidthButtonStates();
		if ( pCurrentStudy -> m_ObservedThickeningWidth & THICKENING_WIDTH_NONE_ON_RIGHT )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningWidthNoneOnRight );
		if ( pCurrentStudy -> m_ObservedThickeningWidth & THICKENING_WIDTH_RIGHT )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningWidthRight );
		if ( pCurrentStudy -> m_ObservedThickeningWidth & THICKENING_WIDTH_RIGHT_SIZE1 )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningWidthRightSize1 );
		if ( pCurrentStudy -> m_ObservedThickeningWidth & THICKENING_WIDTH_RIGHT_SIZE2 )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningWidthRightSize2 );
		if ( pCurrentStudy -> m_ObservedThickeningWidth & THICKENING_WIDTH_RIGHT_SIZE3 )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningWidthRightSize3 );
		if ( pCurrentStudy -> m_ObservedThickeningWidth & THICKENING_WIDTH_NONE_ON_LEFT )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningWidthNoneOnLeft );
		if ( pCurrentStudy -> m_ObservedThickeningWidth & THICKENING_WIDTH_LEFT )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningWidthLeft );
		if ( pCurrentStudy -> m_ObservedThickeningWidth & THICKENING_WIDTH_LEFT_SIZE1 )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningWidthLeftSize1 );
		if ( pCurrentStudy -> m_ObservedThickeningWidth & THICKENING_WIDTH_LEFT_SIZE2 )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningWidthLeftSize2 );
		if ( pCurrentStudy -> m_ObservedThickeningWidth & THICKENING_WIDTH_LEFT_SIZE3 )
			TurnToggleButtonOn( &m_ButtonPleuralThickeningWidthLeftSize3 );
		
		UpdatePleuralAbnormalityPageStatus();

		if ( pCurrentStudy -> m_AnyOtherAbnormalities == BOOL_YES )
			TurnToggleButtonOn( &m_ButtonOtherYes );
		else if ( pCurrentStudy -> m_AnyOtherAbnormalities == BOOL_NO )
			TurnToggleButtonOn( &m_ButtonOtherNo );
		else if ( pCurrentStudy -> m_AnyOtherAbnormalities == BOOL_NOT_SPECIFIED )
			{
			m_ButtonOtherYes.m_ToggleState = BUTTON_OFF;
			m_ButtonOtherNo.m_ToggleState = BUTTON_OFF;
			}
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_AA )
			TurnToggleButtonOn( &m_ButtonSymbol_aa );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_AT )
			TurnToggleButtonOn( &m_ButtonSymbol_at );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_AX )
			TurnToggleButtonOn( &m_ButtonSymbol_ax );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_BU )
			TurnToggleButtonOn( &m_ButtonSymbol_bu );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_CA )
			TurnToggleButtonOn( &m_ButtonSymbol_ca );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_CG )
			TurnToggleButtonOn( &m_ButtonSymbol_cg );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_CN )
			TurnToggleButtonOn( &m_ButtonSymbol_cn );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_CO )
			TurnToggleButtonOn( &m_ButtonSymbol_co );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_CP )
			TurnToggleButtonOn( &m_ButtonSymbol_cp );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_CV )
			TurnToggleButtonOn( &m_ButtonSymbol_cv );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_DI )
			TurnToggleButtonOn( &m_ButtonSymbol_di );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_EF )
			TurnToggleButtonOn( &m_ButtonSymbol_ef );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_EM )
			TurnToggleButtonOn( &m_ButtonSymbol_em );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_ES )
			TurnToggleButtonOn( &m_ButtonSymbol_es );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_FR )
			TurnToggleButtonOn( &m_ButtonSymbol_fr );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_HI )
			TurnToggleButtonOn( &m_ButtonSymbol_hi );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_HO )
			TurnToggleButtonOn( &m_ButtonSymbol_ho );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_ID )
			TurnToggleButtonOn( &m_ButtonSymbol_id );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_IH )
			TurnToggleButtonOn( &m_ButtonSymbol_ih );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_KL )
			TurnToggleButtonOn( &m_ButtonSymbol_kl );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_ME )
			TurnToggleButtonOn( &m_ButtonSymbol_me );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_PA )
			TurnToggleButtonOn( &m_ButtonSymbol_pa );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_PB )
			TurnToggleButtonOn( &m_ButtonSymbol_pb );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_PI )
			TurnToggleButtonOn( &m_ButtonSymbol_pi );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_PX )
			TurnToggleButtonOn( &m_ButtonSymbol_px );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_RA )
			TurnToggleButtonOn( &m_ButtonSymbol_ra );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_RP )
			TurnToggleButtonOn( &m_ButtonSymbol_rp );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_TB )
			TurnToggleButtonOn( &m_ButtonSymbol_tb );
		if ( pCurrentStudy -> m_ObservedOtherSymbols & OBSERVED_SYMBOL_OD )
			TurnToggleButtonOn( &m_ButtonSymbol_od );

		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_EVENTRATION )
			TurnToggleButtonOn( &m_ButtonEventration );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_HIATAL_HERNIA )
			TurnToggleButtonOn( &m_ButtonHiatalHernia );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_BRONCHOVASCULAR_MARKINGS )
			TurnToggleButtonOn( &m_ButtonBronchovascularMarkings );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_HYPERINFLATION )
			TurnToggleButtonOn( &m_ButtonHyperinflation );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_BONY_CHEST_CAGE )
			TurnToggleButtonOn( &m_ButtonBonyChestCage );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_FRACTURE_HEALED )
			TurnToggleButtonOn( &m_ButtonFractureHealed );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_FRACTURE_NONHEALED )
			TurnToggleButtonOn( &m_ButtonFractureNonHealed );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_SCOLIOSIS )
			TurnToggleButtonOn( &m_ButtonScoliosis );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_VERTEBRAL_COLUMN )
			TurnToggleButtonOn( &m_ButtonVertebralColumn );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_AZYGOS_LOBE )
			TurnToggleButtonOn( &m_ButtonAzygosLobe );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_LUNG_DENSITY )
			TurnToggleButtonOn( &m_ButtonLungDensity );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_INFILTRATE )
			TurnToggleButtonOn( &m_ButtonInfiltrate );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_NODULAR_LESION )
			TurnToggleButtonOn( &m_ButtonNodularLesion );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_FOREIGN_BODY )
			TurnToggleButtonOn( &m_ButtonForeignBody );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_POSTSURGICAL )
			TurnToggleButtonOn( &m_ButtonPostSurgical );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_CYST )
			TurnToggleButtonOn( &m_ButtonCyst );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_AORTA_ANOMALY )
			TurnToggleButtonOn( &m_ButtonAortaAnomaly );
		if ( pCurrentStudy -> m_ObservedOtherAbnormalities & OBSERVED_VASCULAR_ABNORMALITY )
			TurnToggleButtonOn( &m_ButtonVascularAbnormality );

		m_EditOtherComments.SetWindowText( (const char*)pCurrentStudy -> m_OtherAbnormalitiesCommentsText );
		UpdateOtherAbnormalityPageStatus();
		}
}


char			PatientNameBuffer[ 100 ];


static void DeletePopupDialog( void *pResponseDialog )
{
	CPopupDialog			*pPopupDialog;
	
	pPopupDialog = (CPopupDialog*)pResponseDialog;
	if ( pPopupDialog != 0 )
		delete pPopupDialog;
}


BOOL CAnalysisPage::OnSetActive()
{
 	CStudy							*pCurrentStudy;
	CMainFrame						*pMainFrame;
	static USER_NOTIFICATION_INFO	UserNotificationInfo;
	CControlPanel					*pControlPanel;

	ResetPage();
	pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
	if ( pCurrentStudy == 0 && !BViewerConfiguration.bAutoGeneratePDFReportsFromAXTFiles )
		{
		// Remind user to select a study.
		pMainFrame = (CMainFrame*)ThisBViewerApp.m_pMainWnd;
		if ( pMainFrame != 0 )
			{
			UserNotificationInfo.WindowWidth = 400;
			UserNotificationInfo.WindowHeight = 300;
			UserNotificationInfo.FontHeight = 0;	// Use default setting;
			UserNotificationInfo.FontWidth = 0;		// Use default setting;
			UserNotificationInfo.UserInputType = USER_INPUT_TYPE_OK;
			UserNotificationInfo.pUserNotificationMessage = "Please select a\nStudy before\nentering your\nobservations.";
			UserNotificationInfo.CallbackFunction = DeletePopupDialog;
			pMainFrame -> PerformUserInput( &UserNotificationInfo );
			}
		}

	pControlPanel = (CControlPanel*)GetParent();
	if ( pControlPanel != 0 )
		pControlPanel -> m_CurrentlyActivePage = INTERPRETATION_PAGE;

	return CPropertyPage::OnSetActive();
}


void CAnalysisPage::ResetPage()
{
	CStudy			*pCurrentStudy;
	unsigned		nMember;
	BOOL			bMakeGroupVisible;

	if ( m_bPageIsInitialized )
		{
		m_ImageQualityButton.m_SemanticState = BUTTON_UNTOUCHED;
		m_ParenchymalAbnormalityButton.m_SemanticState = BUTTON_UNTOUCHED;
		m_PleuralAbnormalityButton.m_SemanticState = BUTTON_UNTOUCHED;
		m_OtherAbnormalityButton.m_SemanticState = BUTTON_UNTOUCHED;
		m_ApproveStudyButton.m_SemanticState = BUTTON_UNTOUCHED;

		LoadAnalysisFromCurrentStudy();

		// Set the default visibility.
		SetImageQualityPageVisibility( CONTROL_INVISIBLE );
		SetParenchymalPageVisibility( CONTROL_INVISIBLE );
		SetPleuralPageVisibility( CONTROL_INVISIBLE );
		SetOtherPageVisibility( CONTROL_INVISIBLE );

		pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
		if ( pCurrentStudy != 0 )
			{
			strcpy( PatientNameBuffer, "" );
			strncat( PatientNameBuffer, pCurrentStudy -> m_PatientLastName, 50 );
			strcat( PatientNameBuffer, ", " );
			strncat( PatientNameBuffer, pCurrentStudy -> m_PatientFirstName, 99 - strlen( PatientNameBuffer ) );
			m_StaticPatientName.m_ControlText = PatientNameBuffer;
			if ( pCurrentStudy -> m_nCurrentObjectID == m_ImageQualityButton.m_nObjectID )
				{
				m_StaticImageQualityTitle.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
				m_ImageGradeButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
				m_ImageGradeExplanation.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );

				bMakeGroupVisible = FALSE;
				for ( nMember = 1; nMember < m_ImageGradeButtonGroup.m_MemberCount; nMember++ )
					if ( ( (TomButton*)m_ImageGradeButtonGroup.m_pMemberPointerArray[ nMember ] ) -> m_ToggleState == BUTTON_ON )
						bMakeGroupVisible = TRUE;
				if ( bMakeGroupVisible )
					m_ImageQualificationButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );

				if ( m_ImageOther.m_ToggleState == BUTTON_ON )
					{
					m_StaticPleaseSpecify.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
					m_EditImageQualityOther.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
					}
				}
			else if ( pCurrentStudy -> m_nCurrentObjectID == m_ParenchymalAbnormalityButton.m_nObjectID )
				{
				SetParenchymalPageVisibility( CONTROL_VISIBLE );
				}
			else if ( pCurrentStudy -> m_nCurrentObjectID == m_PleuralAbnormalityButton.m_nObjectID )
				{
				SetPleuralPageVisibility( CONTROL_VISIBLE );
				}
			else if ( pCurrentStudy -> m_nCurrentObjectID == m_OtherAbnormalityButton.m_nObjectID )
				{
				SetOtherPageVisibility( CONTROL_VISIBLE );
				}
			}
		}

	RedisplayPage();	
}


BOOL CAnalysisPage::OnKillActive()
{
	CStudy			*pCurrentStudy;
	BOOL			bNoError = TRUE;

	pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
	if ( pCurrentStudy != 0 )
		{
		LoadStudyDataFromScreens( pCurrentStudy );
		// Save the current reader in the study file.
		if ( !pCurrentStudy -> m_bStudyWasPreviouslyInterpreted )
			memcpy( &pCurrentStudy -> m_ReaderInfo, &LoggedInReaderInfo, sizeof(READER_PERSONAL_INFO) );
		bNoError = pCurrentStudy -> Save();
		pCurrentStudy -> UnpackData();		// Refresh the current study data blocks.
		}

	return CPropertyPage::OnKillActive();
}


void CAnalysisPage::DrawLine( CDC *pDC, long xStart, long yStart, long xEnd, long yEnd, int nWidth, COLORREF Color )
{
	CPen				DrawingPen;
	CPen				*PrevPen;
	
	DrawingPen.CreatePen( PS_SOLID, nWidth, Color );
	PrevPen = pDC -> SelectObject( &DrawingPen );

	pDC -> MoveTo( xStart, yStart );
	pDC -> LineTo( xEnd, yEnd );

	pDC -> SelectObject( PrevPen );
    DrawingPen.DeleteObject();	
}


void CAnalysisPage::OnPaint()
{
	CPaintDC		DC( this );
	COLORREF		PrevBkgdColor;
	CRect			ClientRect;

	GetClientRect( ClientRect );
	PrevBkgdColor = DC.SetBkColor( COLOR_ANALYSIS_BKGD );
	DC.FillRect( &ClientRect, &m_BkgdBrush );		
	DC.SetBkColor( PrevBkgdColor );
	DrawLine( &DC, 10, 150, 40, 150, 1, COLOR_ANALYSIS_FONT );
	DrawLine( &DC, 10, 290, 40, 290, 1, COLOR_ANALYSIS_FONT );
	DrawLine( &DC, 10, 610, 40, 610, 1, COLOR_ANALYSIS_FONT );
}


HBRUSH CAnalysisPage::OnCtlColor( CDC *pDC, CWnd *pWnd, UINT nCtlColor )
{
    if ( nCtlColor == CTLCOLOR_EDIT )
		{
		pDC -> SetBkColor( ( (TomEdit*)pWnd ) -> m_IdleBkgColor );
		pDC -> SetTextColor( ( (TomEdit*)pWnd ) -> m_TextColor );
		}
	// Return handle to the parent (this) window's background CBrush object
	// for use in painting by the child controls.
	return HBRUSH( m_BkgdBrush );
}


void CAnalysisPage::OnBnClickedImageQualityButton( NMHDR *pNMHDR, LRESULT *pResult )
{
	CStudy			*pCurrentStudy;

	pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
	if ( pCurrentStudy != 0 )
		{
		pCurrentStudy -> m_nCurrentObjectID = m_ImageQualityButton.m_nObjectID;
		pCurrentStudy -> m_bStudyHasBeenEdited = TRUE;
		pCurrentStudy -> m_bImageQualityVisited = TRUE;
		}
	UpdateImageQualityPageStatus();
	SetImageQualityPageVisibility( CONTROL_VISIBLE );
	SetParenchymalPageVisibility( CONTROL_INVISIBLE );
	SetPleuralPageVisibility( CONTROL_INVISIBLE );
	SetOtherPageVisibility( CONTROL_INVISIBLE );
	Invalidate( TRUE );

	*pResult = 0;
}


void CAnalysisPage::SetImageQualityPageVisibility( unsigned long Visibility )
{
	unsigned		nMember;
	BOOL			bMakeGroupVisible;

	if ( Visibility == CONTROL_VISIBLE )
		{
		m_StaticImageQualityTitle.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		m_ImageGradeButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
		m_ImageGradeExplanation.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		bMakeGroupVisible = bTurnOffQualityControl;
		for ( nMember = 1; nMember < m_ImageGradeButtonGroup.m_MemberCount; nMember++ )
			if ( ( (TomButton*)m_ImageGradeButtonGroup.m_pMemberPointerArray[ nMember ] ) -> m_ToggleState == BUTTON_ON )
				bMakeGroupVisible = TRUE;
		if ( bMakeGroupVisible )
			m_ImageQualificationButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
		else
			m_ImageQualificationButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );

		if ( m_ImageOther.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
			{
			m_StaticPleaseSpecify.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
			m_EditImageQualityOther.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
			}
		else if ( m_ImageOther.m_ToggleState == BUTTON_OFF )
			{
			m_StaticPleaseSpecify.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
			m_EditImageQualityOther.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
			}
		}
	else if ( Visibility == CONTROL_INVISIBLE )
		{
		m_StaticImageQualityTitle.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		m_ImageGradeButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_ImageGradeExplanation.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		m_ImageQualificationButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_StaticPleaseSpecify.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		m_EditImageQualityOther.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		}
}


void CAnalysisPage::UpdateImageQualityPageStatus()
{
	CStudy			*pCurrentStudy;
	CString			OtherDefectTextString;

	pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
	if ( m_ImageGrade1.m_ToggleState == BUTTON_ON )
		{
		m_bImageQualityPageIsCompleted = TRUE;
		// Reset all other buttons.
		m_ImageQualificationButtonGroup.InitializeMembers();
		m_EditImageQualityOther.Reinitialize();
		}
	else if ( m_ImageGradeButtonGroup.IsAnyButtonChecked() )
		m_bImageQualityPageIsCompleted = ( m_ImageQualificationButtonGroup.IsAnyButtonChecked() );
	else
		m_bImageQualityPageIsCompleted = FALSE;
	if ( m_bImageQualityPageIsCompleted )
		m_ImageQualityButton.m_SemanticState = BUTTON_COMPLETED;
	else if ( pCurrentStudy != 0 && pCurrentStudy -> m_bImageQualityVisited )
		m_ImageQualityButton.m_SemanticState = BUTTON_TOUCHED;
	m_EditImageQualityOther.GetWindowText( OtherDefectTextString );
	m_EditImageQualityOther.m_bHasReceivedInput = ( OtherDefectTextString.GetLength() > 0 );
	if ( m_EditImageQualityOther.m_bHasReceivedInput )
		m_EditImageQualityOther.m_IdleBkgColor = m_EditImageQualityOther.m_ActivatedBkgdColor;
	else
		m_EditImageQualityOther.m_IdleBkgColor = m_EditImageQualityOther.m_OriginalIdleBkgColor;
	Invalidate( TRUE );
}


void CAnalysisPage::OnBnClickedImageGrade1Button( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImageGrade1.m_pGroup -> RespondToSelection( (void*)&m_ImageGrade1 );
	m_ImageGradeExplanation.m_ControlText = "Good";
	m_ImageGradeExplanation.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );

	if ( bTurnOffQualityControl )
		{
		m_ImageQualificationButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
		m_StaticPleaseSpecify.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		m_EditImageQualityOther.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		}
	else
		{
		m_ImageQualificationButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_StaticPleaseSpecify.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		m_EditImageQualityOther.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		}

	UpdateImageQualityPageStatus();

	*pResult = 0;
}

void CAnalysisPage::OnBnClickedImageGrade2Button( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImageGrade2.m_pGroup -> RespondToSelection( (void*)&m_ImageGrade2 );
	m_ImageQualificationButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
	m_ImageGradeExplanation.m_ControlText = "Acceptable, with no technical defect likely to impair classification of the radiograph for pneumoconiosis.";
	m_ImageGradeExplanation.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );

	UpdateImageQualityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedImageGrade3Button( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImageGrade3.m_pGroup -> RespondToSelection( (void*)&m_ImageGrade3 );
	m_ImageQualificationButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
	m_ImageGradeExplanation.m_ControlText = "Acceptible, with some technical defect but still adequate for classification purposes.";
	m_ImageGradeExplanation.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );

	UpdateImageQualityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedImageGradeURButton( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImageGradeUR.m_pGroup -> RespondToSelection( (void*)&m_ImageGradeUR );
	m_ImageQualificationButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
	m_ImageGradeExplanation.m_ControlText = "Unacceptable for classification purposes.";
	m_ImageGradeExplanation.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );

	// Clear any buttons set in the interpretation sections.
	m_ButtonParenchymalNo.m_ToggleState = BUTTON_ON;
	OnBnClickedParenchymalNo( pNMHDR, pResult );
	m_ButtonPleuralNo.m_ToggleState = BUTTON_ON;
	OnBnClickedPleuralNo( pNMHDR, pResult );
	// Reset the two "No" buttons to off.
	m_ButtonParenchymalNo.m_ToggleState = BUTTON_OFF;
	m_ButtonPleuralNo.m_ToggleState = BUTTON_OFF;

	// If unreadable, mark the interpretation sections complete.
	m_ParenchymalAbnormalityButton.m_SemanticState = BUTTON_COMPLETED;
	m_PleuralAbnormalityButton.m_SemanticState = BUTTON_COMPLETED;
	OnBnClickedImageQualityButton( pNMHDR, pResult );

	UpdateImageQualityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedImageOverexposed( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImageOverexposed.m_pGroup -> RespondToSelection( (void*)&m_ImageOverexposed );
	UpdateImageQualityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedImageUnderexposed( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImageUnderexposed.m_pGroup -> RespondToSelection( (void*)&m_ImageUnderexposed );
	UpdateImageQualityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedImageArtifacts( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImageArtifacts.m_pGroup -> RespondToSelection( (void*)&m_ImageArtifacts );
	UpdateImageQualityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedImageImproperPosition( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImageImproperPosition.m_pGroup -> RespondToSelection( (void*)&m_ImageImproperPosition );
	UpdateImageQualityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedImagePoorContrast( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImagePoorContrast.m_pGroup -> RespondToSelection( (void*)&m_ImagePoorContrast );
	UpdateImageQualityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedImagePoorProcessing( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImagePoorProcessing.m_pGroup -> RespondToSelection( (void*)&m_ImagePoorProcessing );
	UpdateImageQualityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedImageUnderinflation( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImageUnderinflation.m_pGroup -> RespondToSelection( (void*)&m_ImageUnderinflation );
	UpdateImageQualityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedImageMottle( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImageMottle.m_pGroup -> RespondToSelection( (void*)&m_ImageMottle );
	UpdateImageQualityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedImageExcessiveEdgeEnhancement( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImageExcessiveEdgeEnhancement.m_pGroup -> RespondToSelection( (void*)&m_ImageExcessiveEdgeEnhancement );
	UpdateImageQualityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedImageOther( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ImageOther.m_pGroup -> RespondToSelection( (void*)&m_ImageOther );
	if ( m_ImageOther.m_ToggleState == BUTTON_ON )
		{
		m_StaticPleaseSpecify.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		m_EditImageQualityOther.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		}
	else if ( m_ImageOther.m_ToggleState == BUTTON_OFF )
		{
		m_StaticPleaseSpecify.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		m_EditImageQualityOther.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		}

	UpdateImageQualityPageStatus();

	*pResult = 0;
}



void CAnalysisPage::OnBnClickedParenchymalAbnormalityButton( NMHDR *pNMHDR, LRESULT *pResult )
{
	CStudy			*pCurrentStudy;

	pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
	if ( pCurrentStudy != 0 )
		{
		pCurrentStudy -> m_nCurrentObjectID = m_ParenchymalAbnormalityButton.m_nObjectID;
		pCurrentStudy -> m_bStudyHasBeenEdited = TRUE;
		pCurrentStudy -> m_bParenchymalAbnormalitiesVisited = TRUE;
		}
	UpdateParenchymalAbnormalityPageStatus();

	SetImageQualityPageVisibility( CONTROL_INVISIBLE );
	SetParenchymalPageVisibility( CONTROL_VISIBLE );
	SetPleuralPageVisibility( CONTROL_INVISIBLE );
	SetOtherPageVisibility( CONTROL_INVISIBLE );
	Invalidate( TRUE );

	*pResult = 0;
}


void CAnalysisPage::SetParenchymalPageVisibility( unsigned long Visibility )
{
	if ( Visibility == CONTROL_VISIBLE )
		{
		m_StaticParenchymalAbnormalitiesTitle.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		m_AnyParenchymalAbnormalities.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		m_ParenchymalYesNoButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
 		if ( m_ButtonParenchymalYes.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
			{
			m_ParenchymalStaticTextGroup.SetGroupVisibility( CONTROL_VISIBLE );
			m_SmallOpacityPrimaryButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
			m_SmallOpacitySecondaryButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
			m_SmallOpacityZoneButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
			m_SmallOpacityProfusionButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
			m_LargeOpacitySizeButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );

			m_ButtonAllSmallOpacityZones.m_SemanticState = BUTTON_UNTOUCHED;
			m_ButtonAllSmallOpacityZones.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );

			}
		else
			{
			m_ParenchymalStaticTextGroup.SetGroupVisibility( CONTROL_INVISIBLE );
			m_SmallOpacityPrimaryButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
			m_SmallOpacitySecondaryButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
			m_SmallOpacityZoneButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
			m_SmallOpacityProfusionButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
			m_LargeOpacitySizeButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );

			m_ButtonAllSmallOpacityZones.m_SemanticState = BUTTON_UNTOUCHED;
			m_ButtonAllSmallOpacityZones.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
			}
		}
	else if ( Visibility == CONTROL_INVISIBLE )
		{
		m_StaticParenchymalAbnormalitiesTitle.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		m_AnyParenchymalAbnormalities.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		m_ParenchymalYesNoButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_ParenchymalStaticTextGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_ParenchymalStaticTextGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_SmallOpacityPrimaryButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_SmallOpacitySecondaryButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_SmallOpacityZoneButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_SmallOpacityProfusionButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_LargeOpacitySizeButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );

		m_ButtonAllSmallOpacityZones.m_SemanticState = BUTTON_UNTOUCHED;
		m_ButtonAllSmallOpacityZones.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		}
}


void CAnalysisPage::UpdateParenchymalAbnormalityPageStatus()
{
	CStudy			*pCurrentStudy;

	pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
	if ( m_ButtonParenchymalNo.m_ToggleState == BUTTON_ON )
		{
		m_bParenchymalAbnormalityPageIsCompleted = TRUE;
		// Reset all button groups.
		m_SmallOpacityPrimaryButtonGroup.InitializeMembers();
		m_SmallOpacitySecondaryButtonGroup.InitializeMembers();
		m_SmallOpacityZoneButtonGroup.InitializeMembers();
		m_SmallOpacityProfusionButtonGroup.InitializeMembers();
		m_LargeOpacitySizeButtonGroup.InitializeMembers();
		}
	else if ( m_ButtonParenchymalYes.m_ToggleState == BUTTON_ON )
		{
		m_bParenchymalAbnormalityPageIsCompleted = ( m_SmallOpacityPrimaryButtonGroup.IsAnyButtonChecked() &&
													m_SmallOpacitySecondaryButtonGroup.IsAnyButtonChecked() &&
													m_SmallOpacityZoneButtonGroup.IsAnyButtonChecked() &&
													m_SmallOpacityProfusionButtonGroup.IsAnyButtonChecked() &&
													m_LargeOpacitySizeButtonGroup.IsAnyButtonChecked() );
		UpdateApproveStudyButtonStatus();
		}
	else
		m_bParenchymalAbnormalityPageIsCompleted = FALSE;
	if ( m_bParenchymalAbnormalityPageIsCompleted )
		{
		m_ParenchymalAbnormalityButton.m_SemanticState = BUTTON_COMPLETED;
		UpdateApproveStudyButtonStatus();
		}
	else if ( pCurrentStudy != 0 && pCurrentStudy -> m_bParenchymalAbnormalitiesVisited )
		m_ParenchymalAbnormalityButton.m_SemanticState = BUTTON_TOUCHED;
	Invalidate( TRUE );
}


void CAnalysisPage::OnBnClickedParenchymalYes( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonParenchymalYes.m_ToggleState == BUTTON_ON )
		m_AnyParenchymalAbnormalities.HasBeenCompleted( TRUE );
	else
		m_AnyParenchymalAbnormalities.HasBeenCompleted( FALSE );
	m_ButtonParenchymalYes.m_pGroup -> RespondToSelection( (void*)&m_ButtonParenchymalYes );
	SetParenchymalPageVisibility( CONTROL_VISIBLE );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedParenchymalNo( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonParenchymalNo.m_ToggleState == BUTTON_ON )
		m_AnyParenchymalAbnormalities.HasBeenCompleted( TRUE );
	else
		m_AnyParenchymalAbnormalities.HasBeenCompleted( FALSE );
	m_ButtonParenchymalNo.m_pGroup -> RespondToSelection( (void*)&m_ButtonParenchymalNo );
	SetParenchymalPageVisibility( CONTROL_VISIBLE );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::SetSmallOpacityCompletion()
{
	if ( m_StaticShapeAndSize.IsCompleted() && m_StaticZones.IsCompleted() && m_StaticProfusion.IsCompleted() )
		m_SmallOpacitiesSubtitle.HasBeenCompleted( TRUE );
	else
		m_SmallOpacitiesSubtitle.HasBeenCompleted( FALSE );
}


void CAnalysisPage::OnBnClickedButtonPrimary_P( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonPrimary_P.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticPrimary.HasBeenCompleted( TRUE );
		if ( m_StaticSecondary.IsCompleted() )
			m_StaticShapeAndSize.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticPrimary.HasBeenCompleted( FALSE );
		m_StaticShapeAndSize.HasBeenCompleted( FALSE );
		}
	SetSmallOpacityCompletion();
	m_ButtonPrimary_P.m_pGroup -> RespondToSelection( (void*)&m_ButtonPrimary_P );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}

void CAnalysisPage::OnBnClickedButtonPrimary_S( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonPrimary_S.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticPrimary.HasBeenCompleted( TRUE );
		if ( m_StaticSecondary.IsCompleted() )
			m_StaticShapeAndSize.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticPrimary.HasBeenCompleted( FALSE );
		m_StaticShapeAndSize.HasBeenCompleted( FALSE );
		}
	SetSmallOpacityCompletion();
	m_ButtonPrimary_S.m_pGroup -> RespondToSelection( (void*)&m_ButtonPrimary_S );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonPrimary_Q( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonPrimary_Q.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticPrimary.HasBeenCompleted( TRUE );
		if ( m_StaticSecondary.IsCompleted() )
			m_StaticShapeAndSize.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticPrimary.HasBeenCompleted( FALSE );
		m_StaticShapeAndSize.HasBeenCompleted( FALSE );
		}
	SetSmallOpacityCompletion();
	m_ButtonPrimary_Q.m_pGroup -> RespondToSelection( (void*)&m_ButtonPrimary_Q );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonPrimary_T( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonPrimary_T.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticPrimary.HasBeenCompleted( TRUE );
		if ( m_StaticSecondary.IsCompleted() )
			m_StaticShapeAndSize.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticPrimary.HasBeenCompleted( FALSE );
		m_StaticShapeAndSize.HasBeenCompleted( FALSE );
		}
	SetSmallOpacityCompletion();
	m_ButtonPrimary_T.m_pGroup -> RespondToSelection( (void*)&m_ButtonPrimary_T );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonPrimary_R( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonPrimary_R.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticPrimary.HasBeenCompleted( TRUE );
		if ( m_StaticSecondary.IsCompleted() )
			m_StaticShapeAndSize.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticPrimary.HasBeenCompleted( FALSE );
		m_StaticShapeAndSize.HasBeenCompleted( FALSE );
		}
	SetSmallOpacityCompletion();
	m_ButtonPrimary_R.m_pGroup -> RespondToSelection( (void*)&m_ButtonPrimary_R );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonPrimary_U( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonPrimary_U.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticPrimary.HasBeenCompleted( TRUE );
		if ( m_StaticSecondary.IsCompleted() )
			m_StaticShapeAndSize.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticPrimary.HasBeenCompleted( FALSE );
		m_StaticShapeAndSize.HasBeenCompleted( FALSE );
		}
	SetSmallOpacityCompletion();
	m_ButtonPrimary_U.m_pGroup -> RespondToSelection( (void*)&m_ButtonPrimary_U );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}



void CAnalysisPage::OnBnClickedButtonSecondary_P( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSecondary_P.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticSecondary.HasBeenCompleted( TRUE );
		if ( m_StaticPrimary.IsCompleted() )
			m_StaticShapeAndSize.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticSecondary.HasBeenCompleted( FALSE );
		m_StaticShapeAndSize.HasBeenCompleted( FALSE );
		}
	SetSmallOpacityCompletion();
	m_ButtonSecondary_P.m_pGroup -> RespondToSelection( (void*)&m_ButtonSecondary_P );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSecondary_S( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSecondary_S.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticSecondary.HasBeenCompleted( TRUE );
		if ( m_StaticPrimary.IsCompleted() )
			m_StaticShapeAndSize.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticSecondary.HasBeenCompleted( FALSE );
		m_StaticShapeAndSize.HasBeenCompleted( FALSE );
		}
	SetSmallOpacityCompletion();
	m_ButtonSecondary_S.m_pGroup -> RespondToSelection( (void*)&m_ButtonSecondary_S );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSecondary_Q( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSecondary_Q.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticSecondary.HasBeenCompleted( TRUE );
		if ( m_StaticPrimary.IsCompleted() )
			m_StaticShapeAndSize.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticSecondary.HasBeenCompleted( FALSE );
		m_StaticShapeAndSize.HasBeenCompleted( FALSE );
		}
	SetSmallOpacityCompletion();
	m_ButtonSecondary_Q.m_pGroup -> RespondToSelection( (void*)&m_ButtonSecondary_Q );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSecondary_T( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSecondary_T.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticSecondary.HasBeenCompleted( TRUE );
		if ( m_StaticPrimary.IsCompleted() )
			m_StaticShapeAndSize.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticSecondary.HasBeenCompleted( FALSE );
		m_StaticShapeAndSize.HasBeenCompleted( FALSE );
		}
	SetSmallOpacityCompletion();
	m_ButtonSecondary_T.m_pGroup -> RespondToSelection( (void*)&m_ButtonSecondary_T );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSecondary_R( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSecondary_R.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticSecondary.HasBeenCompleted( TRUE );
		if ( m_StaticPrimary.IsCompleted() )
			m_StaticShapeAndSize.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticSecondary.HasBeenCompleted( FALSE );
		m_StaticShapeAndSize.HasBeenCompleted( FALSE );
		}
	SetSmallOpacityCompletion();
	m_ButtonSecondary_R.m_pGroup -> RespondToSelection( (void*)&m_ButtonSecondary_R );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSecondary_U( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSecondary_U.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticSecondary.HasBeenCompleted( TRUE );
		if ( m_StaticPrimary.IsCompleted() )
			m_StaticShapeAndSize.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticSecondary.HasBeenCompleted( FALSE );
		m_StaticShapeAndSize.HasBeenCompleted( FALSE );
		}
	SetSmallOpacityCompletion();
	m_ButtonSecondary_U.m_pGroup -> RespondToSelection( (void*)&m_ButtonSecondary_U );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}



void CAnalysisPage::OnBnClickedButtonSmallOpacityZoneUpperRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityZoneUpperRight.m_pGroup -> IsAnyButtonChecked() )
		m_StaticZones.HasBeenCompleted( TRUE );
	else
		m_StaticZones.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityZoneUpperRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityZoneUpperRight );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityZoneUpperLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityZoneUpperLeft.m_pGroup -> IsAnyButtonChecked() )
		m_StaticZones.HasBeenCompleted( TRUE );
	else
		m_StaticZones.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityZoneUpperLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityZoneUpperLeft );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityZoneMiddleRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityZoneMiddleRight.m_pGroup -> IsAnyButtonChecked() )
		m_StaticZones.HasBeenCompleted( TRUE );
	else
		m_StaticZones.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityZoneMiddleRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityZoneMiddleRight );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityZoneMiddleLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityZoneMiddleLeft.m_pGroup -> IsAnyButtonChecked() )
		m_StaticZones.HasBeenCompleted( TRUE );
	else
		m_StaticZones.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityZoneMiddleLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityZoneMiddleLeft );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityZoneLowerRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityZoneLowerRight.m_pGroup -> IsAnyButtonChecked() )
		m_StaticZones.HasBeenCompleted( TRUE );
	else
		m_StaticZones.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityZoneLowerRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityZoneLowerRight );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityZoneLowerLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityZoneLowerLeft.m_pGroup -> IsAnyButtonChecked() )
		m_StaticZones.HasBeenCompleted( TRUE );
	else
		m_StaticZones.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityZoneLowerLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityZoneLowerLeft );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityClickAllZones( NMHDR *pNMHDR, LRESULT *pResult )
{
	UINT						nFlags = 0;
	CPoint						Point( 0, 0 );

	m_ButtonSmallOpacityZoneUpperRight.OnLButtonUp( nFlags, Point );
	m_ButtonSmallOpacityZoneUpperRight.m_ToggleState = BUTTON_ON;		// Force the button to ON.  Prevent a toggle to OFF.
	m_ButtonSmallOpacityZoneUpperRight.m_IdleBkgColor = m_ButtonSmallOpacityZoneUpperRight.m_ActivatedBkgdColor;
	OnBnClickedButtonSmallOpacityZoneUpperRight( pNMHDR, pResult );

	m_ButtonSmallOpacityZoneUpperLeft.OnLButtonUp( nFlags, Point );
	m_ButtonSmallOpacityZoneUpperLeft.m_ToggleState = BUTTON_ON;		// Force the button to ON.  Prevent a toggle to OFF.
	m_ButtonSmallOpacityZoneUpperLeft.m_IdleBkgColor = m_ButtonSmallOpacityZoneUpperLeft.m_ActivatedBkgdColor;
	OnBnClickedButtonSmallOpacityZoneUpperLeft( pNMHDR, pResult );

	m_ButtonSmallOpacityZoneMiddleRight.OnLButtonUp( nFlags, Point );
	m_ButtonSmallOpacityZoneMiddleRight.m_ToggleState = BUTTON_ON;		// Force the button to ON.  Prevent a toggle to OFF.
	m_ButtonSmallOpacityZoneMiddleRight.m_IdleBkgColor = m_ButtonSmallOpacityZoneMiddleRight.m_ActivatedBkgdColor;
	OnBnClickedButtonSmallOpacityZoneMiddleRight( pNMHDR, pResult );

	m_ButtonSmallOpacityZoneMiddleLeft.OnLButtonUp( nFlags, Point );
	m_ButtonSmallOpacityZoneMiddleLeft.m_ToggleState = BUTTON_ON;		// Force the button to ON.  Prevent a toggle to OFF.
	m_ButtonSmallOpacityZoneMiddleLeft.m_IdleBkgColor = m_ButtonSmallOpacityZoneMiddleLeft.m_ActivatedBkgdColor;
	OnBnClickedButtonSmallOpacityZoneMiddleLeft( pNMHDR, pResult );

	m_ButtonSmallOpacityZoneLowerRight.OnLButtonUp( nFlags, Point );
	m_ButtonSmallOpacityZoneLowerRight.m_ToggleState = BUTTON_ON;		// Force the button to ON.  Prevent a toggle to OFF.
	m_ButtonSmallOpacityZoneLowerRight.m_IdleBkgColor = m_ButtonSmallOpacityZoneLowerRight.m_ActivatedBkgdColor;
	OnBnClickedButtonSmallOpacityZoneLowerRight( pNMHDR, pResult );

	m_ButtonSmallOpacityZoneLowerLeft.OnLButtonUp( nFlags, Point );
	m_ButtonSmallOpacityZoneLowerLeft.m_ToggleState = BUTTON_ON;		// Force the button to ON.  Prevent a toggle to OFF.
	m_ButtonSmallOpacityZoneLowerLeft.m_IdleBkgColor = m_ButtonSmallOpacityZoneLowerLeft.m_ActivatedBkgdColor;
	OnBnClickedButtonSmallOpacityZoneLowerLeft( pNMHDR, pResult );

	*pResult = 0;
}



void CAnalysisPage::OnBnClickedButtonSmallOpacityProfusion_0Minus( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityProfusion_0Minus.m_pGroup -> IsAnyButtonChecked() )
		m_StaticProfusion.HasBeenCompleted( TRUE );
	else
		m_StaticProfusion.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityProfusion_0Minus.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityProfusion_0Minus );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityProfusion_00( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityProfusion_00.m_pGroup -> IsAnyButtonChecked() )
		m_StaticProfusion.HasBeenCompleted( TRUE );
	else
		m_StaticProfusion.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityProfusion_00.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityProfusion_00 );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityProfusion_01( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityProfusion_01.m_pGroup -> IsAnyButtonChecked() )
		m_StaticProfusion.HasBeenCompleted( TRUE );
	else
		m_StaticProfusion.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityProfusion_01.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityProfusion_01 );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityProfusion_10( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityProfusion_10.m_pGroup -> IsAnyButtonChecked() )
		m_StaticProfusion.HasBeenCompleted( TRUE );
	else
		m_StaticProfusion.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityProfusion_10.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityProfusion_10 );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityProfusion_11( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityProfusion_11.m_pGroup -> IsAnyButtonChecked() )
		m_StaticProfusion.HasBeenCompleted( TRUE );
	else
		m_StaticProfusion.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityProfusion_11.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityProfusion_11 );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityProfusion_12( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityProfusion_12.m_pGroup -> IsAnyButtonChecked() )
		m_StaticProfusion.HasBeenCompleted( TRUE );
	else
		m_StaticProfusion.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityProfusion_12.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityProfusion_12 );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityProfusion_21( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityProfusion_21.m_pGroup -> IsAnyButtonChecked() )
		m_StaticProfusion.HasBeenCompleted( TRUE );
	else
		m_StaticProfusion.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityProfusion_21.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityProfusion_21 );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityProfusion_22( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityProfusion_22.m_pGroup -> IsAnyButtonChecked() )
		m_StaticProfusion.HasBeenCompleted( TRUE );
	else
		m_StaticProfusion.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityProfusion_22.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityProfusion_22 );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityProfusion_23( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityProfusion_23.m_pGroup -> IsAnyButtonChecked() )
		m_StaticProfusion.HasBeenCompleted( TRUE );
	else
		m_StaticProfusion.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityProfusion_23.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityProfusion_23 );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityProfusion_32( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityProfusion_32.m_pGroup -> IsAnyButtonChecked() )
		m_StaticProfusion.HasBeenCompleted( TRUE );
	else
		m_StaticProfusion.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityProfusion_32.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityProfusion_32 );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityProfusion_33( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityProfusion_33.m_pGroup -> IsAnyButtonChecked() )
		m_StaticProfusion.HasBeenCompleted( TRUE );
	else
		m_StaticProfusion.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityProfusion_33.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityProfusion_33 );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonSmallOpacityProfusion_3Plus( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonSmallOpacityProfusion_3Plus.m_pGroup -> IsAnyButtonChecked() )
		m_StaticProfusion.HasBeenCompleted( TRUE );
	else
		m_StaticProfusion.HasBeenCompleted( FALSE );
	SetSmallOpacityCompletion();
	m_ButtonSmallOpacityProfusion_3Plus.m_pGroup -> RespondToSelection( (void*)&m_ButtonSmallOpacityProfusion_3Plus );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}



void CAnalysisPage::OnBnClickedButtonLargeOpacitySize_0( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonLargeOpacitySize_0.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticSize.HasBeenCompleted( TRUE );
		m_LargeOpacitiesSubtitle.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticSize.HasBeenCompleted( FALSE );
		m_LargeOpacitiesSubtitle.HasBeenCompleted( FALSE );
		}
	m_ButtonLargeOpacitySize_0.m_pGroup -> RespondToSelection( (void*)&m_ButtonLargeOpacitySize_0 );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonLargeOpacitySize_A( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonLargeOpacitySize_A.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticSize.HasBeenCompleted( TRUE );
		m_LargeOpacitiesSubtitle.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticSize.HasBeenCompleted( FALSE );
		m_LargeOpacitiesSubtitle.HasBeenCompleted( FALSE );
		}
	m_ButtonLargeOpacitySize_A.m_pGroup -> RespondToSelection( (void*)&m_ButtonLargeOpacitySize_A );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonLargeOpacitySize_B( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonLargeOpacitySize_B.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticSize.HasBeenCompleted( TRUE );
		m_LargeOpacitiesSubtitle.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticSize.HasBeenCompleted( FALSE );
		m_LargeOpacitiesSubtitle.HasBeenCompleted( FALSE );
		}
	m_ButtonLargeOpacitySize_B.m_pGroup -> RespondToSelection( (void*)&m_ButtonLargeOpacitySize_B );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedButtonLargeOpacitySize_C( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonLargeOpacitySize_C.m_pGroup -> IsAnyButtonChecked() )
		{
		m_StaticSize.HasBeenCompleted( TRUE );
		m_LargeOpacitiesSubtitle.HasBeenCompleted( TRUE );
		}
	else
		{
		m_StaticSize.HasBeenCompleted( FALSE );
		m_LargeOpacitiesSubtitle.HasBeenCompleted( FALSE );
		}
	m_ButtonLargeOpacitySize_C.m_pGroup -> RespondToSelection( (void*)&m_ButtonLargeOpacitySize_C );
	UpdateParenchymalAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralAbnormalityButton( NMHDR *pNMHDR, LRESULT *pResult )
{
	CStudy			*pCurrentStudy;

	pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
	if ( pCurrentStudy != 0 )
		{
		pCurrentStudy -> m_nCurrentObjectID = m_PleuralAbnormalityButton.m_nObjectID;
		pCurrentStudy -> m_bStudyHasBeenEdited = TRUE;
		pCurrentStudy -> m_bPleuralAbnormalitiesVisited = TRUE;
		}
	UpdatePleuralAbnormalityPageStatus();
	SetImageQualityPageVisibility( CONTROL_INVISIBLE );
	SetParenchymalPageVisibility( CONTROL_INVISIBLE );
	SetPleuralPageVisibility( CONTROL_VISIBLE );
	SetOtherPageVisibility( CONTROL_INVISIBLE );
	Invalidate( TRUE );

	*pResult = 0;
}


void CAnalysisPage::SetPleuralPageVisibility( unsigned long Visibility )
{
	if ( Visibility == CONTROL_VISIBLE )
		{
		m_StaticPleuralAbnormalitiesTitle.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		m_AnyPleuralAbnormalities.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		m_PleuralYesNoButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
 		if ( m_ButtonPleuralYes.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
			{
			m_PleuralStaticTextGroup.SetGroupVisibility( CONTROL_VISIBLE );
			m_GroupButtonsPleuralSiteChestProfile.SetGroupVisibility( CONTROL_VISIBLE );
			m_GroupButtonsPleuralSiteChestFaceOn.SetGroupVisibility( CONTROL_VISIBLE );
			m_GroupButtonsPleuralSiteDiaphragm.SetGroupVisibility( CONTROL_VISIBLE );
			m_GroupButtonsPleuralSiteOther.SetGroupVisibility( CONTROL_VISIBLE );
			m_GroupButtonsCalcificationChestProfile.SetGroupVisibility( CONTROL_VISIBLE );
			m_GroupButtonsCalcificationChestFaceOn.SetGroupVisibility( CONTROL_VISIBLE );
			m_GroupButtonsCalcificationDiaphragm.SetGroupVisibility( CONTROL_VISIBLE );
			m_GroupButtonsCalcificationOther.SetGroupVisibility( CONTROL_VISIBLE );
			m_GroupButtonsPleuralExtentRight.SetGroupVisibility( CONTROL_VISIBLE );
			if ( m_ButtonPleuralExtentRight.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
				m_GroupButtonsPleuralExtentRightSize.SetGroupVisibility( CONTROL_VISIBLE );
			else
				m_GroupButtonsPleuralExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralExtentLeft.SetGroupVisibility( CONTROL_VISIBLE );
			if ( m_ButtonPleuralExtentLeft.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
				m_GroupButtonsPleuralExtentLeftSize.SetGroupVisibility( CONTROL_VISIBLE );
			else
				m_GroupButtonsPleuralExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralWidthRight.SetGroupVisibility( CONTROL_VISIBLE );
			if ( m_ButtonPleuralWidthRight.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
				m_GroupButtonsPleuralWidthRightSize.SetGroupVisibility( CONTROL_VISIBLE );
			else
				m_GroupButtonsPleuralWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralWidthLeft.SetGroupVisibility( CONTROL_VISIBLE );
			if ( m_ButtonPleuralWidthLeft.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
				m_GroupButtonsPleuralWidthLeftSize.SetGroupVisibility( CONTROL_VISIBLE );
			else
				m_GroupButtonsPleuralWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsAngleObliteration.SetGroupVisibility( CONTROL_VISIBLE );

			if ( m_ButtonAngleObliterationRight.m_ToggleState == BUTTON_ON || m_ButtonAngleObliterationLeft.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
				{
				m_PleuralThickeningStaticTextGroup.SetGroupVisibility( CONTROL_VISIBLE );
				m_GroupButtonsThickeningSiteChestProfile.SetGroupVisibility( CONTROL_VISIBLE );
				m_GroupButtonsThickeningSiteChestFaceOn.SetGroupVisibility( CONTROL_VISIBLE );
				m_GroupButtonsThickeningCalcificationChestProfile.SetGroupVisibility( CONTROL_VISIBLE );
				m_GroupButtonsThickeningCalcificationChestFaceOn.SetGroupVisibility( CONTROL_VISIBLE );
				m_GroupButtonsPleuralThickeningExtentRight.SetGroupVisibility( CONTROL_VISIBLE );
				if ( m_ButtonPleuralThickeningExtentRight.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
					m_GroupButtonsPleuralThickeningExtentRightSize.SetGroupVisibility( CONTROL_VISIBLE );
				else
					m_GroupButtonsPleuralThickeningExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsPleuralThickeningExtentLeft.SetGroupVisibility( CONTROL_VISIBLE );
				if ( m_ButtonPleuralThickeningExtentLeft.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
					m_GroupButtonsPleuralThickeningExtentLeftSize.SetGroupVisibility( CONTROL_VISIBLE );
				else
					m_GroupButtonsPleuralThickeningExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsPleuralThickeningWidthRight.SetGroupVisibility( CONTROL_VISIBLE );
				if ( m_ButtonPleuralThickeningWidthRight.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
					m_GroupButtonsPleuralThickeningWidthRightSize.SetGroupVisibility( CONTROL_VISIBLE );
				else
					m_GroupButtonsPleuralThickeningWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsPleuralThickeningWidthLeft.SetGroupVisibility( CONTROL_VISIBLE );
				if ( m_ButtonPleuralThickeningWidthLeft.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
					m_GroupButtonsPleuralThickeningWidthLeftSize.SetGroupVisibility( CONTROL_VISIBLE );
				else
					m_GroupButtonsPleuralThickeningWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
				}
			else
				{
				m_PleuralThickeningStaticTextGroup.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsThickeningSiteChestProfile.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsThickeningSiteChestFaceOn.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsThickeningCalcificationChestProfile.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsThickeningCalcificationChestFaceOn.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsPleuralThickeningExtentRight.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsPleuralThickeningExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsPleuralThickeningExtentLeft.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsPleuralThickeningExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsPleuralThickeningWidthRight.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsPleuralThickeningWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsPleuralThickeningWidthLeft.SetGroupVisibility( CONTROL_INVISIBLE );
				m_GroupButtonsPleuralThickeningWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
				}
			}
		else
			{
			m_PleuralStaticTextGroup.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralSiteChestProfile.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralSiteChestFaceOn.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralSiteDiaphragm.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralSiteOther.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsCalcificationChestProfile.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsCalcificationChestFaceOn.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsCalcificationDiaphragm.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsCalcificationOther.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralExtentRight.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralExtentLeft.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralWidthRight.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralWidthLeft.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsAngleObliteration.SetGroupVisibility( CONTROL_INVISIBLE );

			m_PleuralThickeningStaticTextGroup.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsThickeningSiteChestProfile.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsThickeningSiteChestFaceOn.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsThickeningCalcificationChestProfile.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsThickeningCalcificationChestFaceOn.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralThickeningExtentRight.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralThickeningExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralThickeningExtentLeft.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralThickeningExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralThickeningWidthRight.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralThickeningWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralThickeningWidthLeft.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralThickeningWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}
		}
	else if ( Visibility == CONTROL_INVISIBLE )
		{
		m_StaticPleuralAbnormalitiesTitle.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		m_AnyPleuralAbnormalities.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		m_PleuralYesNoButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_PleuralStaticTextGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralSiteChestProfile.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralSiteChestFaceOn.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralSiteDiaphragm.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralSiteOther.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsCalcificationChestProfile.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsCalcificationChestFaceOn.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsCalcificationDiaphragm.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsCalcificationOther.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralExtentRight.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralExtentLeft.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralWidthRight.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralWidthLeft.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsAngleObliteration.SetGroupVisibility( CONTROL_INVISIBLE );

		m_PleuralThickeningStaticTextGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsThickeningSiteChestProfile.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsThickeningSiteChestFaceOn.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsThickeningCalcificationChestProfile.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsThickeningCalcificationChestFaceOn.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralThickeningExtentRight.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralThickeningExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralThickeningExtentLeft.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralThickeningExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralThickeningWidthRight.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralThickeningWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralThickeningWidthLeft.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonsPleuralThickeningWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
		}
}


void CAnalysisPage::UpdatePleuralAbnormalityPageStatus()
{
	CStudy			*pCurrentStudy;

	pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
	if ( m_ButtonPleuralNo.m_ToggleState == BUTTON_ON )
		{
		m_bPleuralAbnormalityPageIsCompleted = TRUE;
		m_GroupButtonsPleuralSiteChestProfile.InitializeMembers();
		m_GroupButtonsPleuralSiteChestFaceOn.InitializeMembers();
		m_GroupButtonsPleuralSiteDiaphragm.InitializeMembers();
		m_GroupButtonsPleuralSiteOther.InitializeMembers();
		m_GroupButtonsCalcificationChestProfile.InitializeMembers();
		m_GroupButtonsCalcificationChestFaceOn.InitializeMembers();
		m_GroupButtonsCalcificationDiaphragm.InitializeMembers();
		m_GroupButtonsCalcificationOther.InitializeMembers();
		m_GroupButtonsPleuralExtentRight.InitializeMembers();
		m_GroupButtonsPleuralExtentRightSize.InitializeMembers();
		m_GroupButtonsPleuralExtentLeft.InitializeMembers();
		m_GroupButtonsPleuralExtentLeftSize.InitializeMembers();
		m_GroupButtonsPleuralWidthRight.InitializeMembers();
		m_GroupButtonsPleuralWidthRightSize.InitializeMembers();
		m_GroupButtonsPleuralWidthLeft.InitializeMembers();
		m_GroupButtonsPleuralWidthLeftSize.InitializeMembers();
		m_GroupButtonsAngleObliteration.InitializeMembers();

		m_GroupButtonsThickeningSiteChestProfile.InitializeMembers();
		m_GroupButtonsThickeningCalcificationChestProfile.InitializeMembers();
		m_GroupButtonsThickeningSiteChestFaceOn.InitializeMembers();
		m_GroupButtonsThickeningCalcificationChestFaceOn.InitializeMembers();
		m_GroupButtonsPleuralThickeningExtentRight.InitializeMembers();
		m_GroupButtonsPleuralThickeningExtentRightSize.InitializeMembers();
		m_GroupButtonsPleuralThickeningExtentLeft.InitializeMembers();
		m_GroupButtonsPleuralThickeningExtentLeftSize.InitializeMembers();
		m_GroupButtonsPleuralThickeningWidthRight.InitializeMembers();
		m_GroupButtonsPleuralThickeningWidthRightSize.InitializeMembers();
		m_GroupButtonsPleuralThickeningWidthLeft.InitializeMembers();
		m_GroupButtonsPleuralThickeningWidthLeftSize.InitializeMembers();
		}
	else if ( m_ButtonPleuralYes.m_ToggleState == BUTTON_ON )
		{
		m_bPleuralAbnormalityPageIsCompleted = ( m_GroupButtonsPleuralSiteChestProfile.IsAnyButtonChecked() &&
												m_GroupButtonsPleuralSiteChestFaceOn.IsAnyButtonChecked() &&
												m_GroupButtonsPleuralSiteDiaphragm.IsAnyButtonChecked() &&
												m_GroupButtonsPleuralSiteOther.IsAnyButtonChecked() &&
												m_GroupButtonsCalcificationChestProfile.IsAnyButtonChecked() &&
												m_GroupButtonsCalcificationChestFaceOn.IsAnyButtonChecked() &&
												m_GroupButtonsCalcificationDiaphragm.IsAnyButtonChecked() &&
												m_GroupButtonsCalcificationOther.IsAnyButtonChecked() &&
												( m_ButtonPleuralExtentNoneOnRight.m_ToggleState == BUTTON_ON ||
													( m_ButtonPleuralExtentRight.m_ToggleState == BUTTON_ON &&
														m_GroupButtonsPleuralExtentRightSize.IsAnyButtonChecked() ) ) &&
												( m_ButtonPleuralExtentNoneOnLeft.m_ToggleState == BUTTON_ON ||
													( m_ButtonPleuralExtentLeft.m_ToggleState == BUTTON_ON &&
														m_GroupButtonsPleuralExtentLeftSize.IsAnyButtonChecked() ) ) &&
												( m_ButtonPleuralWidthNoneOnRight.m_ToggleState == BUTTON_ON ||
													( m_ButtonPleuralWidthRight.m_ToggleState == BUTTON_ON &&
														m_GroupButtonsPleuralWidthRightSize.IsAnyButtonChecked() ) ) &&
												( m_ButtonPleuralWidthNoneOnLeft.m_ToggleState == BUTTON_ON ||
													( m_ButtonPleuralWidthLeft.m_ToggleState == BUTTON_ON &&
														m_GroupButtonsPleuralWidthLeftSize.IsAnyButtonChecked() ) ) &&
												( m_ButtonAngleObliterationNone.m_ToggleState == BUTTON_ON ||
													(
													m_GroupButtonsThickeningSiteChestProfile.IsAnyButtonChecked() &&
													m_GroupButtonsThickeningCalcificationChestProfile.IsAnyButtonChecked() &&
													m_GroupButtonsThickeningSiteChestFaceOn.IsAnyButtonChecked() &&
													m_GroupButtonsThickeningCalcificationChestFaceOn.IsAnyButtonChecked() &&
													( m_ButtonPleuralThickeningExtentNoneOnRight.m_ToggleState == BUTTON_ON ||
														( m_ButtonPleuralThickeningExtentRight.m_ToggleState == BUTTON_ON &&
															m_GroupButtonsPleuralThickeningExtentRightSize.IsAnyButtonChecked() ) ) &&
													( m_ButtonPleuralThickeningExtentNoneOnLeft.m_ToggleState == BUTTON_ON ||
														( m_ButtonPleuralThickeningExtentLeft.m_ToggleState == BUTTON_ON &&
															m_GroupButtonsPleuralThickeningExtentLeftSize.IsAnyButtonChecked() ) ) &&

													( m_ButtonPleuralThickeningWidthNoneOnRight.m_ToggleState == BUTTON_ON ||
														( m_ButtonPleuralThickeningWidthRight.m_ToggleState == BUTTON_ON &&
															m_GroupButtonsPleuralThickeningWidthRightSize.IsAnyButtonChecked() ) ) &&
													( m_ButtonPleuralThickeningWidthNoneOnLeft.m_ToggleState == BUTTON_ON ||
														( m_ButtonPleuralThickeningWidthLeft.m_ToggleState == BUTTON_ON &&
															m_GroupButtonsPleuralThickeningWidthLeftSize.IsAnyButtonChecked() ) )
													) )
												);
		UpdateApproveStudyButtonStatus();
		}
	else
		m_bPleuralAbnormalityPageIsCompleted = FALSE;
	if ( m_bPleuralAbnormalityPageIsCompleted )
		{
		m_PleuralAbnormalityButton.m_SemanticState = BUTTON_COMPLETED;
		UpdateApproveStudyButtonStatus();
		}
	else if ( pCurrentStudy != 0 && pCurrentStudy -> m_bPleuralAbnormalitiesVisited )
		m_PleuralAbnormalityButton.m_SemanticState = BUTTON_TOUCHED;
	Invalidate( TRUE );
}


void CAnalysisPage::OnBnClickedPleuralYes( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonPleuralYes.m_ToggleState == BUTTON_ON )
		m_AnyPleuralAbnormalities.HasBeenCompleted( TRUE );
	else
		m_AnyPleuralAbnormalities.HasBeenCompleted( FALSE );
	m_ButtonPleuralYes.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralYes );
	SetPleuralPageVisibility( CONTROL_VISIBLE );
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralNo( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonPleuralNo.m_ToggleState == BUTTON_ON )
		m_AnyPleuralAbnormalities.HasBeenCompleted( TRUE );
	else
		m_AnyPleuralAbnormalities.HasBeenCompleted( FALSE );
	m_ButtonPleuralNo.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralNo );
	SetPleuralPageVisibility( CONTROL_VISIBLE );
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::FreezeButton( TomButton *pButton )
{
	pButton -> m_ToggleState = BUTTON_OFF;
	pButton -> m_ControlStyle |= BUTTON_FROZEN;
	pButton -> m_IdleBkgColor = pButton -> m_OriginalIdleBkgColor;
}


void CAnalysisPage::AdjustChestProfileButtonStates()
{
	if ( m_ButtonPleuralSiteChestProfileNone.m_ToggleState == BUTTON_ON )
		{
		FreezeButton( &m_ButtonCalcificationChestProfileRight );
		FreezeButton( &m_ButtonCalcificationChestProfileLeft );
		m_ButtonCalcificationChestProfileNone.m_ToggleState = BUTTON_ON;
		}
	else if ( m_ButtonPleuralSiteChestProfileRight.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteChestProfileLeft.m_ToggleState == BUTTON_OFF )
		{
		m_ButtonCalcificationChestProfileRight.m_ControlStyle &= ~BUTTON_FROZEN;
		FreezeButton( &m_ButtonCalcificationChestProfileLeft );
		m_ButtonCalcificationChestProfileNone.m_ToggleState = BUTTON_OFF;
		}
	else if ( m_ButtonPleuralSiteChestProfileLeft.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteChestProfileRight.m_ToggleState == BUTTON_OFF )
		{
		FreezeButton( &m_ButtonCalcificationChestProfileRight );
		m_ButtonCalcificationChestProfileLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationChestProfileNone.m_ToggleState = BUTTON_OFF;
		}
	else if ( m_ButtonPleuralSiteChestProfileLeft.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteChestProfileRight.m_ToggleState == BUTTON_ON )
		{
		m_ButtonCalcificationChestProfileRight.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationChestProfileLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationChestProfileNone.m_ToggleState = BUTTON_OFF;
		}
	else	// if no button is on, enable everything.
		{
		m_ButtonCalcificationChestProfileRight.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationChestProfileLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		}
	m_ButtonCalcificationChestProfileNone.SetCheckBoxColor();
	SetPleuralExtentButtonStates();
	SetPleuralWidthButtonStates();
	UpdatePleuralAbnormalityPageStatus();
}


void CAnalysisPage::OnBnClickedPleuralSiteChestProfileNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralSiteChestProfileNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralSiteChestProfileNone );
	SetStatusOfStaticPleuralPlaquesChestProfile();
	AdjustChestProfileButtonStates();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralSiteChestProfileRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralSiteChestProfileRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralSiteChestProfileRight );
	SetStatusOfStaticPleuralPlaquesChestProfile();
	AdjustChestProfileButtonStates();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralSiteChestProfileLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralSiteChestProfileLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralSiteChestProfileLeft );
	SetStatusOfStaticPleuralPlaquesChestProfile();
	AdjustChestProfileButtonStates();

	*pResult = 0;
}


void CAnalysisPage::AdjustChestFaceOnButtonStates()
{
	if ( m_ButtonPleuralSiteChestFaceOnNone.m_ToggleState == BUTTON_ON )
		{
		FreezeButton( &m_ButtonCalcificationChestFaceOnRight );
		FreezeButton( &m_ButtonCalcificationChestFaceOnLeft );
		m_ButtonCalcificationChestFaceOnNone.m_ToggleState = BUTTON_ON;
		}
	else if ( m_ButtonPleuralSiteChestFaceOnRight.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteChestFaceOnLeft.m_ToggleState == BUTTON_OFF )
		{
		m_ButtonCalcificationChestFaceOnRight.m_ControlStyle &= ~BUTTON_FROZEN;
		FreezeButton( &m_ButtonCalcificationChestFaceOnLeft );
		m_ButtonCalcificationChestFaceOnNone.m_ToggleState = BUTTON_OFF;
		}
	else if ( m_ButtonPleuralSiteChestFaceOnLeft.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteChestFaceOnRight.m_ToggleState == BUTTON_OFF )
		{
		FreezeButton( &m_ButtonCalcificationChestFaceOnRight );
		m_ButtonCalcificationChestFaceOnLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationChestFaceOnNone.m_ToggleState = BUTTON_OFF;
		}
	else if ( m_ButtonPleuralSiteChestFaceOnLeft.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteChestFaceOnRight.m_ToggleState == BUTTON_ON )
		{
		m_ButtonCalcificationChestFaceOnRight.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationChestFaceOnLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationChestFaceOnNone.m_ToggleState = BUTTON_OFF;
		}
	else	// if no button is on, enable everything.
		{
		m_ButtonCalcificationChestFaceOnRight.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationChestFaceOnLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		}
	m_ButtonCalcificationChestFaceOnNone.SetCheckBoxColor();
	SetPleuralExtentButtonStates();
	UpdatePleuralAbnormalityPageStatus();
}


void CAnalysisPage::SetPleuralExtentButtonStates()
{
	// Default the buttons in this group to unfrozen.
	m_ButtonPleuralExtentNoneOnRight.m_ControlStyle &= ~BUTTON_FROZEN;
	m_ButtonPleuralExtentRight.m_ControlStyle &= ~BUTTON_FROZEN;
	m_ButtonPleuralExtentNoneOnLeft.m_ControlStyle &= ~BUTTON_FROZEN;
	m_ButtonPleuralExtentLeft.m_ControlStyle &= ~BUTTON_FROZEN;
	// Freeze appropriate buttons based on the chest profile and face-on button status.
	if ( m_ButtonPleuralSiteChestProfileNone.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteChestFaceOnNone.m_ToggleState == BUTTON_ON )
		{
		FreezeButton( &m_ButtonPleuralExtentRight );
		FreezeButton( &m_ButtonPleuralExtentLeft );
		m_ButtonPleuralExtentNoneOnRight.m_ToggleState = BUTTON_ON;
		m_ButtonPleuralExtentNoneOnLeft.m_ToggleState = BUTTON_ON;
		if ( !bTurnOffQualityControl )
			{
			m_GroupButtonsPleuralExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}
		}
	else
		{
		if ( m_ButtonPleuralSiteChestProfileRight.m_ToggleState == BUTTON_ON ||
				m_ButtonPleuralSiteChestFaceOnRight.m_ToggleState == BUTTON_ON )
			{
			FreezeButton( &m_ButtonPleuralExtentNoneOnRight );
			m_ButtonPleuralExtentNoneOnRight.m_ToggleState = BUTTON_OFF;
			}
		else if ( m_ButtonPleuralSiteChestProfileRight.m_ToggleState == BUTTON_OFF &&
				m_ButtonPleuralSiteChestFaceOnRight.m_ToggleState == BUTTON_OFF )
			{
			m_GroupButtonsPleuralExtentRight.InitializeMembers();
			if ( !bTurnOffQualityControl )
				m_GroupButtonsPleuralExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}
		if ( m_ButtonPleuralSiteChestProfileLeft.m_ToggleState == BUTTON_ON ||
				m_ButtonPleuralSiteChestFaceOnLeft.m_ToggleState == BUTTON_ON )
			{
			FreezeButton( &m_ButtonPleuralExtentNoneOnLeft );
			m_ButtonPleuralExtentNoneOnLeft.m_ToggleState = BUTTON_OFF;
			}
		else if ( m_ButtonPleuralSiteChestProfileLeft.m_ToggleState == BUTTON_OFF &&
				m_ButtonPleuralSiteChestFaceOnLeft.m_ToggleState == BUTTON_OFF )
			{
			m_GroupButtonsPleuralExtentLeft.InitializeMembers();
			if ( !bTurnOffQualityControl )
				m_GroupButtonsPleuralExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}
		}
	if ( m_ButtonPleuralExtentNoneOnRight.m_SemanticState != BUTTON_UNTOUCHED )
		m_ButtonPleuralExtentNoneOnRight.SetCheckBoxColor();
	if ( m_ButtonPleuralExtentNoneOnLeft.m_SemanticState != BUTTON_UNTOUCHED )
		m_ButtonPleuralExtentNoneOnLeft.SetCheckBoxColor();
}


void CAnalysisPage::SetPleuralWidthButtonStates()
{
	m_ButtonPleuralWidthNoneOnRight.m_ControlStyle &= ~BUTTON_FROZEN;
	m_ButtonPleuralWidthRight.m_ControlStyle &= ~BUTTON_FROZEN;
	m_ButtonPleuralWidthNoneOnLeft.m_ControlStyle &= ~BUTTON_FROZEN;
	m_ButtonPleuralWidthLeft.m_ControlStyle &= ~BUTTON_FROZEN;
	if ( m_ButtonPleuralSiteChestProfileNone.m_ToggleState == BUTTON_ON )
		{
		FreezeButton( &m_ButtonPleuralWidthRight );
		FreezeButton( &m_ButtonPleuralWidthLeft );
		m_ButtonPleuralWidthNoneOnRight.m_ToggleState = BUTTON_ON;
		m_ButtonPleuralWidthNoneOnLeft.m_ToggleState = BUTTON_ON;
		if ( !bTurnOffQualityControl )
			{
			m_GroupButtonsPleuralWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}
		}
	else
		{
		if ( m_ButtonPleuralSiteChestProfileRight.m_ToggleState == BUTTON_ON )
			{
			FreezeButton( &m_ButtonPleuralWidthNoneOnRight );
			m_ButtonPleuralWidthNoneOnRight.m_ToggleState = BUTTON_OFF;
			}
		else
			{
			m_GroupButtonsPleuralWidthRight.InitializeMembers();
			if ( !bTurnOffQualityControl )
				m_GroupButtonsPleuralWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}

		if ( m_ButtonPleuralSiteChestProfileLeft.m_ToggleState == BUTTON_ON )
			{
			FreezeButton( &m_ButtonPleuralWidthNoneOnLeft );
			m_ButtonPleuralWidthNoneOnLeft.m_ToggleState = BUTTON_OFF;
			}
		else
			{
			m_GroupButtonsPleuralWidthLeft.InitializeMembers();
			if ( !bTurnOffQualityControl )
				m_GroupButtonsPleuralWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}
		}
	if ( m_ButtonPleuralWidthNoneOnRight.m_SemanticState != BUTTON_UNTOUCHED )
		m_ButtonPleuralWidthNoneOnRight.SetCheckBoxColor();
	if ( m_ButtonPleuralWidthNoneOnLeft.m_SemanticState != BUTTON_UNTOUCHED )
		m_ButtonPleuralWidthNoneOnLeft.SetCheckBoxColor();
}


void CAnalysisPage::OnBnClickedPleuralSiteChestFaceOnNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralSiteChestFaceOnNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralSiteChestFaceOnNone );
	SetStatusOfStaticPleuralPlaquesChestFaceOn();
	AdjustChestFaceOnButtonStates();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralSiteChestFaceOnRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralSiteChestFaceOnRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralSiteChestFaceOnRight );
	SetStatusOfStaticPleuralPlaquesChestFaceOn();
	AdjustChestFaceOnButtonStates();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralSiteChestFaceOnLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralSiteChestFaceOnLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralSiteChestFaceOnLeft );
	SetStatusOfStaticPleuralPlaquesChestFaceOn();
	AdjustChestFaceOnButtonStates();

	*pResult = 0;
}


void CAnalysisPage::AdjustChestDiaphragmButtonStates()
{
	if ( m_ButtonPleuralSiteDiaphragmNone.m_ToggleState == BUTTON_ON )
		{
		FreezeButton( &m_ButtonCalcificationDiaphragmRight );
		FreezeButton( &m_ButtonCalcificationDiaphragmLeft );
		m_ButtonCalcificationDiaphragmNone.m_ToggleState = BUTTON_ON;
		}
	else if ( m_ButtonPleuralSiteDiaphragmRight.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteDiaphragmLeft.m_ToggleState == BUTTON_OFF )
		{
		m_ButtonCalcificationDiaphragmRight.m_ControlStyle &= ~BUTTON_FROZEN;
		FreezeButton( &m_ButtonCalcificationDiaphragmLeft );
		m_ButtonCalcificationDiaphragmNone.m_ToggleState = BUTTON_OFF;
		}
	else if ( m_ButtonPleuralSiteDiaphragmLeft.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteDiaphragmRight.m_ToggleState == BUTTON_OFF )
		{
		FreezeButton( &m_ButtonCalcificationDiaphragmRight );
		m_ButtonCalcificationDiaphragmLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationDiaphragmNone.m_ToggleState = BUTTON_OFF;
		}
	else if ( m_ButtonPleuralSiteDiaphragmLeft.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteDiaphragmRight.m_ToggleState == BUTTON_ON )
		{
		m_ButtonCalcificationDiaphragmRight.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationDiaphragmLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationDiaphragmNone.m_ToggleState = BUTTON_OFF;
		}
	else	// if no button is on, enable everything.
		{
		m_ButtonCalcificationDiaphragmRight.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationDiaphragmLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		}
	m_ButtonCalcificationDiaphragmNone.SetCheckBoxColor();
	UpdatePleuralAbnormalityPageStatus();
}


void CAnalysisPage::OnBnClickedPleuralSiteDiaphragmNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralSiteDiaphragmNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralSiteDiaphragmNone );
	SetStatusOfStaticPleuralPlaquesDiaphragm();
	AdjustChestDiaphragmButtonStates();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralSiteDiaphragmRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralSiteDiaphragmRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralSiteDiaphragmRight );
	SetStatusOfStaticPleuralPlaquesDiaphragm();
	AdjustChestDiaphragmButtonStates();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralSiteDiaphragmLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralSiteDiaphragmLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralSiteDiaphragmLeft );
	SetStatusOfStaticPleuralPlaquesDiaphragm();
	AdjustChestDiaphragmButtonStates();

	*pResult = 0;
}


void CAnalysisPage::AdjustPleuralSiteOtherButtonStates()
{
	if ( m_ButtonPleuralSiteOtherNone.m_ToggleState == BUTTON_ON )
		{
		FreezeButton( &m_ButtonCalcificationOtherRight );
		FreezeButton( &m_ButtonCalcificationOtherLeft );
		m_ButtonCalcificationOtherNone.m_ToggleState = BUTTON_ON;
		}
	else if ( m_ButtonPleuralSiteOtherRight.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteOtherLeft.m_ToggleState == BUTTON_OFF )
		{
		m_ButtonCalcificationOtherRight.m_ControlStyle &= ~BUTTON_FROZEN;
		FreezeButton( &m_ButtonCalcificationOtherLeft );
		m_ButtonCalcificationOtherNone.m_ToggleState = BUTTON_OFF;
		}
	else if ( m_ButtonPleuralSiteOtherLeft.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteOtherRight.m_ToggleState == BUTTON_OFF )
		{
		FreezeButton( &m_ButtonCalcificationOtherRight );
		m_ButtonCalcificationOtherLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationOtherNone.m_ToggleState = BUTTON_OFF;
		}
	else if ( m_ButtonPleuralSiteOtherLeft.m_ToggleState == BUTTON_ON &&
				m_ButtonPleuralSiteOtherRight.m_ToggleState == BUTTON_ON )
		{
		m_ButtonCalcificationOtherRight.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationOtherLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationOtherNone.m_ToggleState = BUTTON_OFF;
		}
	else	// if no button is on, enable everything.
		{
		m_ButtonCalcificationOtherRight.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonCalcificationOtherLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		}
	m_ButtonCalcificationOtherNone.SetCheckBoxColor();
	UpdatePleuralAbnormalityPageStatus();
}


void CAnalysisPage::OnBnClickedPleuralSiteOtherNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralSiteOtherNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralSiteOtherNone );
	SetStatusOfStaticPleuralPlaquesOther();
	AdjustPleuralSiteOtherButtonStates();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralSiteOtherRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralSiteOtherRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralSiteOtherRight );
	SetStatusOfStaticPleuralPlaquesOther();
	AdjustPleuralSiteOtherButtonStates();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralSiteOtherLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralSiteOtherLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralSiteOtherLeft );
	SetStatusOfStaticPleuralPlaquesOther();
	AdjustPleuralSiteOtherButtonStates();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCalcificationChestProfileNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCalcificationChestProfileNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonCalcificationChestProfileNone );
	SetStatusOfStaticPleuralPlaquesChestProfile();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCalcificationChestProfileRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCalcificationChestProfileRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonCalcificationChestProfileRight );
	SetStatusOfStaticPleuralPlaquesChestProfile();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCalcificationChestProfileLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCalcificationChestProfileLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonCalcificationChestProfileLeft );
	SetStatusOfStaticPleuralPlaquesChestProfile();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCalcificationChestFaceOnNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCalcificationChestFaceOnNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonCalcificationChestFaceOnNone );
	SetStatusOfStaticPleuralPlaquesChestFaceOn();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCalcificationChestFaceOnRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCalcificationChestFaceOnRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonCalcificationChestFaceOnRight );
	SetStatusOfStaticPleuralPlaquesChestFaceOn();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCalcificationChestFaceOnLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCalcificationChestFaceOnLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonCalcificationChestFaceOnLeft );
	SetStatusOfStaticPleuralPlaquesChestFaceOn();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCalcificationDiaphragmNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCalcificationDiaphragmNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonCalcificationDiaphragmNone );
	SetStatusOfStaticPleuralPlaquesDiaphragm();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCalcificationDiaphragmRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCalcificationDiaphragmRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonCalcificationDiaphragmRight );
	SetStatusOfStaticPleuralPlaquesDiaphragm();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCalcificationDiaphragmLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCalcificationDiaphragmLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonCalcificationDiaphragmLeft );
	SetStatusOfStaticPleuralPlaquesDiaphragm();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCalcificationOtherNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCalcificationOtherNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonCalcificationOtherNone );
	SetStatusOfStaticPleuralPlaquesOther();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCalcificationOtherRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCalcificationOtherRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonCalcificationOtherRight );
	SetStatusOfStaticPleuralPlaquesOther();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCalcificationOtherLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCalcificationOtherLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonCalcificationOtherLeft );
	SetStatusOfStaticPleuralPlaquesOther();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}



void CAnalysisPage::OnBnClickedPleuralExtentNoneOnRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_GroupButtonsPleuralExtentRightSize.InitializeMembers();
	m_ButtonPleuralExtentNoneOnRight.m_SemanticState = BUTTON_TOUCHED;
	m_ButtonPleuralExtentNoneOnRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralExtentNoneOnRight );
	if ( !bTurnOffQualityControl )
		m_GroupButtonsPleuralExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralExtentRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralExtentRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralExtentRight );
	if ( m_ButtonPleuralExtentRight.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
		m_GroupButtonsPleuralExtentRightSize.SetGroupVisibility( CONTROL_VISIBLE );
	else
		m_GroupButtonsPleuralExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralExtentRightSize1( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralExtentRightSize1.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralExtentRightSize1 );
	SetStatusOfStaticPleuralExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralExtentRightSize2( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralExtentRightSize2.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralExtentRightSize2 );
	SetStatusOfStaticPleuralExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralExtentRightSize3( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralExtentRightSize3.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralExtentRightSize3 );
	SetStatusOfStaticPleuralExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralExtentNoneOnLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_GroupButtonsPleuralExtentLeftSize.InitializeMembers();
	m_ButtonPleuralExtentNoneOnLeft.m_SemanticState = BUTTON_TOUCHED;
	m_ButtonPleuralExtentNoneOnLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralExtentNoneOnLeft );
	if ( !bTurnOffQualityControl )
		m_GroupButtonsPleuralExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralExtentLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralExtentLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralExtentLeft );
	if ( m_ButtonPleuralExtentLeft.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
		m_GroupButtonsPleuralExtentLeftSize.SetGroupVisibility( CONTROL_VISIBLE );
	else
		m_GroupButtonsPleuralExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralExtentLeftSize1( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralExtentLeftSize1.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralExtentLeftSize1 );
	SetStatusOfStaticPleuralExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralExtentLeftSize2( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralExtentLeftSize2.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralExtentLeftSize2 );
	SetStatusOfStaticPleuralExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralExtentLeftSize3( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralExtentLeftSize3.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralExtentLeftSize3 );
	SetStatusOfStaticPleuralExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}



void CAnalysisPage::OnBnClickedPleuralWidthNoneOnRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_GroupButtonsPleuralWidthRightSize.InitializeMembers();
	m_ButtonPleuralWidthNoneOnRight.m_SemanticState = BUTTON_TOUCHED;
	m_ButtonPleuralWidthNoneOnRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralWidthNoneOnRight );
	if ( !bTurnOffQualityControl )
		m_GroupButtonsPleuralWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralWidthRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralWidthRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralWidthRight );
	if ( m_ButtonPleuralWidthRight.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
		m_GroupButtonsPleuralWidthRightSize.SetGroupVisibility( CONTROL_VISIBLE );
	else
		m_GroupButtonsPleuralWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralWidthRightSize1( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralWidthRightSize1.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralWidthRightSize1 );
	SetStatusOfStaticPleuralWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralWidthRightSize2( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralWidthRightSize2.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralWidthRightSize2 );
	SetStatusOfStaticPleuralWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralWidthRightSize3( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralWidthRightSize3.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralWidthRightSize3 );
	SetStatusOfStaticPleuralWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralWidthNoneOnLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_GroupButtonsPleuralWidthLeftSize.InitializeMembers();
	m_ButtonPleuralWidthNoneOnLeft.m_SemanticState = BUTTON_TOUCHED;
	m_ButtonPleuralWidthNoneOnLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralWidthNoneOnLeft );
	if ( !bTurnOffQualityControl )
		m_GroupButtonsPleuralWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralWidthLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralWidthLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralWidthLeft );
	if ( m_ButtonPleuralWidthLeft.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
		m_GroupButtonsPleuralWidthLeftSize.SetGroupVisibility( CONTROL_VISIBLE );
	else
		m_GroupButtonsPleuralWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralWidthLeftSize1( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralWidthLeftSize1.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralWidthLeftSize1 );
	SetStatusOfStaticPleuralWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralWidthLeftSize2( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralWidthLeftSize2.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralWidthLeftSize2 );
	SetStatusOfStaticPleuralWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralWidthLeftSize3( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralWidthLeftSize3.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralWidthLeftSize3 );
	SetStatusOfStaticPleuralWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedAngleObliterationNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonAngleObliterationNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonAngleObliterationNone );
	if ( m_ButtonAngleObliterationNone.m_pGroup -> IsAnyButtonChecked() )
		{
		m_AngleObliterationSubtitle.HasBeenCompleted( TRUE );
		m_GroupButtonsThickeningSiteChestProfile.InitializeMembers();
		m_GroupButtonsThickeningCalcificationChestProfile.InitializeMembers();
		m_GroupButtonsThickeningSiteChestFaceOn.InitializeMembers();
		m_GroupButtonsThickeningCalcificationChestFaceOn.InitializeMembers();
		m_GroupButtonsPleuralThickeningExtentRight.InitializeMembers();
		m_GroupButtonsPleuralThickeningExtentRightSize.InitializeMembers();
		m_GroupButtonsPleuralThickeningExtentLeft.InitializeMembers();
		m_GroupButtonsPleuralThickeningExtentLeftSize.InitializeMembers();
		m_GroupButtonsPleuralThickeningWidthRight.InitializeMembers();
		m_GroupButtonsPleuralThickeningWidthRightSize.InitializeMembers();
		m_GroupButtonsPleuralThickeningWidthLeft.InitializeMembers();
		m_GroupButtonsPleuralThickeningWidthLeftSize.InitializeMembers();
		}
	else
		m_AngleObliterationSubtitle.HasBeenCompleted( FALSE );
	SetPleuralPageVisibility( CONTROL_VISIBLE );
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedAngleObliterationRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonAngleObliterationRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonAngleObliterationRight );
	if ( m_ButtonAngleObliterationRight.m_pGroup -> IsAnyButtonChecked() )
		m_AngleObliterationSubtitle.HasBeenCompleted( TRUE );
	else
		m_AngleObliterationSubtitle.HasBeenCompleted( FALSE );
	SetPleuralPageVisibility( CONTROL_VISIBLE );
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedAngleObliterationLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonAngleObliterationLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonAngleObliterationLeft );
	if ( m_ButtonAngleObliterationLeft.m_pGroup -> IsAnyButtonChecked() )
		m_AngleObliterationSubtitle.HasBeenCompleted( TRUE );
	else
		m_AngleObliterationSubtitle.HasBeenCompleted( FALSE );
	SetPleuralPageVisibility( CONTROL_VISIBLE );
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::AdjustChestThickeningProfileButtonStates()
{
	if ( m_ButtonThickeningSiteChestProfileNone.m_ToggleState == BUTTON_ON )
		{
		FreezeButton( &m_ButtonThickeningCalcificationChestProfileRight );
		FreezeButton( &m_ButtonThickeningCalcificationChestProfileLeft );
		m_ButtonThickeningCalcificationChestProfileNone.m_ToggleState = BUTTON_ON;
		}
	else if ( m_ButtonThickeningSiteChestProfileRight.m_ToggleState == BUTTON_ON &&
				m_ButtonThickeningSiteChestProfileLeft.m_ToggleState == BUTTON_OFF )
		{
		m_ButtonThickeningCalcificationChestProfileRight.m_ControlStyle &= ~BUTTON_FROZEN;
		FreezeButton( &m_ButtonThickeningCalcificationChestProfileLeft );
		m_ButtonThickeningCalcificationChestProfileNone.m_ToggleState = BUTTON_OFF;
		}
	else if ( m_ButtonThickeningSiteChestProfileLeft.m_ToggleState == BUTTON_ON &&
				m_ButtonThickeningSiteChestProfileRight.m_ToggleState == BUTTON_OFF )
		{
		FreezeButton( &m_ButtonThickeningCalcificationChestProfileRight );
		m_ButtonThickeningCalcificationChestProfileLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonThickeningCalcificationChestProfileNone.m_ToggleState = BUTTON_OFF;
		}
	else if ( m_ButtonThickeningSiteChestProfileLeft.m_ToggleState == BUTTON_ON &&
				m_ButtonThickeningSiteChestProfileRight.m_ToggleState == BUTTON_ON )
		{
		m_ButtonThickeningCalcificationChestProfileRight.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonThickeningCalcificationChestProfileLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonThickeningCalcificationChestProfileNone.m_ToggleState = BUTTON_OFF;
		}
	else	// if no button is on, enable everything.
		{
		m_ButtonThickeningCalcificationChestProfileRight.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonThickeningCalcificationChestProfileLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		}
	m_ButtonThickeningCalcificationChestProfileNone.SetCheckBoxColor();
	SetPleuralThickeningExtentButtonStates();
	SetPleuralThickeningWidthButtonStates();
}


void CAnalysisPage::OnBnClickedThickeningSiteChestProfileNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonThickeningSiteChestProfileNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonThickeningSiteChestProfileNone );
	SetStatusOfStaticPleuralThickeningChestProfile();
	AdjustChestThickeningProfileButtonStates();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedThickeningSiteChestProfileRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonThickeningSiteChestProfileRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonThickeningSiteChestProfileRight );
	SetStatusOfStaticPleuralThickeningChestProfile();
	AdjustChestThickeningProfileButtonStates();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}



void CAnalysisPage::OnBnClickedThickeningSiteChestProfileLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonThickeningSiteChestProfileLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonThickeningSiteChestProfileLeft );
	SetStatusOfStaticPleuralThickeningChestProfile();
	AdjustChestThickeningProfileButtonStates();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::AdjustChestThickeningFaceOnButtonStates()
{
	if ( m_ButtonThickeningSiteChestFaceOnNone.m_ToggleState == BUTTON_ON )
		{
		FreezeButton( &m_ButtonThickeningCalcificationChestFaceOnRight );
		FreezeButton( &m_ButtonThickeningCalcificationChestFaceOnLeft );
		m_ButtonThickeningCalcificationChestFaceOnNone.m_ToggleState = BUTTON_ON;
		}
	else if ( m_ButtonThickeningSiteChestFaceOnRight.m_ToggleState == BUTTON_ON &&
				m_ButtonThickeningSiteChestFaceOnLeft.m_ToggleState == BUTTON_OFF )
		{
		m_ButtonThickeningCalcificationChestFaceOnRight.m_ControlStyle &= ~BUTTON_FROZEN;
		FreezeButton( &m_ButtonThickeningCalcificationChestFaceOnLeft );
		m_ButtonThickeningCalcificationChestFaceOnNone.m_ToggleState = BUTTON_OFF;
		}
	else if ( m_ButtonThickeningSiteChestFaceOnLeft.m_ToggleState == BUTTON_ON &&
				m_ButtonThickeningSiteChestFaceOnRight.m_ToggleState == BUTTON_OFF )
		{
		FreezeButton( &m_ButtonThickeningCalcificationChestFaceOnRight );
		m_ButtonThickeningCalcificationChestFaceOnLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonThickeningCalcificationChestFaceOnNone.m_ToggleState = BUTTON_OFF;
		}
	else if ( m_ButtonThickeningSiteChestFaceOnLeft.m_ToggleState == BUTTON_ON &&
				m_ButtonThickeningSiteChestFaceOnRight.m_ToggleState == BUTTON_ON )
		{
		m_ButtonThickeningCalcificationChestFaceOnRight.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonThickeningCalcificationChestFaceOnLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonThickeningCalcificationChestFaceOnNone.m_ToggleState = BUTTON_OFF;
		}
	else	// if no button is on, enable everything.
		{
		m_ButtonThickeningCalcificationChestFaceOnRight.m_ControlStyle &= ~BUTTON_FROZEN;
		m_ButtonThickeningCalcificationChestFaceOnLeft.m_ControlStyle &= ~BUTTON_FROZEN;
		}
	m_ButtonThickeningCalcificationChestFaceOnNone.SetCheckBoxColor();
	SetPleuralThickeningExtentButtonStates();
}


void CAnalysisPage::SetPleuralThickeningExtentButtonStates()
{
	// Default the buttons in this group to unfrozen.
	m_ButtonPleuralThickeningExtentNoneOnRight.m_ControlStyle &= ~BUTTON_FROZEN;
	m_ButtonPleuralThickeningExtentRight.m_ControlStyle &= ~BUTTON_FROZEN;
	m_ButtonPleuralThickeningExtentNoneOnLeft.m_ControlStyle &= ~BUTTON_FROZEN;
	m_ButtonPleuralThickeningExtentLeft.m_ControlStyle &= ~BUTTON_FROZEN;
	// Freeze appropriate buttons based on the chest profile and face-on button status.
	if ( m_ButtonThickeningSiteChestProfileNone.m_ToggleState == BUTTON_ON &&
				m_ButtonThickeningSiteChestFaceOnNone.m_ToggleState == BUTTON_ON )
		{
		FreezeButton( &m_ButtonPleuralThickeningExtentRight );
		FreezeButton( &m_ButtonPleuralThickeningExtentLeft );
		m_ButtonPleuralThickeningExtentNoneOnRight.m_ToggleState = BUTTON_ON;
		m_ButtonPleuralThickeningExtentNoneOnLeft.m_ToggleState = BUTTON_ON;
		if ( !bTurnOffQualityControl )
			{
			m_GroupButtonsPleuralThickeningExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralThickeningExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}
		}
	else
		{
		if ( m_ButtonThickeningSiteChestProfileRight.m_ToggleState == BUTTON_ON ||
				m_ButtonThickeningSiteChestFaceOnRight.m_ToggleState == BUTTON_ON )
			{
			FreezeButton( &m_ButtonPleuralThickeningExtentNoneOnRight );
			m_ButtonPleuralThickeningExtentNoneOnRight.m_ToggleState = BUTTON_OFF;
			}
		else if ( m_ButtonThickeningSiteChestProfileRight.m_ToggleState == BUTTON_OFF &&
				m_ButtonThickeningSiteChestFaceOnRight.m_ToggleState == BUTTON_OFF )
			{
			m_GroupButtonsPleuralThickeningExtentRight.InitializeMembers();
			if ( !bTurnOffQualityControl )
				m_GroupButtonsPleuralThickeningExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}
		if ( m_ButtonThickeningSiteChestProfileLeft.m_ToggleState == BUTTON_ON ||
				m_ButtonThickeningSiteChestFaceOnLeft.m_ToggleState == BUTTON_ON )
			{
			FreezeButton( &m_ButtonPleuralThickeningExtentNoneOnLeft );
			m_ButtonPleuralThickeningExtentNoneOnLeft.m_ToggleState = BUTTON_OFF;
			}
		else if ( m_ButtonThickeningSiteChestProfileLeft.m_ToggleState == BUTTON_OFF &&
				m_ButtonThickeningSiteChestFaceOnLeft.m_ToggleState == BUTTON_OFF )
			{
			m_GroupButtonsPleuralThickeningExtentLeft.InitializeMembers();
			if ( !bTurnOffQualityControl )
				m_GroupButtonsPleuralThickeningExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}
		}
	if ( m_ButtonPleuralThickeningExtentNoneOnRight.m_SemanticState != BUTTON_UNTOUCHED )
		m_ButtonPleuralThickeningExtentNoneOnRight.SetCheckBoxColor();
	if ( m_ButtonPleuralThickeningExtentNoneOnLeft.m_SemanticState != BUTTON_UNTOUCHED )
		m_ButtonPleuralThickeningExtentNoneOnLeft.SetCheckBoxColor();
}


void CAnalysisPage::SetPleuralThickeningWidthButtonStates()
{
	// Default the buttons in this group to unfrozen.
	m_ButtonPleuralThickeningWidthNoneOnRight.m_ControlStyle &= ~BUTTON_FROZEN;
	m_ButtonPleuralThickeningWidthRight.m_ControlStyle &= ~BUTTON_FROZEN;
	m_ButtonPleuralThickeningWidthNoneOnLeft.m_ControlStyle &= ~BUTTON_FROZEN;
	m_ButtonPleuralThickeningWidthLeft.m_ControlStyle &= ~BUTTON_FROZEN;
	// Freeze appropriate buttons based on the chest profile button status.
	if ( m_ButtonThickeningSiteChestProfileNone.m_ToggleState == BUTTON_ON )
		{
		FreezeButton( &m_ButtonPleuralThickeningWidthRight );
		FreezeButton( &m_ButtonPleuralThickeningWidthLeft );
		m_ButtonPleuralThickeningWidthNoneOnRight.m_ToggleState = BUTTON_ON;
		m_ButtonPleuralThickeningWidthNoneOnLeft.m_ToggleState = BUTTON_ON;
		if ( !bTurnOffQualityControl )
			{
			m_GroupButtonsPleuralThickeningWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			m_GroupButtonsPleuralThickeningWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}
		}
	else
		{
		if ( m_ButtonThickeningSiteChestProfileRight.m_ToggleState == BUTTON_ON )
			{
			FreezeButton( &m_ButtonPleuralThickeningWidthNoneOnRight );
			m_ButtonPleuralThickeningWidthNoneOnRight.m_ToggleState = BUTTON_OFF;
			}
		else
			{
			m_GroupButtonsPleuralThickeningWidthRight.InitializeMembers();
			if ( !bTurnOffQualityControl )
				m_GroupButtonsPleuralThickeningWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}
		if ( m_ButtonThickeningSiteChestProfileLeft.m_ToggleState == BUTTON_ON )
			{
			FreezeButton( &m_ButtonPleuralThickeningWidthNoneOnLeft );
			m_ButtonPleuralThickeningWidthNoneOnLeft.m_ToggleState = BUTTON_OFF;
			}
		else
			{
			m_GroupButtonsPleuralThickeningWidthLeft.InitializeMembers();
			if ( !bTurnOffQualityControl )
				m_GroupButtonsPleuralThickeningWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
			}
		}
	if ( m_ButtonPleuralThickeningWidthNoneOnRight.m_SemanticState != BUTTON_UNTOUCHED )
		m_ButtonPleuralThickeningWidthNoneOnRight.SetCheckBoxColor();
	if ( m_ButtonPleuralThickeningWidthNoneOnLeft.m_SemanticState != BUTTON_UNTOUCHED )
		m_ButtonPleuralThickeningWidthNoneOnLeft.SetCheckBoxColor();
}


void CAnalysisPage::OnBnClickedThickeningSiteChestFaceOnNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonThickeningSiteChestFaceOnNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonThickeningSiteChestFaceOnNone );
	SetStatusOfStaticPleuralThickeningChestFaceOn();
	AdjustChestThickeningFaceOnButtonStates();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedThickeningSiteChestFaceOnRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonThickeningSiteChestFaceOnRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonThickeningSiteChestFaceOnRight );
	SetStatusOfStaticPleuralThickeningChestFaceOn();

	AdjustChestThickeningFaceOnButtonStates();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedThickeningSiteChestFaceOnLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonThickeningSiteChestFaceOnLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonThickeningSiteChestFaceOnLeft );
	SetStatusOfStaticPleuralThickeningChestFaceOn();
	AdjustChestThickeningFaceOnButtonStates();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedThickeningCalcificationChestProfileNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonThickeningCalcificationChestProfileNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonThickeningCalcificationChestProfileNone );
	SetStatusOfStaticPleuralThickeningChestProfile();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedThickeningCalcificationChestProfileRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonThickeningCalcificationChestProfileRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonThickeningCalcificationChestProfileRight );
	SetStatusOfStaticPleuralThickeningChestProfile();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedThickeningCalcificationChestProfileLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonThickeningCalcificationChestProfileLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonThickeningCalcificationChestProfileLeft );
	SetStatusOfStaticPleuralThickeningChestProfile();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedThickeningCalcificationChestFaceOnNone( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonThickeningCalcificationChestFaceOnNone.m_pGroup -> RespondToSelection( (void*)&m_ButtonThickeningCalcificationChestFaceOnNone );
	SetStatusOfStaticPleuralThickeningChestFaceOn();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedThickeningCalcificationChestFaceOnRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonThickeningCalcificationChestFaceOnRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonThickeningCalcificationChestFaceOnRight );
	SetStatusOfStaticPleuralThickeningChestFaceOn();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedThickeningCalcificationChestFaceOnLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonThickeningCalcificationChestFaceOnLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonThickeningCalcificationChestFaceOnLeft );
	SetStatusOfStaticPleuralThickeningChestFaceOn();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}



void CAnalysisPage::OnBnClickedPleuralThickeningExtentNoneOnRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_GroupButtonsPleuralThickeningExtentRightSize.InitializeMembers();
	m_ButtonPleuralThickeningExtentNoneOnRight.m_SemanticState = BUTTON_TOUCHED;
	m_ButtonPleuralThickeningExtentNoneOnRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningExtentNoneOnRight );
	if ( !bTurnOffQualityControl )
		m_GroupButtonsPleuralThickeningExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralThickeningExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningExtentRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningExtentRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningExtentRight );
	if ( m_ButtonPleuralThickeningExtentRight.m_ToggleState == BUTTON_ON )
		m_GroupButtonsPleuralThickeningExtentRightSize.SetGroupVisibility( CONTROL_VISIBLE );
	else
		m_GroupButtonsPleuralThickeningExtentRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralThickeningExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningExtentRightSize1( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningExtentRightSize1.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningExtentRightSize1 );
	SetStatusOfStaticPleuralThickeningExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningExtentRightSize2( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningExtentRightSize2.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningExtentRightSize2 );
	SetStatusOfStaticPleuralThickeningExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningExtentRightSize3( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningExtentRightSize3.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningExtentRightSize3 );
	SetStatusOfStaticPleuralThickeningExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningExtentNoneOnLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_GroupButtonsPleuralThickeningExtentLeftSize.InitializeMembers();
	m_ButtonPleuralThickeningExtentNoneOnLeft.m_SemanticState = BUTTON_TOUCHED;
	m_ButtonPleuralThickeningExtentNoneOnLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningExtentNoneOnLeft );
	if ( !bTurnOffQualityControl )
		m_GroupButtonsPleuralThickeningExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralThickeningExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningExtentLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningExtentLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningExtentLeft );
	if ( m_ButtonPleuralThickeningExtentLeft.m_ToggleState == BUTTON_ON )
		m_GroupButtonsPleuralThickeningExtentLeftSize.SetGroupVisibility( CONTROL_VISIBLE );
	else
		m_GroupButtonsPleuralThickeningExtentLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralThickeningExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningExtentLeftSize1( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningExtentLeftSize1.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningExtentLeftSize1 );
	SetStatusOfStaticPleuralThickeningExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningExtentLeftSize2( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningExtentLeftSize2.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningExtentLeftSize2 );
	SetStatusOfStaticPleuralThickeningExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningExtentLeftSize3( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningExtentLeftSize3.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningExtentLeftSize3 );
	SetStatusOfStaticPleuralThickeningExtent();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}



void CAnalysisPage::OnBnClickedPleuralThickeningWidthNoneOnRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_GroupButtonsPleuralThickeningWidthRightSize.InitializeMembers();
	m_ButtonPleuralThickeningWidthNoneOnRight.m_SemanticState = BUTTON_TOUCHED;
	m_ButtonPleuralThickeningWidthNoneOnRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningWidthNoneOnRight );
	if ( !bTurnOffQualityControl )
		m_GroupButtonsPleuralThickeningWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralThickeningWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}



void CAnalysisPage::OnBnClickedPleuralThickeningWidthRight( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningWidthRight.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningWidthRight );
	if ( m_ButtonPleuralThickeningWidthRight.m_ToggleState == BUTTON_ON )
		m_GroupButtonsPleuralThickeningWidthRightSize.SetGroupVisibility( CONTROL_VISIBLE );
	else
		m_GroupButtonsPleuralThickeningWidthRightSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralThickeningWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningWidthRightSize1( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningWidthRightSize1.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningWidthRightSize1 );
	SetStatusOfStaticPleuralThickeningWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningWidthRightSize2( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningWidthRightSize2.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningWidthRightSize2 );
	SetStatusOfStaticPleuralThickeningWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningWidthRightSize3( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningWidthRightSize3.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningWidthRightSize3 );
	SetStatusOfStaticPleuralThickeningWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningWidthNoneOnLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_GroupButtonsPleuralThickeningWidthLeftSize.InitializeMembers();
	m_ButtonPleuralThickeningWidthNoneOnLeft.m_SemanticState = BUTTON_TOUCHED;
	m_ButtonPleuralThickeningWidthNoneOnLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningWidthNoneOnLeft );
	if ( !bTurnOffQualityControl )
		m_GroupButtonsPleuralThickeningWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralThickeningWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningWidthLeft( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningWidthLeft.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningWidthLeft );
	if ( m_ButtonPleuralThickeningWidthLeft.m_ToggleState == BUTTON_ON )
		m_GroupButtonsPleuralThickeningWidthLeftSize.SetGroupVisibility( CONTROL_VISIBLE );
	else
		m_GroupButtonsPleuralThickeningWidthLeftSize.SetGroupVisibility( CONTROL_INVISIBLE );
	SetStatusOfStaticPleuralThickeningWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningWidthLeftSize1( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningWidthLeftSize1.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningWidthLeftSize1 );
	SetStatusOfStaticPleuralThickeningWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningWidthLeftSize2( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningWidthLeftSize2.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningWidthLeftSize2 );
	SetStatusOfStaticPleuralThickeningWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPleuralThickeningWidthLeftSize3( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPleuralThickeningWidthLeftSize3.m_pGroup -> RespondToSelection( (void*)&m_ButtonPleuralThickeningWidthLeftSize3 );
	SetStatusOfStaticPleuralThickeningWidth();
	UpdatePleuralAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::SetStatusOfStaticPleuralPlaquesChestProfile()
{
	if ( m_GroupButtonsPleuralSiteChestProfile.IsAnyButtonChecked() &&
				m_GroupButtonsCalcificationChestProfile.IsAnyButtonChecked() )
		m_StaticPleuralPlaquesChestProfile.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralPlaquesChestProfile.HasBeenCompleted( FALSE );
	SetStatusOfStaticPleuralPlaquesSite();
	SetStatusOfStaticPleuralCalcification();
}


void CAnalysisPage::SetStatusOfStaticPleuralPlaquesChestFaceOn()
{
	if ( m_GroupButtonsPleuralSiteChestFaceOn.IsAnyButtonChecked() &&
				m_GroupButtonsCalcificationChestFaceOn.IsAnyButtonChecked() )
		m_StaticPleuralPlaquesChestFaceOn.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralPlaquesChestFaceOn.HasBeenCompleted( FALSE );
	SetStatusOfStaticPleuralPlaquesSite();
	SetStatusOfStaticPleuralCalcification();
}


void CAnalysisPage::SetStatusOfStaticPleuralPlaquesDiaphragm()
{
	if ( m_GroupButtonsPleuralSiteDiaphragm.IsAnyButtonChecked() &&
				m_GroupButtonsCalcificationDiaphragm.IsAnyButtonChecked() )
		m_StaticPleuralPlaquesDiaphragm.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralPlaquesDiaphragm.HasBeenCompleted( FALSE );
	SetStatusOfStaticPleuralPlaquesSite();
	SetStatusOfStaticPleuralCalcification();
}


void CAnalysisPage::SetStatusOfStaticPleuralPlaquesOther()
{
	if ( m_GroupButtonsPleuralSiteOther.IsAnyButtonChecked() &&
				m_GroupButtonsCalcificationOther.IsAnyButtonChecked() )
		m_StaticPleuralPlaquesOther.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralPlaquesOther.HasBeenCompleted( FALSE );
	SetStatusOfStaticPleuralPlaquesSite();
	SetStatusOfStaticPleuralCalcification();
}


void CAnalysisPage::SetStatusOfStaticPleuralPlaquesSite()
{
	if ( m_GroupButtonsPleuralSiteChestProfile.IsAnyButtonChecked() &&
				m_GroupButtonsPleuralSiteChestFaceOn.IsAnyButtonChecked() &&
				m_GroupButtonsPleuralSiteDiaphragm.IsAnyButtonChecked() &&
				m_GroupButtonsPleuralSiteOther.IsAnyButtonChecked() )
		m_StaticPleuralPlaquesSite.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralPlaquesSite.HasBeenCompleted( FALSE );
	SetStatusOfPleuralPlaquesSubtitle();
}


void CAnalysisPage::SetStatusOfStaticPleuralCalcification()
{
	if ( m_GroupButtonsCalcificationChestProfile.IsAnyButtonChecked() &&
				m_GroupButtonsCalcificationChestFaceOn.IsAnyButtonChecked() &&
				m_GroupButtonsCalcificationDiaphragm.IsAnyButtonChecked() &&
				m_GroupButtonsCalcificationOther.IsAnyButtonChecked() )
		m_StaticPleuralCalcification.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralCalcification.HasBeenCompleted( FALSE );
	SetStatusOfPleuralPlaquesSubtitle();
}


void CAnalysisPage::SetStatusOfStaticPleuralExtent()
{
	if ( ( m_ButtonPleuralExtentNoneOnRight.m_ToggleState == BUTTON_ON ||
				( m_ButtonPleuralExtentRight.m_ToggleState == BUTTON_ON &&
							m_GroupButtonsPleuralExtentRightSize.IsAnyButtonChecked() ) ) &&
		 ( m_ButtonPleuralExtentNoneOnLeft.m_ToggleState == BUTTON_ON ||
				( m_ButtonPleuralExtentLeft.m_ToggleState == BUTTON_ON &&
							m_GroupButtonsPleuralExtentLeftSize.IsAnyButtonChecked() ) ) )
		m_StaticPleuralExtent.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralExtent.HasBeenCompleted( FALSE );
	SetStatusOfPleuralPlaquesSubtitle();
}


void CAnalysisPage::SetStatusOfStaticPleuralWidth()
{
	if ( ( m_ButtonPleuralWidthNoneOnRight.m_ToggleState == BUTTON_ON ||
				( m_ButtonPleuralWidthRight.m_ToggleState == BUTTON_ON &&
							m_GroupButtonsPleuralWidthRightSize.IsAnyButtonChecked() ) ) &&
		 ( m_ButtonPleuralWidthNoneOnLeft.m_ToggleState == BUTTON_ON ||
				( m_ButtonPleuralWidthLeft.m_ToggleState == BUTTON_ON &&
							m_GroupButtonsPleuralWidthLeftSize.IsAnyButtonChecked() ) ) )
		m_StaticPleuralWidth.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralWidth.HasBeenCompleted( FALSE );
	SetStatusOfPleuralPlaquesSubtitle();
}


void CAnalysisPage::SetStatusOfStaticPleuralThickeningChestProfile()
{
	if ( m_GroupButtonsThickeningSiteChestProfile.IsAnyButtonChecked() &&
				m_GroupButtonsThickeningCalcificationChestProfile.IsAnyButtonChecked() )
		m_StaticPleuralThickeningChestProfile.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralThickeningChestProfile.HasBeenCompleted( FALSE );
	SetStatusOfStaticPleuralThickeningSite();
	SetStatusOfStaticPleuralThickeningCalcification();
}


void CAnalysisPage::SetStatusOfStaticPleuralThickeningChestFaceOn()
{
	if ( m_GroupButtonsThickeningSiteChestFaceOn.IsAnyButtonChecked() &&
				m_GroupButtonsThickeningCalcificationChestFaceOn.IsAnyButtonChecked() )
		m_StaticPleuralThickeningChestFaceOn.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralThickeningChestFaceOn.HasBeenCompleted( FALSE );
	SetStatusOfStaticPleuralThickeningSite();
	SetStatusOfStaticPleuralThickeningCalcification();
}


void CAnalysisPage::SetStatusOfStaticPleuralThickeningSite()
{
	if ( m_GroupButtonsThickeningSiteChestProfile.IsAnyButtonChecked() &&
				m_GroupButtonsThickeningSiteChestFaceOn.IsAnyButtonChecked() )
		m_StaticPleuralThickeningSite.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralThickeningSite.HasBeenCompleted( FALSE );
	SetStatusOfPleuralThickeningSubtitle();
}


void CAnalysisPage::SetStatusOfStaticPleuralThickeningCalcification()
{
	if ( m_GroupButtonsThickeningCalcificationChestProfile.IsAnyButtonChecked() &&
				m_GroupButtonsThickeningCalcificationChestFaceOn.IsAnyButtonChecked() )
		m_StaticThickeningCalcification.HasBeenCompleted( TRUE );
	else
		m_StaticThickeningCalcification.HasBeenCompleted( FALSE );
	SetStatusOfPleuralThickeningSubtitle();
}


void CAnalysisPage::SetStatusOfStaticPleuralThickeningExtent()
{
	if ( ( m_ButtonPleuralThickeningExtentNoneOnRight.m_ToggleState == BUTTON_ON ||
				( m_ButtonPleuralThickeningExtentRight.m_ToggleState == BUTTON_ON &&
							m_GroupButtonsPleuralThickeningExtentRightSize.IsAnyButtonChecked() ) ) &&
		 ( m_ButtonPleuralThickeningExtentNoneOnLeft.m_ToggleState == BUTTON_ON ||
				( m_ButtonPleuralThickeningExtentLeft.m_ToggleState == BUTTON_ON &&
							m_GroupButtonsPleuralThickeningExtentLeftSize.IsAnyButtonChecked() ) ) )
		m_StaticPleuralThickeningExtent.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralThickeningExtent.HasBeenCompleted( FALSE );
	SetStatusOfPleuralThickeningSubtitle();
}


void CAnalysisPage::SetStatusOfStaticPleuralThickeningWidth()
{
	if ( ( m_ButtonPleuralThickeningWidthNoneOnRight.m_ToggleState == BUTTON_ON ||
				( m_ButtonPleuralThickeningWidthRight.m_ToggleState == BUTTON_ON &&
							m_GroupButtonsPleuralThickeningWidthRightSize.IsAnyButtonChecked() ) ) &&
		 ( m_ButtonPleuralThickeningWidthNoneOnLeft.m_ToggleState == BUTTON_ON ||
				( m_ButtonPleuralThickeningWidthLeft.m_ToggleState == BUTTON_ON &&
							m_GroupButtonsPleuralThickeningWidthLeftSize.IsAnyButtonChecked() ) ) )
		m_StaticPleuralThickeningWidth.HasBeenCompleted( TRUE );
	else
		m_StaticPleuralThickeningWidth.HasBeenCompleted( FALSE );
	SetStatusOfPleuralThickeningSubtitle();
}


void CAnalysisPage::SetStatusOfPleuralPlaquesSubtitle()
{
	if ( m_StaticPleuralPlaquesSite.IsCompleted() && m_StaticPleuralCalcification.IsCompleted() &&
				m_StaticPleuralExtent.IsCompleted() && m_StaticPleuralWidth.IsCompleted() )
		m_PleuralPlaquesSubtitle.HasBeenCompleted( TRUE );
	else
		m_PleuralPlaquesSubtitle.HasBeenCompleted( FALSE );
}


void CAnalysisPage::SetStatusOfPleuralThickeningSubtitle()
{
	if ( m_StaticPleuralThickeningSite.IsCompleted() && m_StaticThickeningCalcification.IsCompleted() &&
				m_StaticPleuralThickeningExtent.IsCompleted() && m_StaticPleuralThickeningWidth.IsCompleted() )
		m_PleuralThickeningSubtitle.HasBeenCompleted( TRUE );
	else
		m_PleuralThickeningSubtitle.HasBeenCompleted( FALSE );
}


void CAnalysisPage::OnBnClickedOtherAbnormalityButton( NMHDR *pNMHDR, LRESULT *pResult )
{
	CStudy			*pCurrentStudy;

	pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
	if ( pCurrentStudy != 0 )
		{
		pCurrentStudy -> m_nCurrentObjectID = m_OtherAbnormalityButton.m_nObjectID;
		pCurrentStudy -> m_bStudyHasBeenEdited = TRUE;
		pCurrentStudy -> m_bOtherAbnormalitiesVisited = TRUE;
		}
	UpdateOtherAbnormalityPageStatus();
	SetImageQualityPageVisibility( CONTROL_INVISIBLE );
	SetParenchymalPageVisibility( CONTROL_INVISIBLE );
	SetPleuralPageVisibility( CONTROL_INVISIBLE );
	SetOtherPageVisibility( CONTROL_VISIBLE );
	Invalidate( TRUE );

	*pResult = 0;
}


void CAnalysisPage::SetOtherPageVisibility( unsigned long Visibility )
{
	if ( Visibility == CONTROL_VISIBLE )
		{
		m_StaticOtherAbnormalitiesTitle.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		m_OtherYesNoButtonGroup.SetGroupVisibility( CONTROL_VISIBLE );
		m_OtherStaticTextGroup.SetGroupVisibility( CONTROL_VISIBLE );
		m_GroupButtonSymbols.SetGroupVisibility( CONTROL_VISIBLE );
		m_GroupStaticSymbols.SetGroupVisibility( CONTROL_VISIBLE );
		m_GroupStaticAbnormalities.SetGroupVisibility( CONTROL_VISIBLE );
		m_GroupButtonDisorders.SetGroupVisibility( CONTROL_VISIBLE );
		m_EditOtherComments.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		}
	else if ( Visibility == CONTROL_INVISIBLE )
		{
		m_StaticOtherAbnormalitiesTitle.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		m_OtherYesNoButtonGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_OtherStaticTextGroup.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonSymbols.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupStaticSymbols.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupStaticAbnormalities.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonDisorders.SetGroupVisibility( CONTROL_INVISIBLE );
		m_EditOtherComments.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		}
}


void CAnalysisPage::UpdateOtherAbnormalityPageStatus()
{
	CStudy			*pCurrentStudy;
	CString			OtherAbnormalityTextString;

	pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;

	if ( m_ButtonOtherNo.m_ToggleState == BUTTON_ON )
		{
		m_bOtherAbnormalityPageIsCompleted = TRUE;

		m_GroupButtonSymbols.InitializeMembers();
		m_GroupButtonDisorders.InitializeMembers();
		m_EditOtherComments.Reinitialize();
		}
	else if ( m_ButtonOtherYes.m_ToggleState == BUTTON_ON )
		{
		m_bOtherAbnormalityPageIsCompleted = ( m_GroupButtonSymbols.IsAnyButtonChecked() ||
											m_GroupButtonDisorders.IsAnyButtonChecked()	);
		UpdateApproveStudyButtonStatus();
		}
	else
		m_bOtherAbnormalityPageIsCompleted = FALSE;
	if ( m_bOtherAbnormalityPageIsCompleted )
		{
		m_OtherAbnormalityButton.m_SemanticState = BUTTON_COMPLETED;
		UpdateApproveStudyButtonStatus();
		}
	else if ( pCurrentStudy != 0 && pCurrentStudy -> m_bOtherAbnormalitiesVisited )
		m_OtherAbnormalityButton.m_SemanticState = BUTTON_TOUCHED;
	m_EditOtherComments.GetWindowText( OtherAbnormalityTextString );
	m_EditOtherComments.m_bHasReceivedInput = ( OtherAbnormalityTextString.GetLength() > 0 );
	if ( m_EditOtherComments.m_bHasReceivedInput )
		{
		m_EditOtherComments.m_IdleBkgColor = m_EditOtherComments.m_ActivatedBkgdColor;
		m_OtherAbnormalityButton.m_SemanticState = BUTTON_COMPLETED;
		}
	else
		m_EditOtherComments.m_IdleBkgColor = m_EditOtherComments.m_OriginalIdleBkgColor;
	Invalidate( TRUE );
}


void CAnalysisPage::OnBnClickedOtherYes( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_ButtonOtherYes.m_ToggleState == BUTTON_ON || bTurnOffQualityControl )
		{
		m_OtherSymbolsSubtitle.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		m_GroupButtonSymbols.SetGroupVisibility( CONTROL_VISIBLE );
		m_GroupStaticSymbols.SetGroupVisibility( CONTROL_VISIBLE );
		m_GroupStaticAbnormalities.SetGroupVisibility( CONTROL_VISIBLE );
		m_GroupButtonDisorders.SetGroupVisibility( CONTROL_VISIBLE );
		m_EditOtherComments.ChangeStatus( CONTROL_INVISIBLE, CONTROL_VISIBLE );
		}
	else
		{
		m_OtherSymbolsSubtitle.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		m_GroupButtonSymbols.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupStaticSymbols.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupStaticAbnormalities.SetGroupVisibility( CONTROL_INVISIBLE );
		m_GroupButtonDisorders.SetGroupVisibility( CONTROL_INVISIBLE );
		m_EditOtherComments.ChangeStatus( CONTROL_VISIBLE, CONTROL_INVISIBLE );
		}
	m_ButtonOtherYes.m_pGroup -> RespondToSelection( (void*)&m_ButtonOtherYes );
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedOtherNo( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( !bTurnOffQualityControl )
		m_ButtonOtherNo.m_pGroup -> RespondToSelection( (void*)&m_ButtonOtherNo );
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}

void CAnalysisPage::OnBnClickedSymbol_aa( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_aa.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_aa );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_at( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_at.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_at );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_ax( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_ax.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_ax );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_bu( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_bu.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_bu );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_ca( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_ca.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_ca );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_cg( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_cg.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_cg );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_cn( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_cn.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_cn );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_co( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_co.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_co );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_cp( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_cp.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_cp );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_cv( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_cv.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_cv );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_di( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_di.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_di );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_ef( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_ef.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_ef );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_em( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_em.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_em );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_es( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_es.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_es );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_fr( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_fr.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_fr );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_hi( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_hi.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_hi );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_ho( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_ho.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_ho );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_id( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_id.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_id );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_ih( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_ih.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_ih );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_kl( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_kl.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_kl );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_me( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_me.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_me );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_pa( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_pa.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_pa );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_pb( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_pb.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_pb );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_pi( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_pi.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_pi );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_px( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_px.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_px );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_ra( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_ra.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_ra );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_rp( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_rp.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_rp );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_tb( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_tb.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_tb );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedSymbol_od( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonSymbol_od.m_pGroup -> RespondToSelection( (void*)&m_ButtonSymbol_od );
	SetStatusOfStaticSymbols();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::SetStatusOfStaticSymbols()
{
	if ( m_GroupButtonSymbols.IsAnyButtonChecked() )
		{
		m_GroupStaticSymbols.HasBeenCompleted( TRUE );
		m_OtherSymbolsSubtitle.HasBeenCompleted( TRUE );
		}
	else
		{
		m_GroupStaticSymbols.HasBeenCompleted( FALSE );
		m_OtherSymbolsSubtitle.HasBeenCompleted( FALSE );
		}
}


void CAnalysisPage::OnBnClickedEventration( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonEventration.m_pGroup -> RespondToSelection( (void*)&m_ButtonEventration );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedHiatalHernia( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonHiatalHernia.m_pGroup -> RespondToSelection( (void*)&m_ButtonHiatalHernia );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedBronchovascularMarkings( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonBronchovascularMarkings.m_pGroup -> RespondToSelection( (void*)&m_ButtonBronchovascularMarkings );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedHyperinflation( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonHyperinflation.m_pGroup -> RespondToSelection( (void*)&m_ButtonHyperinflation );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedBonyChestCage( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonBonyChestCage.m_pGroup -> RespondToSelection( (void*)&m_ButtonBonyChestCage );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedFractureHealed( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonFractureHealed.m_pGroup -> RespondToSelection( (void*)&m_ButtonFractureHealed );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedFractureNonHealed( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonFractureNonHealed.m_pGroup -> RespondToSelection( (void*)&m_ButtonFractureNonHealed );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedScoliosis( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonScoliosis.m_pGroup -> RespondToSelection( (void*)&m_ButtonScoliosis );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedVertebralColumn( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonVertebralColumn.m_pGroup -> RespondToSelection( (void*)&m_ButtonVertebralColumn );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedAzygosLobe( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonAzygosLobe.m_pGroup -> RespondToSelection( (void*)&m_ButtonAzygosLobe );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedLungDensity( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonLungDensity.m_pGroup -> RespondToSelection( (void*)&m_ButtonLungDensity );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedInfiltrate( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonInfiltrate.m_pGroup -> RespondToSelection( (void*)&m_ButtonInfiltrate );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedNodularLesion( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonNodularLesion.m_pGroup -> RespondToSelection( (void*)&m_ButtonNodularLesion );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedForeignBody( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonForeignBody.m_pGroup -> RespondToSelection( (void*)&m_ButtonForeignBody );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedPostSurgical( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonPostSurgical.m_pGroup -> RespondToSelection( (void*)&m_ButtonPostSurgical );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCyst( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonCyst.m_pGroup -> RespondToSelection( (void*)&m_ButtonCyst );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedAortaAnomaly( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonAortaAnomaly.m_pGroup -> RespondToSelection( (void*)&m_ButtonAortaAnomaly );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedVascularAbnormality( NMHDR *pNMHDR, LRESULT *pResult )
{
	m_ButtonVascularAbnormality.m_pGroup -> RespondToSelection( (void*)&m_ButtonVascularAbnormality );
	SetStatusOfStaticDisorders();
	UpdateOtherAbnormalityPageStatus();

	*pResult = 0;
}


void CAnalysisPage::SetStatusOfStaticDisorders()
{
	if ( m_GroupButtonDisorders.IsAnyButtonChecked() )
		m_GroupStaticAbnormalities.HasBeenCompleted( TRUE );
	else
		m_GroupStaticAbnormalities.HasBeenCompleted( FALSE );
}


void CAnalysisPage::OnEditOtherCommentsFocus( NMHDR *pNMHDR, LRESULT *pResult )
{
	if ( m_EditOtherComments.m_bHasReceivedInput )
		{
		m_GroupStaticAbnormalities.HasBeenCompleted( TRUE );
		m_GroupButtonDisorders.HasBeenCompleted( TRUE );
		m_GroupButtonDisorders.RespondToSelection( 0 );
		m_OtherAbnormalityButton.m_SemanticState = BUTTON_COMPLETED;
		}
	*pResult = 0;
	Invalidate( TRUE );
}

void CAnalysisPage::UpdateApproveStudyButtonStatus()
{
	if ( m_bParenchymalAbnormalityPageIsCompleted || m_bPleuralAbnormalityPageIsCompleted || m_bOtherAbnormalityPageIsCompleted )
		m_ApproveStudyButton.m_SemanticState = BUTTON_TOUCHED;
	if ( m_ButtonParenchymalNo.m_ToggleState == BUTTON_ON && m_ButtonPleuralNo.m_ToggleState == BUTTON_ON && m_ButtonOtherNo.m_ToggleState == BUTTON_ON )
		m_ApproveStudyButton.m_SemanticState = BUTTON_COMPLETED;
	else
		m_ApproveStudyButton.m_SemanticState = BUTTON_TOUCHED;
	m_ApproveStudyButton.Invalidate( TRUE );
}


void CAnalysisPage::OnBnClickedApproveStudyButton( NMHDR *pNMHDR, LRESULT *pResult )
{
	CStudy						*pCurrentStudy;
	UINT						nFlags = 0;
	CPoint						Point( 0, 0 );
 	CMainFrame					*pMainFrame;
	static USER_NOTIFICATION	NoticeOfExistingData;
	BOOL						bPriorDataNeedsPreserving;

	bPriorDataNeedsPreserving = FALSE;
	if ( m_ButtonParenchymalYes.m_ToggleState == BUTTON_ON || m_ButtonPleuralYes.m_ToggleState == BUTTON_ON || m_ButtonOtherYes.m_ToggleState == BUTTON_ON )
		{
		strcpy( NoticeOfExistingData.Source, BViewerConfiguration.ProgramName );
		NoticeOfExistingData.ModuleCode = 0;
		NoticeOfExistingData.ErrorCode = 0;
		strcpy( NoticeOfExistingData.NoticeText, "You have already entered information\nabout this radiograph!\n\n" );
		NoticeOfExistingData.TypeOfUserResponseSupported = USER_RESPONSE_TYPE_YESNO;
		NoticeOfExistingData.UserNotificationCause = USER_NOTIFICATION_CAUSE_NEEDS_ACKNOWLEDGMENT;
		strcpy( NoticeOfExistingData.SuggestedActionText, "Do you want to erase that?" );
		NoticeOfExistingData.UserResponseCode = 0L;
		NoticeOfExistingData.TextLinesRequired = 10;
		pMainFrame = (CMainFrame*)ThisBViewerApp.m_pMainWnd;
		if ( pMainFrame != 0 )
			pMainFrame -> ProcessUserNotificationAndWaitForResponse( &NoticeOfExistingData );
		if ( NoticeOfExistingData.UserResponseCode == USER_RESPONSE_CODE_NO )
			bPriorDataNeedsPreserving = TRUE;
		}
	if ( !bPriorDataNeedsPreserving )
		{
		m_ParenchymalAbnormalityButton.OnLButtonUp( nFlags, Point );
		OnBnClickedParenchymalAbnormalityButton( pNMHDR, pResult );
		m_ButtonParenchymalNo.OnLButtonUp( nFlags, Point );
		m_ButtonParenchymalNo.m_ToggleState = BUTTON_ON;		// Force the button to ON.  Prevent a toggle to OFF.
		OnBnClickedParenchymalNo( pNMHDR, pResult );

		m_PleuralAbnormalityButton.OnLButtonUp( nFlags, Point );
		OnBnClickedPleuralAbnormalityButton( pNMHDR, pResult );
		m_ButtonPleuralNo.OnLButtonUp( nFlags, Point );
		m_ButtonPleuralNo.m_ToggleState = BUTTON_ON;			// Force the button to ON.  Prevent a toggle to OFF.
		OnBnClickedPleuralNo( pNMHDR, pResult );

		m_OtherAbnormalityButton.OnLButtonUp( nFlags, Point );
		OnBnClickedOtherAbnormalityButton( pNMHDR, pResult );
		m_ButtonOtherNo.OnLButtonUp( nFlags, Point );
		m_ButtonOtherNo.m_ToggleState = BUTTON_ON;				// Force the button to ON.  Prevent a toggle to OFF.
		OnBnClickedOtherNo( pNMHDR, pResult );
		pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
		if ( pCurrentStudy != 0 )
			pCurrentStudy -> m_nCurrentObjectID = m_ApproveStudyButton.m_nObjectID;
		SetImageQualityPageVisibility( CONTROL_INVISIBLE );
		SetParenchymalPageVisibility( CONTROL_INVISIBLE );
		SetPleuralPageVisibility( CONTROL_INVISIBLE );
		SetOtherPageVisibility( CONTROL_INVISIBLE );

		m_ApproveStudyButton.m_SemanticState = BUTTON_COMPLETED;
		}

	Invalidate( TRUE );

	*pResult = 0;
}


void CAnalysisPage::OnBnClickedCancelAndResetButton( NMHDR *pNMHDR, LRESULT *pResult )
{
 	CStudy							*pCurrentStudy;
	CMainFrame						*pMainFrame;
	static USER_NOTIFICATION		NoticeOfExistingData;
	BOOL							bResetRequestWasConfirmed = FALSE;

	strcpy( NoticeOfExistingData.Source, BViewerConfiguration.ProgramName );
	NoticeOfExistingData.ModuleCode = 0;
	NoticeOfExistingData.ErrorCode = 0;
	strcpy( NoticeOfExistingData.NoticeText, "Resetting this study will erase any\ninterpretation data you have entered!\n\n" );
	NoticeOfExistingData.TypeOfUserResponseSupported = USER_RESPONSE_TYPE_YESNO_NO_CANCEL;
	NoticeOfExistingData.UserNotificationCause = USER_NOTIFICATION_CAUSE_NEEDS_ACKNOWLEDGMENT;
	strcpy( NoticeOfExistingData.SuggestedActionText, "Are you sure you wish to reset?" );
	NoticeOfExistingData.UserResponseCode = 0L;
	NoticeOfExistingData.TextLinesRequired = 10;
	pMainFrame = (CMainFrame*)ThisBViewerApp.m_pMainWnd;
	if ( pMainFrame != 0 )
		pMainFrame -> ProcessUserNotificationAndWaitForResponse( &NoticeOfExistingData );
	if ( NoticeOfExistingData.UserResponseCode == USER_RESPONSE_CODE_YES )
		bResetRequestWasConfirmed = TRUE;
	if ( bResetRequestWasConfirmed )
		{
		pCurrentStudy = ThisBViewerApp.m_pCurrentStudy;
		if ( pCurrentStudy != 0 )
			pCurrentStudy -> InitializeInterpretation();
		ResetPage();
		Invalidate( TRUE );
		}

	*pResult = 0;
}


BOOL CAnalysisPage::IsInterpretationComplete()
{
	BOOL		bInterpretationIsComplete = TRUE;

	if ( m_ImageQualityButton.m_SemanticState != BUTTON_COMPLETED )
		bInterpretationIsComplete = FALSE;
	if ( m_ParenchymalAbnormalityButton.m_SemanticState != BUTTON_COMPLETED )
		bInterpretationIsComplete = FALSE;
	if ( m_PleuralAbnormalityButton.m_SemanticState != BUTTON_COMPLETED )
		bInterpretationIsComplete = FALSE;
	if ( m_OtherAbnormalityButton.m_SemanticState != BUTTON_COMPLETED )
		bInterpretationIsComplete = FALSE;

	return bInterpretationIsComplete;
}


void CAnalysisPage::CheckForIncompleteInterpretation( BOOL *pbOKToProceed )
{
	BOOL							bInterpretationIsComplete;
	BOOL							bProceedWithReport = TRUE;
	static USER_NOTIFICATION		NoticeOfIncompleteInterpretation;
	int								nIncompleteSections;
 	CMainFrame						*pMainFrame;

	bProceedWithReport = TRUE;
	bInterpretationIsComplete = IsInterpretationComplete();
	if ( !bInterpretationIsComplete )  // && BViewerConfiguration.InterpretationEnvironment != INTERP_ENVIRONMENT_TEST )

		{
		strcpy( NoticeOfIncompleteInterpretation.Source, BViewerConfiguration.ProgramName );
		NoticeOfIncompleteInterpretation.ModuleCode = 0;
		NoticeOfIncompleteInterpretation.ErrorCode = 0;
		strcpy( NoticeOfIncompleteInterpretation.NoticeText, "The following interpretation sections\nhave not yet been completed:\n\n" );
		nIncompleteSections = 0;
		if ( m_ImageQualityButton.m_SemanticState != BUTTON_COMPLETED )
			{
			strcat( NoticeOfIncompleteInterpretation.NoticeText, "Image Quality\n" );
			nIncompleteSections++;
			}
		if ( m_ParenchymalAbnormalityButton.m_SemanticState != BUTTON_COMPLETED )
			{
			strcat( NoticeOfIncompleteInterpretation.NoticeText, "Parenchymal Abnormality\n" );
			nIncompleteSections++;
			}
		if ( m_PleuralAbnormalityButton.m_SemanticState != BUTTON_COMPLETED )
			{
			strcat( NoticeOfIncompleteInterpretation.NoticeText, "PleuralAbnormality\n" );
			nIncompleteSections++;
			}
		if ( m_OtherAbnormalityButton.m_SemanticState != BUTTON_COMPLETED )
			{
			strcat( NoticeOfIncompleteInterpretation.NoticeText, "OtherAbnormality\n" );
			nIncompleteSections++;
			}
		NoticeOfIncompleteInterpretation.TypeOfUserResponseSupported = USER_RESPONSE_TYPE_ERROR | USER_RESPONSE_TYPE_YESNO;
		NoticeOfIncompleteInterpretation.UserNotificationCause = USER_NOTIFICATION_CAUSE_INCOMPLETE_INTERPRETATION;
		strcpy( NoticeOfIncompleteInterpretation.SuggestedActionText, "Do you wish to proceed anyway?" );
		NoticeOfIncompleteInterpretation.UserResponseCode = 0L;
		NoticeOfIncompleteInterpretation.TextLinesRequired = nIncompleteSections + 10;

		pMainFrame = (CMainFrame*)ThisBViewerApp.m_pMainWnd;
		if ( pMainFrame != 0 )
			{
			pMainFrame -> ProcessUserNotificationAndWaitForResponse( &NoticeOfIncompleteInterpretation );
			if ( NoticeOfIncompleteInterpretation.UserResponseCode != USER_RESPONSE_CODE_YES )
				bProceedWithReport = FALSE;
			}
		}
	
	*pbOKToProceed = bProceedWithReport;
}


void CheckForIncompleteInterpretation( BOOL *pbOKToProceed )
{
 	CMainFrame				*pMainFrame;
	CControlPanel			*pControlPanel;
	CAnalysisPage			*pAnalysisPage;

	*pbOKToProceed = TRUE;
	pMainFrame = (CMainFrame*)ThisBViewerApp.m_pMainWnd;
	if ( pMainFrame != 0 )
		{
		pControlPanel = pMainFrame -> m_pControlPanel;
		if ( pControlPanel != 0 )
			{
			pAnalysisPage = &pControlPanel -> m_PerformAnalysisPage;
			if ( pAnalysisPage != 0 )
				pAnalysisPage -> CheckForIncompleteInterpretation( pbOKToProceed );
			}
		}
}


void CAnalysisPage::OnBnClickedProduceReportButton( NMHDR *pNMHDR, LRESULT *pResult )
{
	BOOL							bProceedWithReport = TRUE;
	CControlPanel					*pControlPanel;

	bProceedWithReport = TRUE;
	CheckForIncompleteInterpretation( &bProceedWithReport );
	
	if ( bProceedWithReport )
		{
		pControlPanel = (CControlPanel*)GetParent();
		if ( pControlPanel != 0 )
			pControlPanel -> SetActivePage( REPORT_PAGE );
		}

	*pResult = 0;
}


void CAnalysisPage::LoadStudyDataFromScreens( CStudy *pCurrentStudy )
{
	if ( pCurrentStudy != 0 )
		{
		pCurrentStudy -> m_bImageQualityVisited = ( m_ImageQualityButton.m_SemanticState != BUTTON_UNTOUCHED );

		pCurrentStudy -> m_ImageQuality = 0L;
		// Load the image grade button group.
		if ( m_ImageGrade1.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_GRADE_1;
		if ( m_ImageGrade2.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_GRADE_2;
		if ( m_ImageGrade3.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_GRADE_3;
		if ( m_ImageGradeUR.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_GRADE_UR;

		// Load the image defect button group.
		if ( m_ImageOverexposed.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_DEFECT_OVEREXPOSED;
		if ( m_ImageUnderexposed.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_DEFECT_UNDEREXPOSED;
		if ( m_ImageArtifacts.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_DEFECT_ARTIFACTS;
		if ( m_ImageImproperPosition.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_DEFECT_POSITION;
		if ( m_ImagePoorContrast.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_DEFECT_CONTRAST;
		if ( m_ImagePoorProcessing.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_DEFECT_PROCESSING;
		if ( m_ImageUnderinflation.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_DEFECT_UNDERINFLATION;
		if ( m_ImageMottle.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_DEFECT_MOTTLE;
		if ( m_ImageExcessiveEdgeEnhancement.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_DEFECT_EXCESSIVE_EDGE;
		if ( m_ImageOther.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ImageQuality |= IMAGE_DEFECT_OTHER;
		m_EditImageQualityOther.GetWindowText( pCurrentStudy -> m_ImageDefectOtherText );
		pCurrentStudy -> m_bParenchymalAbnormalitiesVisited = ( m_ParenchymalAbnormalityButton.m_SemanticState != BUTTON_UNTOUCHED );
		if ( m_ButtonParenchymalYes.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_AnyParenchymalAbnormalities = BOOL_YES;
		else if ( m_ButtonParenchymalNo.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_AnyParenchymalAbnormalities = BOOL_NO;
		else
			pCurrentStudy -> m_AnyParenchymalAbnormalities = BOOL_NOT_SPECIFIED;
		pCurrentStudy -> m_ObservedParenchymalAbnormalities = 0L;
		if ( m_ButtonPrimary_P.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= SHAPE_SIZE_PRIMARY_P;
		if ( m_ButtonPrimary_Q.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= SHAPE_SIZE_PRIMARY_Q;
		if ( m_ButtonPrimary_R.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= SHAPE_SIZE_PRIMARY_R;
		if ( m_ButtonPrimary_S.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= SHAPE_SIZE_PRIMARY_S;
		if ( m_ButtonPrimary_T.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= SHAPE_SIZE_PRIMARY_T;
		if ( m_ButtonPrimary_U.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= SHAPE_SIZE_PRIMARY_U;

		if ( m_ButtonSecondary_P.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= SHAPE_SIZE_SECONDARY_P;
		if ( m_ButtonSecondary_Q.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= SHAPE_SIZE_SECONDARY_Q;
		if ( m_ButtonSecondary_R.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= SHAPE_SIZE_SECONDARY_R;
		if ( m_ButtonSecondary_S.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= SHAPE_SIZE_SECONDARY_S;
		if ( m_ButtonSecondary_T.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= SHAPE_SIZE_SECONDARY_T;
		if ( m_ButtonSecondary_U.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= SHAPE_SIZE_SECONDARY_U;

		if ( m_ButtonSmallOpacityZoneUpperRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= OPACITY_ZONE_UPPER_RIGHT;
		if ( m_ButtonSmallOpacityZoneUpperLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= OPACITY_ZONE_UPPER_LEFT;
		if ( m_ButtonSmallOpacityZoneMiddleRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= OPACITY_ZONE_MIDDLE_RIGHT;
		if ( m_ButtonSmallOpacityZoneMiddleLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= OPACITY_ZONE_MIDDLE_LEFT;
		if ( m_ButtonSmallOpacityZoneLowerRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= OPACITY_ZONE_LOWER_RIGHT;
		if ( m_ButtonSmallOpacityZoneLowerLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= OPACITY_ZONE_LOWER_LEFT;

		if ( m_ButtonSmallOpacityProfusion_0Minus.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= PROFUSION_0MINUS;
		if ( m_ButtonSmallOpacityProfusion_00.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= PROFUSION_00;
		if ( m_ButtonSmallOpacityProfusion_01.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= PROFUSION_01;
		if ( m_ButtonSmallOpacityProfusion_10.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= PROFUSION_10;
		if ( m_ButtonSmallOpacityProfusion_11.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= PROFUSION_11;
		if ( m_ButtonSmallOpacityProfusion_12.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= PROFUSION_12;
		if ( m_ButtonSmallOpacityProfusion_21.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= PROFUSION_21;
		if ( m_ButtonSmallOpacityProfusion_22.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= PROFUSION_22;
		if ( m_ButtonSmallOpacityProfusion_23.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= PROFUSION_23;
		if ( m_ButtonSmallOpacityProfusion_32.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= PROFUSION_32;
		if ( m_ButtonSmallOpacityProfusion_33.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= PROFUSION_33;
		if ( m_ButtonSmallOpacityProfusion_3Plus.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= PROFUSION_3PLUS;

		if ( m_ButtonLargeOpacitySize_0.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= LARGE_OPACITY_SIZE_0;
		if ( m_ButtonLargeOpacitySize_A.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= LARGE_OPACITY_SIZE_A;
		if ( m_ButtonLargeOpacitySize_B.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= LARGE_OPACITY_SIZE_B;
		if ( m_ButtonLargeOpacitySize_C.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedParenchymalAbnormalities |= LARGE_OPACITY_SIZE_C;

		pCurrentStudy -> m_bPleuralAbnormalitiesVisited = ( m_PleuralAbnormalityButton.m_SemanticState != BUTTON_UNTOUCHED );

		if ( m_ButtonPleuralYes.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_AnyPleuralAbnormalities = BOOL_YES;
		else if ( m_ButtonPleuralNo.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_AnyPleuralAbnormalities = BOOL_NO;
		else
			pCurrentStudy -> m_AnyPleuralAbnormalities = BOOL_NOT_SPECIFIED;

		pCurrentStudy -> m_ObservedPleuralPlaqueSites = 0;
		if ( m_ButtonPleuralSiteChestProfileNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralPlaqueSites |= PLAQUES_CHEST_WALL_PROFILE_NONE;
		if ( m_ButtonPleuralSiteChestProfileRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralPlaqueSites |= PLAQUES_CHEST_WALL_PROFILE_RIGHT;
		if ( m_ButtonPleuralSiteChestProfileLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralPlaqueSites |= PLAQUES_CHEST_WALL_PROFILE_LEFT;
		if ( m_ButtonPleuralSiteChestFaceOnNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralPlaqueSites |= PLAQUES_CHEST_WALL_FACE_ON_NONE;
		if ( m_ButtonPleuralSiteChestFaceOnRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralPlaqueSites |= PLAQUES_CHEST_WALL_FACE_ON_RIGHT;
		if ( m_ButtonPleuralSiteChestFaceOnLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralPlaqueSites |= PLAQUES_CHEST_WALL_FACE_ON_LEFT;
		if ( m_ButtonPleuralSiteDiaphragmNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralPlaqueSites |= PLAQUES_DIAPHRAGM_NONE;
		if ( m_ButtonPleuralSiteDiaphragmRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralPlaqueSites |= PLAQUES_DIAPHRAGM_RIGHT;
		if ( m_ButtonPleuralSiteDiaphragmLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralPlaqueSites |= PLAQUES_DIAPHRAGM_LEFT;
		if ( m_ButtonPleuralSiteOtherNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralPlaqueSites |= PLAQUES_OTHER_SITES_NONE;
		if ( m_ButtonPleuralSiteOtherRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralPlaqueSites |= PLAQUES_OTHER_SITES_RIGHT;
		if ( m_ButtonPleuralSiteOtherLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralPlaqueSites |= PLAQUES_OTHER_SITES_LEFT;

		pCurrentStudy -> m_ObservedPleuralCalcificationSites = 0;
		if ( m_ButtonCalcificationChestProfileNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralCalcificationSites |= CALCIFICATION_CHEST_WALL_PROFILE_NONE;
		if ( m_ButtonCalcificationChestProfileRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralCalcificationSites |= CALCIFICATION_CHEST_WALL_PROFILE_RIGHT;
		if ( m_ButtonCalcificationChestProfileLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralCalcificationSites |= CALCIFICATION_CHEST_WALL_PROFILE_LEFT;
		if ( m_ButtonCalcificationChestFaceOnNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralCalcificationSites |= CALCIFICATION_CHEST_WALL_FACE_ON_NONE;
		if ( m_ButtonCalcificationChestFaceOnRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralCalcificationSites |= CALCIFICATION_CHEST_WALL_FACE_ON_RIGHT;
		if ( m_ButtonCalcificationChestFaceOnLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralCalcificationSites |= CALCIFICATION_CHEST_WALL_FACE_ON_LEFT;
		if ( m_ButtonCalcificationDiaphragmNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralCalcificationSites |= CALCIFICATION_DIAPHRAGM_NONE;
		if ( m_ButtonCalcificationDiaphragmRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralCalcificationSites |= CALCIFICATION_DIAPHRAGM_RIGHT;
		if ( m_ButtonCalcificationDiaphragmLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralCalcificationSites |= CALCIFICATION_DIAPHRAGM_LEFT;
		if ( m_ButtonCalcificationOtherNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralCalcificationSites |= CALCIFICATION_OTHER_SITES_NONE;
		if ( m_ButtonCalcificationOtherRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralCalcificationSites |= CALCIFICATION_OTHER_SITES_RIGHT;
		if ( m_ButtonCalcificationOtherLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralCalcificationSites |= CALCIFICATION_OTHER_SITES_LEFT;

		pCurrentStudy -> m_ObservedPlaqueExtent = 0;
		if ( m_ButtonPleuralExtentNoneOnRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueExtent |= PLAQUE_EXTENT_NONE_ON_RIGHT;
		if ( m_ButtonPleuralExtentRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueExtent |= PLAQUE_EXTENT_RIGHT;
		if ( m_ButtonPleuralExtentRightSize1.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueExtent |= PLAQUE_EXTENT_RIGHT_SIZE1;
		if ( m_ButtonPleuralExtentRightSize2.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueExtent |= PLAQUE_EXTENT_RIGHT_SIZE2;
		if ( m_ButtonPleuralExtentRightSize3.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueExtent |= PLAQUE_EXTENT_RIGHT_SIZE3;
		if ( m_ButtonPleuralExtentNoneOnLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueExtent |= PLAQUE_EXTENT_NONE_ON_LEFT;
		if ( m_ButtonPleuralExtentLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueExtent |= PLAQUE_EXTENT_LEFT;
		if ( m_ButtonPleuralExtentLeftSize1.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueExtent |= PLAQUE_EXTENT_LEFT_SIZE1;
		if ( m_ButtonPleuralExtentLeftSize2.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueExtent |= PLAQUE_EXTENT_LEFT_SIZE2;
		if ( m_ButtonPleuralExtentLeftSize3.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueExtent |= PLAQUE_EXTENT_LEFT_SIZE3;

		pCurrentStudy -> m_ObservedPlaqueWidth = 0;
		if ( m_ButtonPleuralWidthNoneOnRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueWidth |= PLAQUE_WIDTH_NONE_ON_RIGHT;
		if ( m_ButtonPleuralWidthRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueWidth |= PLAQUE_WIDTH_RIGHT;
		if ( m_ButtonPleuralWidthRightSize1.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueWidth |= PLAQUE_WIDTH_RIGHT_SIZE1;
		if ( m_ButtonPleuralWidthRightSize2.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueWidth |= PLAQUE_WIDTH_RIGHT_SIZE2;
		if ( m_ButtonPleuralWidthRightSize3.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueWidth |= PLAQUE_WIDTH_RIGHT_SIZE3;
		if ( m_ButtonPleuralWidthNoneOnLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueWidth |= PLAQUE_WIDTH_NONE_ON_LEFT;
		if ( m_ButtonPleuralWidthLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueWidth |= PLAQUE_WIDTH_LEFT;
		if ( m_ButtonPleuralWidthLeftSize1.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueWidth |= PLAQUE_WIDTH_LEFT_SIZE1;
		if ( m_ButtonPleuralWidthLeftSize2.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueWidth |= PLAQUE_WIDTH_LEFT_SIZE2;
		if ( m_ButtonPleuralWidthLeftSize3.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPlaqueWidth |= PLAQUE_WIDTH_LEFT_SIZE3;

		pCurrentStudy -> m_ObservedCostophrenicAngleObliteration = 0;
		if ( m_ButtonAngleObliterationNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedCostophrenicAngleObliteration |= COSTOPHRENIC_ANGLE_OBLITERATION_NONE;
		if (m_ButtonAngleObliterationRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedCostophrenicAngleObliteration |= COSTOPHRENIC_ANGLE_OBLITERATION_RIGHT;
		if ( m_ButtonAngleObliterationLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedCostophrenicAngleObliteration |= COSTOPHRENIC_ANGLE_OBLITERATION_LEFT;

		pCurrentStudy -> m_ObservedPleuralThickeningSites = 0;
		if ( m_ButtonThickeningSiteChestProfileNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralThickeningSites |= THICKENING_CHEST_WALL_PROFILE_NONE;
		if ( m_ButtonThickeningSiteChestProfileRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralThickeningSites |= THICKENING_CHEST_WALL_PROFILE_RIGHT;
		if ( m_ButtonThickeningSiteChestProfileLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralThickeningSites |= THICKENING_CHEST_WALL_PROFILE_LEFT;
		if ( m_ButtonThickeningSiteChestFaceOnNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralThickeningSites |= THICKENING_CHEST_WALL_FACE_ON_NONE;
		if ( m_ButtonThickeningSiteChestFaceOnRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralThickeningSites |= THICKENING_CHEST_WALL_FACE_ON_RIGHT;
		if ( m_ButtonThickeningSiteChestFaceOnLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedPleuralThickeningSites |= THICKENING_CHEST_WALL_FACE_ON_LEFT;

		pCurrentStudy -> m_ObservedThickeningCalcificationSites = 0;
		if ( m_ButtonThickeningCalcificationChestProfileNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningCalcificationSites |= THICK_CALCIFICATION_CHEST_WALL_PROFILE_NONE;
		if ( m_ButtonThickeningCalcificationChestProfileRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningCalcificationSites |= THICK_CALCIFICATION_CHEST_WALL_PROFILE_RIGHT;
		if ( m_ButtonThickeningCalcificationChestProfileLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningCalcificationSites |= THICK_CALCIFICATION_CHEST_WALL_PROFILE_LEFT;
		if ( m_ButtonThickeningCalcificationChestFaceOnNone.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningCalcificationSites |= THICK_CALCIFICATION_CHEST_WALL_FACE_ON_NONE;
		if ( m_ButtonThickeningCalcificationChestFaceOnRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningCalcificationSites |= THICK_CALCIFICATION_CHEST_WALL_FACE_ON_RIGHT;
		if ( m_ButtonThickeningCalcificationChestFaceOnLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningCalcificationSites |= THICK_CALCIFICATION_CHEST_WALL_FACE_ON_LEFT;

		pCurrentStudy -> m_ObservedThickeningExtent = 0;
		if ( m_ButtonPleuralThickeningExtentNoneOnRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningExtent |= THICKENING_EXTENT_NONE_ON_RIGHT;
		if ( m_ButtonPleuralThickeningExtentRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningExtent |= THICKENING_EXTENT_RIGHT;
		if ( m_ButtonPleuralThickeningExtentRightSize1.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningExtent |= THICKENING_EXTENT_RIGHT_SIZE1;
		if ( m_ButtonPleuralThickeningExtentRightSize2.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningExtent |= THICKENING_EXTENT_RIGHT_SIZE2;
		if ( m_ButtonPleuralThickeningExtentRightSize3.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningExtent |= THICKENING_EXTENT_RIGHT_SIZE3;
		if ( m_ButtonPleuralThickeningExtentNoneOnLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningExtent |= THICKENING_EXTENT_NONE_ON_LEFT;
		if ( m_ButtonPleuralThickeningExtentLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningExtent |= THICKENING_EXTENT_LEFT;
		if ( m_ButtonPleuralThickeningExtentLeftSize1.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningExtent |= THICKENING_EXTENT_LEFT_SIZE1;
		if ( m_ButtonPleuralThickeningExtentLeftSize2.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningExtent |= THICKENING_EXTENT_LEFT_SIZE2;
		if ( m_ButtonPleuralThickeningExtentLeftSize3.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningExtent |= THICKENING_EXTENT_LEFT_SIZE3;

		pCurrentStudy -> m_ObservedThickeningWidth = 0;
		if ( m_ButtonPleuralThickeningWidthNoneOnRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningWidth |= THICKENING_WIDTH_NONE_ON_RIGHT;
		if ( m_ButtonPleuralThickeningWidthRight.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningWidth |= THICKENING_WIDTH_RIGHT;
		if ( m_ButtonPleuralThickeningWidthRightSize1.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningWidth |= THICKENING_WIDTH_RIGHT_SIZE1;
		if ( m_ButtonPleuralThickeningWidthRightSize2.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningWidth |= THICKENING_WIDTH_RIGHT_SIZE2;
		if ( m_ButtonPleuralThickeningWidthRightSize3.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningWidth |= THICKENING_WIDTH_RIGHT_SIZE3;
		if ( m_ButtonPleuralThickeningWidthNoneOnLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningWidth |= THICKENING_WIDTH_NONE_ON_LEFT;
		if ( m_ButtonPleuralThickeningWidthLeft.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningWidth |= THICKENING_WIDTH_LEFT;
		if ( m_ButtonPleuralThickeningWidthLeftSize1.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningWidth |= THICKENING_WIDTH_LEFT_SIZE1;
		if ( m_ButtonPleuralThickeningWidthLeftSize2.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningWidth |= THICKENING_WIDTH_LEFT_SIZE2;
		if ( m_ButtonPleuralThickeningWidthLeftSize3.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedThickeningWidth |= THICKENING_WIDTH_LEFT_SIZE3;

		pCurrentStudy -> m_bOtherAbnormalitiesVisited = ( m_OtherAbnormalityButton.m_SemanticState != BUTTON_UNTOUCHED );
		
		if ( m_ButtonOtherYes.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_AnyOtherAbnormalities = BOOL_YES;
		else if ( m_ButtonOtherNo.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_AnyOtherAbnormalities = BOOL_NO;
		else
			pCurrentStudy -> m_AnyOtherAbnormalities = BOOL_NOT_SPECIFIED;

		pCurrentStudy -> m_ObservedOtherSymbols = 0L;
		if ( m_ButtonSymbol_aa.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_AA;
		if ( m_ButtonSymbol_at.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_AT;
		if ( m_ButtonSymbol_ax.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_AX;
		if ( m_ButtonSymbol_bu.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_BU;
		if ( m_ButtonSymbol_ca.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_CA;
		if ( m_ButtonSymbol_cg.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_CG;
		if ( m_ButtonSymbol_cn.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_CN;
		if ( m_ButtonSymbol_co.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_CO;
		if ( m_ButtonSymbol_cp.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_CP;
		if ( m_ButtonSymbol_cv.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_CV;
		if ( m_ButtonSymbol_di.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_DI;
		if ( m_ButtonSymbol_ef.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_EF;
		if ( m_ButtonSymbol_em.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_EM;
		if ( m_ButtonSymbol_es.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_ES;
		if ( m_ButtonSymbol_fr.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_FR;
		if ( m_ButtonSymbol_hi.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_HI;
		if ( m_ButtonSymbol_ho.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_HO;
		if ( m_ButtonSymbol_id.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_ID;
		if ( m_ButtonSymbol_ih.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_IH;
		if ( m_ButtonSymbol_kl.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_KL;
		if ( m_ButtonSymbol_me.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_ME;
		if ( m_ButtonSymbol_pa.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_PA;
		if ( m_ButtonSymbol_pb.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_PB;
		if ( m_ButtonSymbol_pi.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_PI;
		if ( m_ButtonSymbol_px.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_PX;
		if ( m_ButtonSymbol_ra.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_RA;
		if ( m_ButtonSymbol_rp.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_RP;
		if ( m_ButtonSymbol_tb.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_TB;
		if ( m_ButtonSymbol_od.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherSymbols |= OBSERVED_SYMBOL_OD;

		pCurrentStudy -> m_ObservedOtherAbnormalities = 0L;
		if ( m_ButtonEventration.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_EVENTRATION;
		if ( m_ButtonHiatalHernia.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_HIATAL_HERNIA;
		if ( m_ButtonBronchovascularMarkings.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_BRONCHOVASCULAR_MARKINGS;
		if ( m_ButtonHyperinflation.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_HYPERINFLATION;
		if ( m_ButtonBonyChestCage.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_BONY_CHEST_CAGE;
		if ( m_ButtonFractureHealed.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_FRACTURE_HEALED;
		if ( m_ButtonFractureNonHealed.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_FRACTURE_NONHEALED;
		if ( m_ButtonScoliosis.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_SCOLIOSIS;
		if ( m_ButtonVertebralColumn.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_VERTEBRAL_COLUMN;
		if ( m_ButtonAzygosLobe.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_AZYGOS_LOBE;
		if ( m_ButtonLungDensity.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_LUNG_DENSITY;
		if ( m_ButtonInfiltrate.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_INFILTRATE;
		if ( m_ButtonNodularLesion.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_NODULAR_LESION;
		if ( m_ButtonForeignBody.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_FOREIGN_BODY;
		if ( m_ButtonPostSurgical.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_POSTSURGICAL;
		if ( m_ButtonCyst.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_CYST;
		if ( m_ButtonAortaAnomaly.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_AORTA_ANOMALY;
		if ( m_ButtonVascularAbnormality.m_ToggleState == BUTTON_ON )
			pCurrentStudy -> m_ObservedOtherAbnormalities |= OBSERVED_VASCULAR_ABNORMALITY;

		m_EditOtherComments.GetWindowText( pCurrentStudy -> m_OtherAbnormalitiesCommentsText );

		if ( m_ImageOther.m_ToggleState == BUTTON_ON )
			m_EditImageQualityOther.GetWindowText( pCurrentStudy -> m_ImageDefectOtherText );
		else
			pCurrentStudy -> m_ImageDefectOtherText = "";
		}
}



