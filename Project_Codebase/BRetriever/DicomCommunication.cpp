// DicomCommunication.cpp - Implements data structures and functions that support the
// communications state machine.  All Dicom communications are handled through
// the state machine.
//
//	Written by Thomas L. Atwood
//	P.O. Box 1089
//	West Fork, Arkansas 72774
//	(479)445-4690
//	TomAtwood@Earthlink.net
//
//	Copyright © 2010 CDC
//
//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:
//	
//	The above copyright notice and this permission notice shall be included in
//	all copies or substantial portions of the Software.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//	THE SOFTWARE.
//
#include "Module.h"
#include "ReportStatus.h"
#include "Dicom.h"
#include "Configuration.h"
#include "Operation.h"
#include "ProductDispatcher.h"
#include "WinSocketsAPI.h"
#include "DicomAssoc.h"
#include "DicomCommand.h"
#include "DicomAcceptor.h"
#include "DicomInitiator.h"
#include "DicomCommunication.h"


//___________________________________________________________________________
//
// The module header for this module:
//

static MODULE_INFO		DicomStateModuleInfo = { MODULE_DICOMSTATE, "Dicom Communications Module", InitDicomStateModule, CloseDicomStateModule };


static ERROR_DICTIONARY_ENTRY	DicomStateErrorCodes[] =
			{
				{ DICOMSTATE_ERROR_INSUFFICIENT_MEMORY			, "There is not enough memory to allocate a data structure." },
				{ DICOMSTATE_ERROR_INVALID_FSM_EVENT			, "An invalid event was specified to the finite state machine." },
				{ DICOMSTATE_ERROR_INVALID_FSM_STATE			, "An invalid state was specified to the finite state machine." },
				{ DICOMSTATE_ERROR_NO_FSM_ACTION_DEFINED		, "Due to error, further state transitions for this association have been abandoned." },
				{ DICOMSTATE_ERROR_PARSE_EXPECT_ASSOC_REQUEST	, "During response parsing, an association request was expected but was not found." },
				{ DICOMSTATE_ERROR_ASSOCIATION_ABORT			, "The association was aborted due to corrupted received data." },
				{ 0												, NULL }
			};


static ERROR_DICTIONARY_MODULE		DicomStateStatusErrorDictionary =
										{
										MODULE_DICOMSTATE,
										DicomStateErrorCodes,
										DICOMSTATE_ERROR_DICT_LENGTH,
										0
										};

static BOOL						bSocketsEnabled = FALSE;



// This function must be called before any other function in this module.
void InitDicomStateModule()
{
	LinkModuleToList( &DicomStateModuleInfo );
	RegisterErrorDictionary( &DicomStateStatusErrorDictionary );
}


void CloseDicomStateModule()
{
	if ( bSocketsEnabled )
		TerminateWindowsSockets();
	bSocketsEnabled = FALSE;
}



static ACTION_TABLE_ENTRY	ActionTable[ NUMBER_OF_ACTION_IDS ] =
	{
	{ ACTION_AE_1_InformThisNodeAssociationRequested,					"AE_1_InformThisNodeAssociationRequested" },
	{ ACTION_AE_2_RespondToAssociationRequest,							"AE_2_RespondToAssociationRequest" },
	{ ACTION_AE_3_AcceptAssociationRequest,								"AE_3_AcceptAssociationRequest" },
	{ ACTION_AE_4_RejectAssociationRequest,								"AE_4_RejectAssociationRequest" },

	{ ACTION_DT_1_SendMessage,											"DT_1_SendMessage" },
	{ ACTION_DT_2_ProcessReceivedMessage,								"DT_2_ProcessReceivedMessage" },

	{ ACTION_AR_1_SendAssociationReleaseRequest,						"AR_1_SendAssociationReleaseRequest" },
	{ ACTION_AR_2_InformThisNodeReleaseRequested,						"AR_2_InformThisNodeReleaseRequested" },
	{ ACTION_AR_3_InformThisNodeReleasedAndCloseConnection,				"AR_3_InformThisNodeReleasedAndCloseConnection" },
	{ ACTION_AR_4_SendTimedReplyToReleaseRequest,						"AR_4_SendTimedReplyToReleaseRequest" },
	{ ACTION_AR_5_StopTimerAndGoIdle,									"AR_5_StopTimerAndGoIdle" },
	{ ACTION_AR_6_InformThisNodeMessageReceived,						"AR_6_InformThisNodeMessageReceived" },
	{ ACTION_AR_7_SendMessageDuringReleaseProcessing,					"AR_7_SendMessageDuringReleaseProcessing" },
	{ ACTION_AR_8_InformThisNodeCollisionReleaseRequested,				"AR_8_InformThisNodeCollisionReleaseRequested" },
	{ ACTION_AR_9_SendReplyToReleaseRequest,							"AR_9_SendReplyToReleaseRequest" },
	{ ACTION_AR_10_InformThisNodeAssociationReleased,					"AR_10_InformThisNodeAssociationReleased" },

	{ ACTION_AA_1_SendTimedAssociationAbort,							"AA_1_SendTimedAssociationAbort" },
	{ ACTION_AA_2_StopTimerAndCloseTransportConnection,					"AA_2_StopTimerAndCloseTransportConnection" },
	{ ACTION_AA_3_InformThisNodeAssociationAbortedAndCloseConnection,	"AA_3_InformThisNodeAssociationAbortedAndCloseConnection" },
	{ ACTION_AA_4_SendProviderAssociationAbort,							"AA_4_SendProviderAssociationAbort" },
	{ ACTION_AA_5_StopTimerAndGoIdle,									"AA_5_StopTimerAndGoIdle" },
	{ ACTION_AA_6_IgnoreReceivedMessage,								"AA_6_IgnoreReceivedMessage" },
	{ ACTION_AA_7_SendAssociationAbort,									"AA_7_SendAssociationAbort" },
	{ ACTION_AA_8_SendProviderAbortAndInformThisNode,					"AA_8_SendProviderAbortAndInformThisNode" }
	};


// Normal state progressions:
//
//	STATE1_IDLE:	EVENT_RECEPTION_OF_TRANSPORT_CONNECTION_REQUEST	==> ACTION_AE_1_INFORM_THIS_NODE_CONNECTION_REQUESTED	--> STATE2_TRANSPORT_CONNECTION_LISTENING
//  STATE2:			EVENT_RECEPTION_OF_ASSOCIATION_REQUEST			==> ACTION_AE_2_RESPOND_TO_ASSOCIATION_REQUEST			--> STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE
//  STATE3:			EVENT_THIS_NODE_DECIDES_TO_ACCEPT_ASSOCIATION	==> ACTION_AE_3_ACCEPT_ASSOCIATION_REQUEST				--> STATE6_READY_FOR_DATA_TRANSFER
//			or		EVENT_THIS_NODE_DECIDES_TO_REJECT_ASSOCIATION	==> ACTION_AE_4_REJECT_ASSOCIATION_REQUEST				--> STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE
//
//  ______________________________________________
//  STATE6_READY_FOR_DATA_TRANSFER:  This state is where the message transfer (the Dicom PDATA service) is handled.  The message loop is typically initiated
//									 by the association requestor.  If the local end point is the requestor, then the message loop would look like this:
//
//  STATE6:			EVENT_THIS_NODE_REQUESTS_TO_SEND_MESSAGE		==> ACTION_DT_1_SEND_MESSAGE							--> STATE6_READY_FOR_DATA_TRANSFER
//  STATE6:			EVENT_RECEPTION_OF_MESSAGE						==> ACTION_DT_2_PROCESS_RECEIVED_MESSAGE				--> STATE6_READY_FOR_DATA_TRANSFER
//  STATE6:			EVENT_THIS_NODE_REQUESTS_TO_SEND_MESSAGE		==> ACTION_DT_1_SEND_MESSAGE							--> STATE6_READY_FOR_DATA_TRANSFER
//  STATE6:			EVENT_RECEPTION_OF_MESSAGE						==> ACTION_DT_2_PROCESS_RECEIVED_MESSAGE				--> STATE6_READY_FOR_DATA_TRANSFER
//
//									 and so forth.  After successful completion of the requestion operation, the association requestor requests a release:
//
//  STATE6:			EVENT_THIS_NODE_REQUESTS_ASSOCIATION_RELEASE	==> ACTION_AR_1_SEND_ASSOCIATION_RELEASE_REQUEST		--> STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST
//  STATE7:			EVENT_RECEPTION_OF_ASSOCIATION_RELEASE_REPLY	==> ACTION_AR_3_INFORM_THIS_NODE_RELEASED_CLOSE_CONNECT	--> STATE1_IDLE
//
//									 If the remote application entity is the association requestor, then the local end point's message loop would look like this:
//
//  STATE6:			EVENT_RECEPTION_OF_MESSAGE						==> ACTION_DT_2_PROCESS_RECEIVED_MESSAGE				--> STATE6_READY_FOR_DATA_TRANSFER
//  STATE6:			EVENT_THIS_NODE_REQUESTS_TO_SEND_MESSAGE		==> ACTION_DT_1_SEND_MESSAGE							--> STATE6_READY_FOR_DATA_TRANSFER
//  STATE6:			EVENT_RECEPTION_OF_MESSAGE						==> ACTION_DT_2_PROCESS_RECEIVED_MESSAGE				--> STATE6_READY_FOR_DATA_TRANSFER
//  STATE6:			EVENT_THIS_NODE_REQUESTS_TO_SEND_MESSAGE		==> ACTION_DT_1_SEND_MESSAGE							--> STATE6_READY_FOR_DATA_TRANSFER
//
//									 and so forth.  After successful completion of the requestion operation, the association requestor requests a release:
//
//  STATE6:			EVENT_RECEPTION_OF_ASSOCIATION_RELEASE_REQUEST	==> ACTION_AR_2_INFORM_THIS_NODE_RELEASE_REQUESTED		--> STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE
//  STATE8:			EVENT_THIS_NODE_RESPONDS_TO_RELEASE_REQUEST		==> ACTION_AR_4_SEND_TIMED_REPLY_TO_RELEASE_REQUEST		--> STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE
//  STATE13:		EVENT_THIS_NODE_TRANSPORT_CONNECTION_CLOSED		==> ACTION_AR_5_STOP_TIMER_AND_GO_IDLE					--> STATE1_IDLE
//
//  The association acceptor can also request release from the association.  In addition, either application entity can send an association abort at any time.  These
//  situations must be handled according to the state machine event progression (specified below).
//


static STATE_TRANSITION		StateTable[ NUMBER_OF_EVENT_IDS ][ NUMBER_OF_STATE_IDS ] =
	{
	//		Current State									Action to be taken									Next State

// Association establishment events:
	{	// Event = EVENT_RECEPTION_OF_TRANSPORT_CONNECTION_REQUEST

	{ STATE1_IDLE,										ACTION_AE_1_INFORM_THIS_NODE_CONNECTION_REQUESTED,	STATE2_TRANSPORT_CONNECTION_LISTENING			},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						}

	},
	
	{	// Event = EVENT_RECEPTION_OF_ASSOCIATION_REQUEST

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_AE_2_RESPOND_TO_ASSOCIATION_REQUEST,			STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE	},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_AA_7_SEND_ASSOCIATION_ABORT,					STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		}

	},
	
	{	// Event = EVENT_THIS_NODE_DECIDES_TO_ACCEPT_ASSOCIATION

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_AE_3_ACCEPT_ASSOCIATION_REQUEST,				STATE6_READY_FOR_DATA_TRANSFER					},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						}

	},
	
	{	// Event = EVENT_THIS_NODE_DECIDES_TO_REJECT_ASSOCIATION

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_AE_4_REJECT_ASSOCIATION_REQUEST,				STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						}

	},
	
// Data transfer events:
	{	// Event = EVENT_THIS_NODE_REQUESTS_TO_SEND_MESSAGE

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_DT_1_SEND_MESSAGE,							STATE6_READY_FOR_DATA_TRANSFER					},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_AR_7_SEND_MESSAGE_DURING_RELEASE_PROCESSING,	STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE		},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						}

	},
	
	{	// Event = EVENT_RECEPTION_OF_MESSAGE

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_AR_1_SEND_ASSOCIATION_RELEASE_REQUEST,		STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_DT_2_PROCESS_RECEIVED_MESSAGE,				STATE6_READY_FOR_DATA_TRANSFER					},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_AR_6_INFORM_THIS_NODE_MESSAGE_RECEIVED,		STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST	},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_AA_6_IGNORE_RECEIVED_MESSAGE,				STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		}

	},
	
// Association release events:
	{	// Event = EVENT_THIS_NODE_REQUESTS_ASSOCIATION_RELEASE

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_AR_1_SEND_ASSOCIATION_RELEASE_REQUEST,		STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST	},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						}

	},
	
	{	// Event = EVENT_RECEPTION_OF_ASSOCIATION_RELEASE_REQUEST

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_AA_1_SEND_TIMED_ASSOCIATION_ABORT,			STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_AR_2_INFORM_THIS_NODE_RELEASE_REQUESTED,		STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE		},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_AR_8_INFORM_THIS_NODE_COLLISION_RELEASE_REQ,	STATE_NO_STATE_SPECIFIED						},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_AA_6_IGNORE_RECEIVED_MESSAGE,				STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		}

	},
	
	{	// Event = EVENT_RECEPTION_OF_ASSOCIATION_RELEASE_REPLY

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_AA_1_SEND_TIMED_ASSOCIATION_ABORT,			STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_AR_3_INFORM_THIS_NODE_RELEASED_CLOSE_CONNECT,STATE1_IDLE										},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_AR_10_INFORM_THIS_NODE_ASSOCIATION_RELEASED,	STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_AR_3_INFORM_THIS_NODE_RELEASED_CLOSE_CONNECT,STATE1_IDLE										},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_AA_6_IGNORE_RECEIVED_MESSAGE,				STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		}

	},
	
	{	// Event = EVENT_THIS_NODE_RESPONDS_TO_RELEASE_REQUEST

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_AR_4_SEND_TIMED_REPLY_TO_RELEASE_REQUEST,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_AR_9_SEND_REPLY_TO_RELEASE_REQUEST,			STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION	},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_AR_4_SEND_TIMED_REPLY_TO_RELEASE_REQUEST,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						}

	},
	
// Association abort events:
	{	// Event = EVENT_THIS_NODE_REQUESTS_ASSOCIATION_ABORT

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_AA_1_SEND_TIMED_ASSOCIATION_ABORT,			STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_AA_2_STOP_TIMER_CLOSE_TRANSPORT_CONNECTION,	STATE1_IDLE										},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_AA_1_SEND_TIMED_ASSOCIATION_ABORT,			STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_AA_1_SEND_TIMED_ASSOCIATION_ABORT,			STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_AA_1_SEND_TIMED_ASSOCIATION_ABORT,			STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_AA_1_SEND_TIMED_ASSOCIATION_ABORT,			STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_AA_1_SEND_TIMED_ASSOCIATION_ABORT,			STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_AA_1_SEND_TIMED_ASSOCIATION_ABORT,			STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_AA_1_SEND_TIMED_ASSOCIATION_ABORT,			STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						}

	},
	
	{	// Event = EVENT_RECEPTION_OF_ASSOCIATION_ABORT_REQUEST

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_AA_2_STOP_TIMER_CLOSE_TRANSPORT_CONNECTION,	STATE1_IDLE										},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_AA_3_INFORM_THIS_NODE_ABORTED_CLOSE_CONNECT,	STATE1_IDLE										},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_AA_3_INFORM_THIS_NODE_ABORTED_CLOSE_CONNECT,	STATE1_IDLE										},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_AA_3_INFORM_THIS_NODE_ABORTED_CLOSE_CONNECT,	STATE1_IDLE										},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_AA_3_INFORM_THIS_NODE_ABORTED_CLOSE_CONNECT,	STATE1_IDLE										},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_AA_3_INFORM_THIS_NODE_ABORTED_CLOSE_CONNECT,	STATE1_IDLE										},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_AA_3_INFORM_THIS_NODE_ABORTED_CLOSE_CONNECT,	STATE1_IDLE										},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_AA_3_INFORM_THIS_NODE_ABORTED_CLOSE_CONNECT,	STATE1_IDLE										},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE,	ACTION_AA_3_INFORM_THIS_NODE_ABORTED_CLOSE_CONNECT,	STATE1_IDLE										},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_AA_2_STOP_TIMER_CLOSE_TRANSPORT_CONNECTION,	STATE1_IDLE										}

	},
	
	{	// Event = EVENT_THIS_NODE_TRANSPORT_CONNECTION_CLOSED

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_AA_5_STOP_TIMER_AND_GO_IDLE,					STATE1_IDLE										},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_AA_4_SEND_PROVIDER_ASSOCIATION_ABORT,		STATE1_IDLE										},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_AA_4_SEND_PROVIDER_ASSOCIATION_ABORT,		STATE1_IDLE										},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_AA_4_SEND_PROVIDER_ASSOCIATION_ABORT,		STATE1_IDLE										},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_AA_4_SEND_PROVIDER_ASSOCIATION_ABORT,		STATE1_IDLE										},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_AA_4_SEND_PROVIDER_ASSOCIATION_ABORT,		STATE1_IDLE										},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_AA_4_SEND_PROVIDER_ASSOCIATION_ABORT,		STATE1_IDLE										},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_AA_4_SEND_PROVIDER_ASSOCIATION_ABORT,		STATE1_IDLE										},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_AA_4_SEND_PROVIDER_ASSOCIATION_ABORT,		STATE1_IDLE										},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE,	ACTION_AA_4_SEND_PROVIDER_ASSOCIATION_ABORT,		STATE1_IDLE										},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_AR_5_STOP_TIMER_AND_GO_IDLE,					STATE1_IDLE										}

	},
	
	{	// Event = EVENT_ASSOCIATION_EVENT_TIMER_HAS_EXPIRED

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_AA_2_STOP_TIMER_CLOSE_TRANSPORT_CONNECTION,	STATE1_IDLE										},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_AA_2_STOP_TIMER_CLOSE_TRANSPORT_CONNECTION,	STATE1_IDLE										},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_AA_2_STOP_TIMER_CLOSE_TRANSPORT_CONNECTION,	STATE1_IDLE										}

	},
	
	{	// Event = EVENT_INVALID_MESSAGE_FORMAT_RECEIVED

	{ STATE1_IDLE,										ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE2_TRANSPORT_CONNECTION_LISTENING,			ACTION_AA_1_SEND_TIMED_ASSOCIATION_ABORT,			STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE4_AWAITING_THIS_NODE_TRANSPORT_CONNECTION,	ACTION_NO_ACTION_SPECIFIED,							STATE_NO_STATE_SPECIFIED						},
	{ STATE6_READY_FOR_DATA_TRANSFER,					ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE,		ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE9_REL_COLLIDE_REQ_AWAIT_THIS_NODE_REPLY,		ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE10_REL_COLLIDE_ACC_AWAIT_REPLY_RECEPTION,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE11_REL_COLLIDE_REQ_AWAIT_REPLY_RECEPTION,	ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE12_REL_COLLIDE_ACC_AWAIT_THIS_NODE_RESPONSE, ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE,	STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		},
	{ STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE,		ACTION_AA_7_SEND_ASSOCIATION_ABORT,					STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE		}

	}

	};			// End of state transition table.


//
// This is the main entry point for processing an association.  It all starts here.
// Make sure a value is set for the pAssociation -> EventIDReadyToBeProcessed property.
// If this value is EVENT_NO_EVENT_ID_SPECIFIED, the association will remain inactive
// until a recognized event occurs and its value is set for this association property.
// The usual event that starts things off is EVENT_THIS_NODE_REQUESTS_ASSOCIATION or
// EVENT_RECEPTION_OF_TRANSPORT_CONNECTION_REQUEST.
//
// Each call to this function must occur from a separate thread, since multiple associations
// can be processed at a time.
//
BOOL StartNewAssociation( DICOM_ASSOCIATION *pAssociation )
{
	BOOL				bNoError = TRUE;
	BOOL				bAssociationStillActive = TRUE;

	pAssociation -> CurrentStateID = STATE1_IDLE;
	pAssociation -> bAssociationIsActive = TRUE;
	while ( bAssociationStillActive && pAssociation -> EventIDReadyToBeProcessed != EVENT_NO_EVENT_ID_SPECIFIED )
		{
		// Process the latest event.
		bNoError = ExecuteStateTransition( pAssociation );
		bAssociationStillActive = ( bNoError && pAssociation -> bAssociationIsActive );
		}

	return bNoError;
}

// This function examines the association's CurrentStateID and EventIDReadyToBeProcessed
// attributes in order to determine which state transition function to call, based on the
// state table above.  It then sets the next state into CurrentStateID and exits.
BOOL ExecuteStateTransition( DICOM_ASSOCIATION *pAssociation )
{
	BOOL					bNoError = TRUE;
	STATE_TRANSITION		*pStateTableRow;
	unsigned short			CurrentStateID;
	unsigned short			EventID;
	FSM_ACTION_FUNCTION		ActionFunction;
	
	CurrentStateID = pAssociation -> CurrentStateID;
	EventID = pAssociation -> EventIDReadyToBeProcessed;
	// Check if the given event is valid, if not return an error.
	if ( EventID < 0 || EventID >= NUMBER_OF_EVENT_IDS )
		{
		bNoError = FALSE;
		RespondToError( MODULE_DICOMSTATE, DICOMSTATE_ERROR_INVALID_FSM_EVENT );
		}
	// Check if the given state is valid, if not return an error.
	if ( CurrentStateID < 0 || CurrentStateID >= NUMBER_OF_STATE_IDS )
		{
		bNoError = FALSE;
		RespondToError( MODULE_DICOMSTATE, DICOMSTATE_ERROR_INVALID_FSM_STATE );
		}
	if ( bNoError )
		{
		pStateTableRow = &StateTable[ EventID ][ CurrentStateID ];
		// If the state table's entry specifies an action function, execute this function and return
		// it's result value. If there is no action function defined, return a corresponding error.
		if ( pStateTableRow -> ActionID != ACTION_NO_ACTION_SPECIFIED )
			{
			// Reset the most recent event ID for this association.
			pAssociation -> EventIDReadyToBeProcessed = EVENT_NO_EVENT_ID_SPECIFIED;
			ActionFunction = ActionTable[ pStateTableRow -> ActionID ].ActionFunction;
			// The action function may generate a new event and load it's ID into
			//	pAssociation -> EventIDReadyToBeProcessed, in which case this
			//	ExecuteStateTransition() function can be called again immediately.
			bNoError = ActionFunction( pAssociation );
			pAssociation -> CurrentStateID = pStateTableRow -> NextStateID;
			}
		else
			{
			bNoError = FALSE;
			RespondToError( MODULE_DICOMSTATE, DICOMSTATE_ERROR_NO_FSM_ACTION_DEFINED );
			pAssociation -> CurrentStateID = STATE1_IDLE;
			}
		}

	return bNoError;
}


// Normal state progressions:
//
//	STATE1_IDLE:	EVENT_RECEPTION_OF_TRANSPORT_CONNECTION_REQUEST	==> ACTION_AE_1_INFORM_THIS_NODE_CONNECTION_REQUESTED	--> STATE2_TRANSPORT_CONNECTION_LISTENING
//  STATE2:			EVENT_RECEPTION_OF_ASSOCIATION_REQUEST			==> ACTION_AE_2_RESPOND_TO_ASSOCIATION_REQUEST			--> STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE
//  STATE3:			EVENT_THIS_NODE_DECIDES_TO_ACCEPT_ASSOCIATION	==> ACTION_AE_3_ACCEPT_ASSOCIATION_REQUEST				--> STATE6_READY_FOR_DATA_TRANSFER
//			or		EVENT_THIS_NODE_DECIDES_TO_REJECT_ASSOCIATION	==> ACTION_AE_4_REJECT_ASSOCIATION_REQUEST				--> STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE
//
//  ______________________________________________
//  STATE6_READY_FOR_DATA_TRANSFER:  This state is where the message transfer (the Dicom PDATA service) is handled.  The message loop is typically initiated
//									 by the association requestor.  If the local end point is the requestor, then the message loop would look like this:
//
//  STATE6:			EVENT_THIS_NODE_REQUESTS_TO_SEND_MESSAGE		==> ACTION_DT_1_SEND_MESSAGE							--> STATE6_READY_FOR_DATA_TRANSFER
//  STATE6:			EVENT_RECEPTION_OF_MESSAGE						==> ACTION_DT_2_PROCESS_RECEIVED_MESSAGE				--> STATE6_READY_FOR_DATA_TRANSFER
//  STATE6:			EVENT_THIS_NODE_REQUESTS_TO_SEND_MESSAGE		==> ACTION_DT_1_SEND_MESSAGE							--> STATE6_READY_FOR_DATA_TRANSFER
//  STATE6:			EVENT_RECEPTION_OF_MESSAGE						==> ACTION_DT_2_PROCESS_RECEIVED_MESSAGE				--> STATE6_READY_FOR_DATA_TRANSFER
//
//									 and so forth.  After successful completion of the requestion operation, the association requestor requests a release:
//
//  STATE6:			EVENT_THIS_NODE_REQUESTS_ASSOCIATION_RELEASE	==> ACTION_AR_1_SEND_ASSOCIATION_RELEASE_REQUEST		--> STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST
//  STATE7:			EVENT_RECEPTION_OF_ASSOCIATION_RELEASE_REPLY	==> ACTION_AR_3_INFORM_THIS_NODE_RELEASED_CLOSE_CONNECT	--> STATE1_IDLE
//
//									 If the remote application entity is the association requestor, then the local end point's message loop would look like this:
//
//  STATE6:			EVENT_RECEPTION_OF_MESSAGE						==> ACTION_DT_2_PROCESS_RECEIVED_MESSAGE				--> STATE6_READY_FOR_DATA_TRANSFER
//  STATE6:			EVENT_THIS_NODE_REQUESTS_TO_SEND_MESSAGE		==> ACTION_DT_1_SEND_MESSAGE							--> STATE6_READY_FOR_DATA_TRANSFER
//  STATE6:			EVENT_RECEPTION_OF_MESSAGE						==> ACTION_DT_2_PROCESS_RECEIVED_MESSAGE				--> STATE6_READY_FOR_DATA_TRANSFER
//  STATE6:			EVENT_THIS_NODE_REQUESTS_TO_SEND_MESSAGE		==> ACTION_DT_1_SEND_MESSAGE							--> STATE6_READY_FOR_DATA_TRANSFER
//
//									 and so forth.  After successful completion of the requestion operation, the association requestor requests a release:
//
//  STATE6:			EVENT_RECEPTION_OF_ASSOCIATION_RELEASE_REQUEST	==> ACTION_AR_2_INFORM_THIS_NODE_RELEASE_REQUESTED		--> STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE
//  STATE8:			EVENT_THIS_NODE_RESPONDS_TO_RELEASE_REQUEST		==> ACTION_AR_4_SEND_TIMED_REPLY_TO_RELEASE_REQUEST		--> STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE
//  STATE13:		EVENT_THIS_NODE_TRANSPORT_CONNECTION_CLOSED		==> ACTION_AR_5_STOP_TIMER_AND_GO_IDLE					--> STATE1_IDLE
//
//  The association acceptor can also request release from the association.  In addition, either application entity can send an association abort at any time.  These
//  situations must be handled according to the state machine event progression.
//


// Issue Transport connection response primitive; start ARTIM timer.  Next state is State2.
//	STATE1_IDLE:	EVENT_RECEPTION_OF_TRANSPORT_CONNECTION_REQUEST	==> ACTION_AE_1_INFORM_THIS_NODE_CONNECTION_REQUESTED	--> STATE2_TRANSPORT_CONNECTION_LISTENING
BOOL ACTION_AE_1_InformThisNodeAssociationRequested( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	// A TCP connection has been established.  Wait for association request.
	bNoError = ReceiveDicomBuffer( pAssociation );
	if ( bNoError )
		{
		LogMessage( "Processing presumed association request.", MESSAGE_TYPE_SUPPLEMENTARY );
		bNoError = ParseReceivedDicomBuffer( pAssociation );
		}
	if ( pAssociation -> EventIDReadyToBeProcessed != EVENT_RECEPTION_OF_ASSOCIATION_REQUEST )
		{
		bNoError = FALSE;
		RespondToError( MODULE_DICOMSTATE, DICOMSTATE_ERROR_PARSE_EXPECT_ASSOC_REQUEST );
		pAssociation -> EventIDReadyToBeProcessed = EVENT_INVALID_MESSAGE_FORMAT_RECEIVED;
		}

	return bNoError;
}

// Stop ARTIM timer and if A-ASSOCIATE-RQ acceptable by service provider:
//	 issue A-ASSOCIATE indication primitive.  Next state is State3.
// otherwise: 
//	 issue A-ASSOCIATE RJ PDU and start ARTIM timer.  Next state is State13.
//  STATE2:		EVENT_RECEPTION_OF_ASSOCIATION_REQUEST		==> ACTION_AE_2_RESPOND_TO_ASSOCIATION_REQUEST	--> STATE3_AWAITING_THIS_NODE_ASSOCIATION_RESPONSE
BOOL ACTION_AE_2_RespondToAssociationRequest( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	bNoError = PrepareAssociationAcceptanceBuffer( pAssociation );
	if ( bNoError )
		pAssociation -> EventIDReadyToBeProcessed = EVENT_THIS_NODE_DECIDES_TO_ACCEPT_ASSOCIATION;
	else
		pAssociation -> EventIDReadyToBeProcessed = EVENT_THIS_NODE_DECIDES_TO_REJECT_ASSOCIATION;

	return bNoError;
}

// Send A-ASSOCIATE-AC PDU.  Next state is State6.
//  STATE3:		EVENT_THIS_NODE_DECIDES_TO_ACCEPT_ASSOCIATION	==> ACTION_AE_3_ACCEPT_ASSOCIATION_REQUEST	--> STATE6_READY_FOR_DATA_TRANSFER
BOOL ACTION_AE_3_AcceptAssociationRequest( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	bNoError = SendDicomBuffer( pAssociation, TRUE );
	pAssociation -> EventIDReadyToBeProcessed = EVENT_RECEPTION_OF_MESSAGE;

	return bNoError;
}


// Send A-ASSOCIATE-RJ PDU and start ARTIM timer.  Next state is State13.
//  STATE3:		EVENT_THIS_NODE_DECIDES_TO_REJECT_ASSOCIATION	==> ACTION_AE_4_REJECT_ASSOCIATION_REQUEST	--> STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE
BOOL ACTION_AE_4_RejectAssociationRequest( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	bNoError = PrepareAssociationRejectionBuffer( pAssociation );
	if ( bNoError )
		bNoError = SendDicomBuffer( pAssociation, TRUE );
	pAssociation -> EventIDReadyToBeProcessed = EVENT_ASSOCIATION_EVENT_TIMER_HAS_EXPIRED;

	return bNoError;
}


// Send P-DATA-TF PDU.  Next state is State6.
BOOL ACTION_DT_1_SendMessage( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	LogMessage( "Sending Dicom message.", MESSAGE_TYPE_SUPPLEMENTARY );
	bNoError = SendDicomBuffer( pAssociation, TRUE );
	if ( bNoError )
		{
		if ( pAssociation -> bSentMessageExpectsResponse )
			{
			pAssociation -> EventIDReadyToBeProcessed = EVENT_RECEPTION_OF_MESSAGE;
			pAssociation -> bSentMessageExpectsResponse = FALSE;
			}
		}
	if ( !bNoError || pAssociation -> EventIDReadyToBeProcessed == EVENT_NO_EVENT_ID_SPECIFIED )
		pAssociation -> EventIDReadyToBeProcessed = EVENT_THIS_NODE_REQUESTS_ASSOCIATION_ABORT;

	return bNoError;
}


// Send P-DATA indication primitive.  Next state is State6.
BOOL ACTION_DT_2_ProcessReceivedMessage( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	bNoError = ReceiveDicomBuffer( pAssociation );
	if ( bNoError )
		{
		LogMessage( "Processing received Dicom message.", MESSAGE_TYPE_SUPPLEMENTARY );
		bNoError = ParseReceivedDicomBuffer( pAssociation );
		}
	if ( bNoError )
		bNoError = RespondToReceivedDicomMessage( pAssociation );

	if ( !bNoError || pAssociation -> EventIDReadyToBeProcessed == EVENT_NO_EVENT_ID_SPECIFIED )
		{
		pAssociation -> EventIDReadyToBeProcessed = EVENT_INVALID_MESSAGE_FORMAT_RECEIVED;
		bNoError = TRUE;
		}

	return bNoError;
}


// Send A-RELEASE-RQ PDU.  Next state is State7.
//  STATE6:		EVENT_THIS_NODE_REQUESTS_ASSOCIATION_RELEASE	==> ACTION_AR_1_SEND_ASSOCIATION_RELEASE_REQUEST	--> STATE7_AWAITING_REPLY_TO_ASSOC_RELEASE_REQUEST
BOOL ACTION_AR_1_SendAssociationReleaseRequest( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	if ( pAssociation -> bReadyToProceedWithAssociation )
		// Return to look for another file to be sent.
		pAssociation -> EventIDReadyToBeProcessed = EVENT_NO_EVENT_ID_SPECIFIED;
	else
		{
		bNoError = PrepareAssociationReleaseRequestBuffer( pAssociation );
		LogMessage( "Sending association release request.", MESSAGE_TYPE_SUPPLEMENTARY );
		if ( bNoError )
			bNoError = SendDicomBuffer( pAssociation, TRUE );
		if ( bNoError )
			bNoError = ReceiveDicomBuffer( pAssociation );
		if ( bNoError )
			bNoError = ParseReceivedDicomBuffer( pAssociation );
		if ( bNoError )
			bNoError = RespondToReceivedDicomMessage( pAssociation );
		}

	return bNoError;
}

// Issue A-RELEASE indication primitive.  Next state is State8.
//  STATE6:		EVENT_RECEPTION_OF_ASSOCIATION_RELEASE_REQUEST	==> ACTION_AR_2_INFORM_THIS_NODE_RELEASE_REQUESTED		--> STATE8_AWAITING_THIS_NODE_RELEASE_RESPONSE
BOOL ACTION_AR_2_InformThisNodeReleaseRequested( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	bNoError = PrepareReleaseRequestReplyBuffer( pAssociation );
	pAssociation -> EventIDReadyToBeProcessed = EVENT_THIS_NODE_RESPONDS_TO_RELEASE_REQUEST;

	return bNoError;
}

// Issue A-RELEASE confirmation primitive, and close transport connection.  Next state is State1.
//  STATE7:		EVENT_RECEPTION_OF_ASSOCIATION_RELEASE_REPLY	==> ACTION_AR_3_INFORM_THIS_NODE_RELEASED_CLOSE_CONNECT	--> STATE1_IDLE
BOOL ACTION_AR_3_InformThisNodeReleasedAndCloseConnection( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	bNoError = CloseConnection( pAssociation -> DicomAssociationSocket );
	pAssociation -> DicomAssociationSocket = INVALID_SOCKET;
	pAssociation -> bAssociationIsActive = FALSE;
	LogMessage( "Closed connection.", MESSAGE_TYPE_SUPPLEMENTARY );

	return bNoError;
}

// Issue A-RELEASE-RP PDU and start ARTIM timer.  Next state is State13.
//  STATE8:		EVENT_THIS_NODE_RESPONDS_TO_RELEASE_REQUEST		==> ACTION_AR_4_SEND_TIMED_REPLY_TO_RELEASE_REQUEST		--> STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE
BOOL ACTION_AR_4_SendTimedReplyToReleaseRequest( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	LogMessage( "Sending response to release request.", MESSAGE_TYPE_SUPPLEMENTARY );
	bNoError = SendDicomBuffer( pAssociation, TRUE );
	// Create a "timing loop" here.
	pAssociation -> EventIDReadyToBeProcessed = EVENT_ASSOCIATION_EVENT_TIMER_HAS_EXPIRED;

	bNoError = CloseConnection( pAssociation -> DicomAssociationSocket );
	pAssociation -> DicomAssociationSocket = INVALID_SOCKET;
	LogMessage( "Closed connection.", MESSAGE_TYPE_SUPPLEMENTARY );
	pAssociation -> EventIDReadyToBeProcessed = EVENT_THIS_NODE_TRANSPORT_CONNECTION_CLOSED;

	return bNoError;
}

// Stop ARTIM timer.  Next state is State1.
//  STATE13:	EVENT_THIS_NODE_TRANSPORT_CONNECTION_CLOSED		==> ACTION_AR_5_STOP_TIMER_AND_GO_IDLE	--> STATE1_IDLE
BOOL ACTION_AR_5_StopTimerAndGoIdle( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	pAssociation -> bAssociationIsActive = FALSE;
	pAssociation -> EventIDReadyToBeProcessed = EVENT_NO_EVENT_ID_SPECIFIED;
	return bNoError;
}

// Issue P-DATA indication.  Next state is State7.
BOOL ACTION_AR_6_InformThisNodeMessageReceived( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	return bNoError;
}

// Issue P-DATA-TF PDU.  Next state is State8.
BOOL ACTION_AR_7_SendMessageDuringReleaseProcessing( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	return bNoError;
}

// Issue A-RELEASE indication (release collision):
//  if association requestor, next state is State9.
//  if not, next state is State10.
BOOL ACTION_AR_8_InformThisNodeCollisionReleaseRequested( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	return bNoError;
}

// Send A-RELEASE-RP PDU.  Next state is State11.
BOOL ACTION_AR_9_SendReplyToReleaseRequest( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	return bNoError;
}

// Issue A-RELEASE confirmation primitive.  Next state is State12.
BOOL ACTION_AR_10_InformThisNodeAssociationReleased( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	return bNoError;
}


// Send A-ABORT PDU (service user source) and start (or restart if already started) ARTIM timer;  Next state is State13.
// STATE6_READY_FOR_DATA_TRANSFER:  EVENT_THIS_NODE_REQUESTS_ASSOCIATION_ABORT ==> ACTION_AA_1_SEND_TIMED_ASSOCIATION_ABORT -->
//			STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE
BOOL ACTION_AA_1_SendTimedAssociationAbort( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	// This needs to be changed to PrepareAssociationAbortBuffer() for the A-ABORT service.
	bNoError = PrepareAssociationProviderAbortBuffer( pAssociation );
	RespondToError( MODULE_DICOMSTATE, DICOMSTATE_ERROR_ASSOCIATION_ABORT );
	if ( bNoError )
		bNoError = SendDicomBuffer( pAssociation, TRUE );

	bNoError = CloseConnection( pAssociation -> DicomAssociationSocket );
	pAssociation -> DicomAssociationSocket = INVALID_SOCKET;
	LogMessage( "Closed connection.", MESSAGE_TYPE_SUPPLEMENTARY );
	pAssociation -> EventIDReadyToBeProcessed = EVENT_THIS_NODE_TRANSPORT_CONNECTION_CLOSED;

	return bNoError;
}

// Stop ARTIM timer if running. Close transport connection.  Next state is State1.
//  STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE:	EVENT_ASSOCIATION_EVENT_TIMER_HAS_EXPIRED	==> ACTION_AA_2_STOP_TIMER_CLOSE_TRANSPORT_CONNECTION	--> STATE1_IDLE
BOOL ACTION_AA_2_StopTimerAndCloseTransportConnection( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	bNoError = CloseConnection( pAssociation -> DicomAssociationSocket );
	pAssociation -> DicomAssociationSocket = INVALID_SOCKET;
	pAssociation -> bAssociationIsActive = FALSE;
	LogMessage( "Closed connection.", MESSAGE_TYPE_SUPPLEMENTARY );

	return bNoError;
}

// If (service user inititated abort)
//	  issue A-ABORT indication and close transport connection.
// Otherwise (service provider inititated abort):
//	  issue A-P-ABORT indication and close transport connection.
// Next state is State1.
BOOL ACTION_AA_3_InformThisNodeAssociationAbortedAndCloseConnection( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	bNoError = CloseConnection( pAssociation -> DicomAssociationSocket );
	pAssociation -> DicomAssociationSocket = INVALID_SOCKET;
	pAssociation -> bAssociationIsActive = FALSE;
	LogMessage( "Closed connection.", MESSAGE_TYPE_SUPPLEMENTARY );

	return bNoError;
}

// Issue A-P-ABORT indication primitive.  Next state is State1.
BOOL ACTION_AA_4_SendProviderAssociationAbort( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	return bNoError;
}

// Stop ARTIM timer.  Next state is State1.
BOOL ACTION_AA_5_StopTimerAndGoIdle( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	return bNoError;
}

// Ignore PDU.  Next state is State13.
BOOL ACTION_AA_6_IgnoreReceivedMessage( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	return bNoError;
}

// Send A-ABORT PDU.  Next state is State13.
BOOL ACTION_AA_7_SendAssociationAbort( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	return bNoError;
}

// Send A-ABORT PDU (service provider source ), issue an A-P-ABORT indication, and start ARTIM timer;  Next state is State13.
// STATE6_READY_FOR_DATA_TRANSFER:  EVENT_INVALID_MESSAGE_FORMAT_RECEIVED ==> ACTION_AA_8_SEND_PROVIDER_ABORT_INFORM_THIS_NODE -->
//				STATE13_AWAITING_THIS_NODE_TRANSPORT_CLOSE
BOOL ACTION_AA_8_SendProviderAbortAndInformThisNode( DICOM_ASSOCIATION *pAssociation )
{
	BOOL			bNoError = TRUE;

	bNoError = PrepareAssociationProviderAbortBuffer( pAssociation );
	RespondToError( MODULE_DICOMSTATE, DICOMSTATE_ERROR_ASSOCIATION_ABORT );
	if ( bNoError )
		bNoError = SendDicomBuffer( pAssociation, TRUE );

	bNoError = CloseConnection( pAssociation -> DicomAssociationSocket );
	pAssociation -> DicomAssociationSocket = INVALID_SOCKET;
	LogMessage( "Closed connection.", MESSAGE_TYPE_SUPPLEMENTARY );
	pAssociation -> EventIDReadyToBeProcessed = EVENT_THIS_NODE_TRANSPORT_CONNECTION_CLOSED;

	return bNoError;
}


BOOL SendDicomBuffer( DICOM_ASSOCIATION *pAssociation, BOOL bDeallocateAfterSending )
{
	BOOL			bNoError = TRUE;
	unsigned long	BufferLength;
	char			*pBuffer;
	int				nBytesSent = 0;

	BufferLength = pAssociation -> SendBufferLength;
	pBuffer = pAssociation -> pSendBuffer;
	bNoError = WindowsSocketSend( pAssociation -> DicomAssociationSocket, pBuffer, (int)BufferLength, 0, &nBytesSent );
	if ( !bNoError )
		LogMessage( "Error sending dicom buffer.", MESSAGE_TYPE_SUPPLEMENTARY );
	if ( bDeallocateAfterSending )
		{
		free( pAssociation -> pSendBuffer );
		pAssociation -> pSendBuffer = 0;
		pAssociation -> SendBufferLength = 0L;
		}

	return bNoError;
}


BOOL ReceiveDicomBuffer( DICOM_ASSOCIATION *pAssociation )
{
	BOOL				bNoError = TRUE;
	PDU_BUFFER_HEADER	PDUHeader;
	char				*pBuffer;
	char				*pBufferInsertPoint;
	int					nBytesReceived = 0;
	unsigned long		LogicalBufferContentNeeded;
	unsigned long		BufferSizeToAllocate;
	char				Msg[ 1096 ];

	LogMessage( "Blocking for command reception.", MESSAGE_TYPE_DETAILS );
	bNoError = WindowsSocketReceive( pAssociation -> DicomAssociationSocket, (char*)&PDUHeader, (int)sizeof(PDUHeader), 0, &nBytesReceived, TRUE );
	LogicalBufferContentNeeded = PDUHeader.PDULength;
	AssociationSwapBytes( pAssociation, &LogicalBufferContentNeeded, 4 );

	sprintf( Msg, "Dicom bytes received = %d.  Receiving PDU type %02X.  Need %d more.", nBytesReceived, PDUHeader.PDU_Type, LogicalBufferContentNeeded );
	LogMessage( Msg, MESSAGE_TYPE_DETAILS );

	BufferSizeToAllocate = LogicalBufferContentNeeded + (unsigned long)sizeof( PDUHeader );
	if ( BufferSizeToAllocate > MAX_ASSOCIATION_RECEIVED_BUFFER_SIZE + (unsigned long)sizeof( PDUHeader ) )
		BufferSizeToAllocate = MAX_ASSOCIATION_RECEIVED_BUFFER_SIZE + (unsigned long)sizeof( PDUHeader );

	pBuffer = (char*)malloc( BufferSizeToAllocate );
	if ( pBuffer != 0 )
		{
		memcpy( pBuffer, (char*)&PDUHeader, sizeof( PDUHeader ) );
		pBufferInsertPoint = pBuffer + sizeof( PDUHeader );
		do
			{
			LogMessage( "Blocking for command reception.", MESSAGE_TYPE_DETAILS );
			bNoError = WindowsSocketReceive( pAssociation -> DicomAssociationSocket, pBufferInsertPoint,
																(int)LogicalBufferContentNeeded, 0, &nBytesReceived, TRUE );
			sprintf( Msg, "Dicom bytes received = %d", nBytesReceived );
			LogMessage( Msg, MESSAGE_TYPE_DETAILS );
			LogicalBufferContentNeeded -= nBytesReceived;
			pBufferInsertPoint += nBytesReceived;
			}
		while ( bNoError && LogicalBufferContentNeeded > 0L );
		}
	else
		{
		bNoError = FALSE;
		RespondToError( MODULE_DICOMSTATE, DICOMSTATE_ERROR_INSUFFICIENT_MEMORY );
		}
	if ( bNoError )
		{
		pAssociation -> pReceivedBuffer = pBuffer;
		pAssociation -> ReceivedBufferLength = BufferSizeToAllocate;
		}
	else
		{
		if ( pBuffer != 0 )
			free( pBuffer );
		pAssociation -> pReceivedBuffer = 0;
		pAssociation -> ReceivedBufferLength = 0L;
		}

	return bNoError;
}


